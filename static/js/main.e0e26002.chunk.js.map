{"version":3,"sources":["components/Sidebar/Menu/Menu.module.css","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Main/Main.module.css","components/common/Button/Button.module.css","components/Main/Users/UsersList/UsersList.module.css","components/Main/Login/Login.module.css","components/Main/Messages/AllMessages/AllMessages.module.css","components/Main/Messages/AllMessages/MessageList/MessageList.module.css","components/Main/Messages/Dialog/Dialog.module.css","components/Main/Users/UsersList/User/User.module.css","serviceWorker.ts","components/Footer/Footer.tsx","components/Sidebar/Menu/Menu.tsx","api/api.ts","redux/messages-reducer.ts","components/Sidebar/Sidebar.tsx","redux/users-reducer.ts","redux/users-selectors.ts","components/common/Button/Button.tsx","components/Main/Users/Search/Search.tsx","components/Main/Users/Paginator/PaginationItem/PaginationItem.tsx","components/Main/Users/Paginator/Paginator.tsx","components/Main/Users/UsersList/User/User.tsx","components/common/Preloader/Preloader.tsx","components/Main/Users/UsersList/UsersList.tsx","components/Main/Users/Users.tsx","components/Main/News/News.tsx","components/Main/Music/Music.tsx","components/Main/Settings/Settings.tsx","utils/validators.ts","redux/init-reducer.ts","redux/auth-reducer.ts","components/common/Input/Input.tsx","components/Main/Login/Login.jsx","redux/profile-reducer.ts","components/Main/Profile/Posts/Post/Post.jsx","components/common/Textarea/Textarea.tsx","components/Main/Profile/Posts/Posts.jsx","components/Main/Profile/Posts/PostsContainer.jsx","components/Main/Profile/User/Avatar/Avatar.jsx","components/Main/Profile/User/UserInfo/Status/Status.tsx","components/Main/Profile/User/UserInfo/ProfileDataForm/ProfileDataForm.jsx","components/Main/Profile/User/UserInfo/ProfileData/ProfileData.jsx","components/Main/Profile/User/UserInfo/UserInfo.jsx","components/Main/Profile/User/User.jsx","components/Main/Profile/Profile.tsx","components/Main/Messages/AllMessages/MessageList/MessageListItem/MessageListItem.tsx","components/Main/Messages/AllMessages/MessageList/MessageList.tsx","components/Main/Messages/AllMessages/AllMessages.tsx","components/Main/Messages/Dialog/Dialog.tsx","components/Main/Messages/Messages.tsx","components/Main/Main.tsx","components/Header/Header.tsx","components/App.tsx","redux/store.ts","index.tsx","components/Main/Messages/AllMessages/MessageList/MessageListItem/MessageListItem.module.css","components/Main/Profile/User/Avatar/Avatar.module.css","components/Main/Profile/User/UserInfo/Status/Status.module.css","components/Header/Header.module.css","assets/images/defaultAvatar.png","components/Main/Profile/Posts/Posts.module.css","components/common/Preloader/Preloader.module.css","components/Main/Profile/User/UserInfo/ProfileDataForm/ProfileDataForm.module.css","components/Main/Users/Search/Search.module.css","components/Main/Users/Paginator/Paginator.module.css","components/Main/Profile/Posts/Post/Post.module.css","components/Main/Profile/User/UserInfo/ProfileData/ProfileData.module.css","components/App.module.css","components/Main/Users/Paginator/PaginationItem/PaginationItem.module.css","assets/images/preloader.gif","components/common/Input/Input.module.css","components/common/Textarea/Textarea.module.css","components/Main/Profile/User/UserInfo/UserInfo.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Footer","className","styles","footer","Menu","newMessagesCount","menu","menuItem","exact","to","menuLink","activeClassName","active","server","axios","create","withCredentials","baseURL","headers","usersAPI","count","page","term","get","res","data","userID","post","delete","profileAPI","status","put","photoFile","formData","FormData","append","profile","authAPI","email","password","rememberMe","captcha","securityAPI","messagesAPI","message","body","date","SET_ALL_MESSAGES","SET_CURRENT_DIALOG","SET_MESSAGES_AFTER_DATE","SET_NEW_MESSAGES_COUNT","TOGGLE_IS_FETCHING","initialState","interlocutors","currentDialog","messagesAfterDate","fetching","toggleIsFetching","property","isFetching","type","messagesReducer","state","action","messages","connect","messagesPage","getNewMessagesCount","dispatch","a","async","useEffect","aside","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SET_TERM","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","currentPage","followingInProgress","setUsers","setTotalUsers","totalUsers","setIsFetching","toggleFollowingProgress","userId","usersReducer","map","user","id","followed","filter","getUsers","usersPage","getUsersSelector","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","Button","width","children","onClick","margin","style","button","Search","React","memo","setTerm","setCurrentPage","setPortionNumber","useState","inputText","setInputText","searchButtonStyle","cursor","div","placeholder","onChange","event","target","value","input","disabled","PaginationItem","number","activeStyle","paginationItemActive","paginationItem","data-number","Paginator","pageSize","portionSize","getRequestUsers","portionNumber","pageCount","Math","ceil","pages","i","push","portionCount","lastElemPageNumber","leftPortionPageNumber","rightPortionPageNumber","pageNumber","dataset","onPageChanged","paginationItems","num","key","User","followButtonDisabled","unfollow","follow","avatarBox","src","photos","small","defaultAvatar","alt","info","userName","name","userStatus","followButton","aria-label","role","sendMessage","Preloader","fullscreen","wrapper","preloader","preloaderIMG","UsersList","usersOrMessage","length","some","compose","response","items","totalCount","resultCode","News","Music","Settings","required","INITIALIZED_SUCCESS","initialized","getMyProfile","getState","isAuth","auth","setMyProfile","initReducer","SET_USER_DATA","SET_CAPTCHA_URL","SET_MY_PROFILE","SET_MY_PHOTO","login","captchaUrl","myProfile","setAuthUserData","payload","getCaptchaUrlSuccess","setMyPhoto","getAuthUserData","meData","getCaptchaUrl","url","authReducer","Input","meta","isError","error","touched","LoginReduxForm","reduxForm","form","handleSubmit","logTestAccount","onSubmit","htmlFor","Field","component","validate","color","then","stopSubmit","_error","initialValues","userLogin","ADD_POST","SET_USER_PROFILE","SET_STATUS","SET_PROFILE_PHOTO","SET_AVATAR_FETCHING","posts","text","likes","avatarIsFetching","addPost","newPost","setUserProfile","setStatus","setAvatarIsFetching","getUsersProfile","profileReducer","Post","props","avatar","Textarea","rows","cols","textarea","maxLength","AddNewPostFormRedux","Posts","postsElements","profilePage","reverse","title","postsList","PostsContainer","Avatar","isOwner","savePhoto","uploadLabel","createRef","avatarWrapper","avatarIMG","large","upload","uploadInput","e","files","photo","current","textContent","ref","Status","updateStatus","editMode","setEditMode","localStatus","setLocalStatus","statusClass","statusExist","statusNotExist","statusBox","autoFocus","currentTarget","onBlur","onFocus","select","statusInput","statusNotMe","aboutMe","myContacts","Object","keys","contacts","toUpperCase","slice","ProfileData","isContactsExists","values","contact","about","lookingForAJob","lookingForAJobDescription","contactsList","entries","rel","href","UserInfo","saveProfile","fullName","catch","display","getStatus","file","Promise","reject","saveMyProfile","useParams","userURL","MessageListItem","hasNewMessages","lastDialogActivityDate","lastUserActivityDate","isToday","setIsToday","now","Date","tomorrow","setDate","getDate","yesterday","lastMessageDate","getTime","li","infoMessage","lastMessage","toLocaleTimeString","toLocaleDateString","MessageList","ul","AllMessages","Dialog","startChatting","getInterlocutorsList","getDialog","getMessagesAfterDate","interlocutor","find","item","justifyContent","height","Main","content","path","render","logout","header","container","infoMe","split","init","initializeApp","main","rootReducer","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e0e26002.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__27qdF\",\"menuLink\":\"Menu_menuLink__EHAtu\",\"active\":\"Menu_active__2D1vX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3hmYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Sidebar_aside__1e2NK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Main_content__2h5Jj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__OZeNM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UsersList_users__WQVOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__3z_ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AllMessages_wrapper__3ZCDm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MessageList_wrapper__3ITZB\",\"ul\":\"MessageList_ul__17krG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialog_wrapper__111U0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Qdic\",\"avatarBox\":\"User_avatarBox__dLefj\",\"info\":\"User_info__3dI-o\",\"userName\":\"User_userName__1AQPc\",\"followButton\":\"User_followButton__y-S0x\",\"sendMessage\":\"User_sendMessage__39BmE\",\"userStatus\":\"User_userStatus__1tTcC\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Main is cached for offline use.\" message.\n              console.log('Main is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport styles from './Footer.module.css'\n\nfunction Footer () {\n  return (\n    <footer className={styles.footer}>\n      samurai-network\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styles from './Menu.module.css'\n\nfunction Menu ({newMessagesCount}: any) {\n  return (\n    <ul className={styles.menu}>\n      <li className={styles.menuItem}>\n        <NavLink\n          exact to='/profile' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Моя страница\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/messages' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Сообщения ({newMessagesCount})\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/users' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Пользователи\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/news' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Новости\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/music' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Музыка\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/settings' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Настройки\n        </NavLink>\n      </li>\n    </ul>\n  )\n}\n\nexport default Menu\n","import axios from 'axios'\r\nimport {\r\n  UsersType,\r\n  OperationResult,\r\n  SavePhotoType,\r\n  MeType,\r\n  LoginType,\r\n  CaptchaType,\r\n  InterlocutorType,\r\n  DialogsType,\r\n  SendMessageType,\r\n  MessagesAfterDateType,\r\n  ProfileType\r\n} from '../types/types'\r\n\r\nconst server = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    // ca3b0eb4-4af6-4803-8caa-f7d26464a12c main\r\n    // a7da6dad-5c4f-417c-a0d9-8d30ee0d96ec secondary\r\n    'API-KEY': 'ca3b0eb4-4af6-4803-8caa-f7d26464a12c',\r\n  }\r\n})\r\n\r\nexport const usersAPI = {\r\n  async getUsers (count: number, page: number, term = '') {\r\n    const res = await server.get<UsersType>(`users?count=${count}&page=${page}&term=${term}`)\r\n    return res.data\r\n  },\r\n  async isFollowing (userID: number) {\r\n    const res = await server.get<boolean>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async follow (userID: number) {\r\n    const res = await server.post<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async unfollow (userID: number) {\r\n    const res = await server.delete<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile (userID: number) {\r\n    const res = await server.get<ProfileType>(`profile/${userID}`)\r\n    return res.data\r\n  },\r\n  async getStatus (userID: number) {\r\n    const res = await server.get<string>(`profile/status/${userID}`)\r\n    return res.data\r\n  },\r\n  async updateStatus (status: string) {\r\n    const res = await server.put<OperationResult>(`profile/status`, { status: status })\r\n    return res.data\r\n  },\r\n  async updatePhoto (photoFile: File) {\r\n    const formData = new FormData()\r\n    formData.append(`image`, photoFile)\r\n\r\n    const res = await server.put<SavePhotoType>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type':\r\n          'multipart/form-data'\r\n      }\r\n    })\r\n\r\n    return res.data\r\n  },\r\n  async updateProfile (profile: ProfileType) {\r\n    const res = await server.put<OperationResult>(`profile`, profile)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  async me () {\r\n    const res = await server.get<MeType>(`auth/me`)\r\n    return res.data\r\n  },\r\n  async login (email: string, password: string, rememberMe = true, captcha: string) {\r\n    const res = await server.post<LoginType>(`auth/login`, { email, password, rememberMe, captcha })\r\n    return res.data\r\n  },\r\n  async logout () {\r\n    const res = await server.post<OperationResult>(`auth/logout`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptcha () {\r\n    const res = await server.get<CaptchaType>(`security/get-captcha-url`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const messagesAPI = {\r\n  async startChatting (userID: number) {\r\n    const res = await server.put<OperationResult>(`dialogs/${userID}`)\r\n    return res.data\r\n  },\r\n  async getInterlocutorsList () {\r\n    const res = await server.get<Array<InterlocutorType>>(`dialogs`)\r\n    return res.data\r\n  },\r\n  async getDialog (userID: number) {\r\n    const res = await server.get<DialogsType>(`dialogs/${userID}/messages`)\r\n    return res.data\r\n  },\r\n  async sendMessage (userID: number, message: string) {\r\n    const res = await server.post<SendMessageType>(`dialogs/${userID}/messages`, { body: message })\r\n    return res.data\r\n  },\r\n  async readMessage (messageID: string) {\r\n    const res = await server.get<boolean>(`dialogs/messages/${messageID}/viewed`)\r\n    return res.data\r\n  },\r\n  async putMessageInSpam (messageID: string) {\r\n    const res = await server.post<OperationResult>(`dialogs/messages/${messageID}/spam`)\r\n    return res.data\r\n  },\r\n  async deleteMessage (messageID: string) {\r\n    const res = await server.delete<OperationResult>(`dialogs/messages/${messageID}`)\r\n    return res.data\r\n  },\r\n  async restoreMessage (messageID: string) {\r\n    const res = await server.put<OperationResult>(`dialogs/messages/${messageID}/restore`)\r\n    return res.data\r\n  },\r\n  async getMessagesAfterDate (userID: number, date: string) {\r\n    const res = await server.get<Array<MessagesAfterDateType>>(\r\n      `dialogs/${userID}/messages/new?newerThen=${date}`\r\n    )\r\n    return res.data\r\n  },\r\n  async getNewMessagesCount () {\r\n    const res = await server.get<number>(`dialogs/messages/new/count`)\r\n    return res.data\r\n  },\r\n}\r\n","import { InterlocutorType, DialogType, MessagesAfterDateType } from '../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\nimport { messagesAPI } from '../api/api'\r\n\r\n/* Action types */\r\nconst SET_ALL_MESSAGES = 'samurai-network/messages/GET_ALL_MESSAGES'\r\nconst SET_CURRENT_DIALOG = 'samurai-network/messages/SET_CURRENT_DIALOG'\r\nconst SET_MESSAGES_AFTER_DATE = 'samurai-network/messages/SET_MESSAGES_AFTER_DATE'\r\nconst SET_NEW_MESSAGES_COUNT = 'samurai-network/messages/SET_NEW_MESSAGES_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/messages/TOGGLE_IS_FETCHING'\r\n\r\nconst initialState = {\r\n  interlocutors: null as Array<InterlocutorType> | null,\r\n  currentDialog: null as Array<DialogType> | null,\r\n  messagesAfterDate: null as Array<MessagesAfterDateType> | null,\r\n  newMessagesCount: 0,\r\n\r\n  fetching: {\r\n    interlocutors: false,\r\n    currentDialog: false,\r\n    messagesAfterDate: false,\r\n    newMessagesCount: false,\r\n  },\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionTypes =\r\n  setAllMessagesActionType |\r\n  setCurrentDialogActionType |\r\n  setNewMessagesCountActionType |\r\n  setMessagesAfterDateActionType |\r\n  toggleIsFetchingActionType\r\n\r\nfunction messagesReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_ALL_MESSAGES:\r\n      return {\r\n        ...state,\r\n        interlocutors: action.messages\r\n      }\r\n\r\n    case SET_CURRENT_DIALOG:\r\n      return {\r\n        ...state,\r\n        currentDialog: action.currentDialog\r\n      }\r\n\r\n    case SET_MESSAGES_AFTER_DATE:\r\n      return {\r\n        ...state,\r\n        messagesAfterDate: action.messagesAfterDate\r\n      }\r\n\r\n    case SET_NEW_MESSAGES_COUNT:\r\n      return {\r\n        ...state,\r\n        newMessagesCount: action.count\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        fetching: {\r\n          ...state.fetching,\r\n          [action.property]: action.isFetching\r\n        }\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype setAllMessagesActionType = { type: typeof SET_ALL_MESSAGES, messages: Array<InterlocutorType> };\r\nexport const setAllMessages = (messages: Array<InterlocutorType>): setAllMessagesActionType => ({\r\n  type: SET_ALL_MESSAGES,\r\n  messages\r\n})\r\n\r\ntype setCurrentDialogActionType = { type: typeof SET_CURRENT_DIALOG, currentDialog: Array<DialogType> };\r\nexport const setCurrentDialog = (currentDialog: Array<DialogType>): setCurrentDialogActionType => ({\r\n  type: SET_CURRENT_DIALOG,\r\n  currentDialog\r\n})\r\n\r\ntype setMessagesAfterDateActionType = { type: typeof SET_MESSAGES_AFTER_DATE, messagesAfterDate: Array<MessagesAfterDateType> };\r\nexport const setMessagesAfterDate = (messagesAfterDate: Array<MessagesAfterDateType>): setMessagesAfterDateActionType => ({\r\n  type: SET_MESSAGES_AFTER_DATE,\r\n  messagesAfterDate: messagesAfterDate\r\n})\r\n\r\ntype setNewMessagesCountActionType = { type: typeof SET_NEW_MESSAGES_COUNT, count: number };\r\nexport const setNewMessagesCount = (count: number): setNewMessagesCountActionType => ({\r\n  type: SET_NEW_MESSAGES_COUNT,\r\n  count\r\n})\r\n\r\ntype toggleIsFetchingPropertyType = 'allMessages' | 'currentDialog' | 'messagesAfterDate' | 'newMessagesCount'\r\ntype toggleIsFetchingActionType = {\r\n  type: typeof TOGGLE_IS_FETCHING,\r\n  property: toggleIsFetchingPropertyType,\r\n  isFetching: boolean\r\n};\r\nexport const toggleIsFetching = (property: toggleIsFetchingPropertyType, isFetching: boolean): toggleIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  property,\r\n  isFetching\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const startChatting = (userID: number): ThunkType => {\r\n  return async () => {\r\n    await messagesAPI.startChatting(userID)\r\n  }\r\n}\r\n\r\nexport const getInterlocutorsList = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('allMessages', true))\r\n    const res = await messagesAPI.getInterlocutorsList()\r\n    dispatch(setAllMessages(res))\r\n    dispatch(toggleIsFetching('allMessages', false))\r\n  }\r\n}\r\n\r\nexport const getDialog = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('currentDialog', true))\r\n    const res = await messagesAPI.getDialog(userID)\r\n    if (!res.error) {\r\n      dispatch(setCurrentDialog(res.items))\r\n      dispatch(toggleIsFetching('currentDialog', false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const sendMessage = (userID: number, message: string): ThunkType => {\r\n  return async () => {\r\n    await messagesAPI.sendMessage(userID, message)\r\n  }\r\n}\r\n\r\nexport const getNewMessagesCount = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('newMessagesCount', true))\r\n    const res = await messagesAPI.getNewMessagesCount()\r\n    dispatch(setNewMessagesCount(res))\r\n    dispatch(toggleIsFetching('newMessagesCount', false))\r\n  }\r\n}\r\n\r\nexport const getMessagesAfterDate = (userID: number, date: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('messagesAfterDate', true))\r\n    const res = await messagesAPI.getMessagesAfterDate(userID, date)\r\n    dispatch(setMessagesAfterDate(res))\r\n    dispatch(toggleIsFetching('messagesAfterDate', false))\r\n  }\r\n}\r\n\r\nexport default messagesReducer\r\n","import React, { useEffect } from 'react'\nimport styles from './Sidebar.module.css'\nimport Menu from './Menu/Menu'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/store'\nimport { getNewMessagesCount } from '../../redux/messages-reducer'\n\ntype MapStatePropTypes = { newMessagesCount: number }\n\ntype MapDispatchPropTypes = { getNewMessagesCount: () => void }\n\nconst Sidebar: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({ newMessagesCount, getNewMessagesCount }) => {\n  useEffect(() => {\n    getNewMessagesCount()\n  }, [getNewMessagesCount])\n\n  return (\n    <aside className={styles.aside}>\n      <Menu newMessagesCount={newMessagesCount}/>\n    </aside>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    newMessagesCount: state.messagesPage.newMessagesCount\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\n  getNewMessagesCount\n})(Sidebar)\n","import { usersAPI } from '../api/api'\r\nimport { UserType } from '../types/types'\r\nimport { AppStateType } from './store'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\n/* Action types */\r\nconst FOLLOW = 'samurai-network/users/FOLLOW'\r\nconst UNFOLLOW = 'samurai-network/users/UNFOLLOW'\r\nconst SET_USERS = 'samurai-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'samurai-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'samurai-network/users/SET_TOTAL_USERS_COUNT'\r\nconst SET_TERM = 'samurai-network/users/SET_TERM'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'samurai-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>, // array of users ids\r\n  term: '',\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  AcceptFollowActionType |\r\n  AcceptUnfollowActionType |\r\n  SetUsersActionType |\r\n  SetCurrentPageActionType |\r\n  SetTotalUsersActionType |\r\n  SetIsFetchingActionType |\r\n  ToggleFollowingProgressActionType |\r\n  setTermActionType\r\n\r\nfunction usersReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: true }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: false }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      }\r\n\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching ?\r\n          [...state.followingInProgress, action.userId] :\r\n          state.followingInProgress.filter(id => id !== action.userId),\r\n      }\r\n\r\n    case SET_TERM:\r\n      return {\r\n        ...state,\r\n        term: action.term,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AcceptFollowActionType = { type: typeof FOLLOW, id: number };\r\nexport const acceptFollow = (id: number): AcceptFollowActionType => ({\r\n  type: FOLLOW,\r\n  id\r\n})\r\n\r\ntype AcceptUnfollowActionType = { type: typeof UNFOLLOW, id: number };\r\nexport const acceptUnfollow = (id: number): AcceptUnfollowActionType => ({\r\n  type: UNFOLLOW,\r\n  id\r\n})\r\n\r\ntype SetUsersActionType = { type: typeof SET_USERS, users: Array<UserType> };\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({\r\n  type: SET_USERS,\r\n  users\r\n})\r\n\r\ntype SetCurrentPageActionType = { type: typeof SET_CURRENT_PAGE, currentPage: number };\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n})\r\n\r\ntype SetTotalUsersActionType = { type: typeof SET_TOTAL_USERS_COUNT, totalUsersCount: number };\r\nexport const setTotalUsers = (totalUsers: number): SetTotalUsersActionType => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  totalUsersCount: totalUsers,\r\n})\r\n\r\ntype SetIsFetchingActionType = { type: typeof TOGGLE_IS_FETCHING, isFetching: boolean };\r\nexport const setIsFetching = (isFetching: boolean): SetIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = { type: typeof TOGGLE_IS_FOLLOWING_PROGRESS, isFetching: boolean, userId: number };\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n})\r\n\r\ntype setTermActionType = { type: typeof SET_TERM, term: string }\r\nexport const setTerm = (term: string): setTermActionType => ({\r\n  type: SET_TERM,\r\n  term,\r\n})\r\n\r\n/* Thunk creators */\r\n// type GetStateType = () => AppStateType\r\n// type DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getRequestUsers = (pageSize: number, currentPage: number, term = ''): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(setIsFetching(true))\r\n    const response = await usersAPI.getUsers(pageSize, currentPage, term)\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsers(response.totalCount))\r\n    dispatch(setIsFetching(false))\r\n  }\r\n}\r\n\r\nexport const follow = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userID))\r\n    const response = await usersAPI.follow(userID)\r\n    if (response.resultCode === 0) dispatch(acceptFollow(userID))\r\n    dispatch(toggleFollowingProgress(false, userID))\r\n  }\r\n}\r\n\r\nexport const unfollow = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userID))\r\n    const response = await usersAPI.unfollow(userID)\r\n    if (response.resultCode === 0) dispatch(acceptUnfollow(userID))\r\n    dispatch(toggleFollowingProgress(false, userID))\r\n  }\r\n}\r\n\r\nexport default usersReducer\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './store'\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector__BadRender = (state: AppStateType) => {\r\n  return getUsers(state).filter(() => true)\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(() => true)\r\n  },\r\n)\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\n","import React from 'react'\nimport styles from './Button.module.css'\n\ntype PropTypes = {\n  width?: number\n  onClick?: () => any\n  margin?: string\n  type?: any\n}\n\nconst Button: React.FC<PropTypes> = ({ width, children, onClick, margin, type }) => {\n  return (\n    <button type={type} onClick={onClick} style={{ width, margin }} className={styles.button}>{children}</button>\n  )\n}\n\nexport default Button\n","import React, { useState, ChangeEvent } from 'react'\r\nimport styles from './Search.module.css'\r\nimport Button from '../../../common/Button/Button'\r\n\r\ntype PropTypes = {\r\n  setTerm: (term: string) => void\r\n  setCurrentPage: (page: number) => void\r\n  setPortionNumber: (number: number) => void\r\n}\r\n\r\nconst Search = React.memo<PropTypes>(\r\n  ({ setTerm, setCurrentPage, setPortionNumber }) => {\r\n    const [inputText, setInputText] = useState('')\r\n\r\n    const onTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n      setInputText(event.target.value)\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n      setCurrentPage(1)\r\n      setTerm(inputText)\r\n      setPortionNumber(1)\r\n    }\r\n\r\n    const onReset = () => {\r\n      setCurrentPage(1)\r\n      setTerm('')\r\n      setInputText('')\r\n      setPortionNumber(1)\r\n    }\r\n\r\n    const searchButtonStyle = {\r\n      cursor: (inputText) ? 'pointer' : 'not-allowed'\r\n    }\r\n\r\n    return (\r\n      <div className={styles.div}>\r\n        <input placeholder=\"Поиск\" type=\"text\" onChange={onTextChange} className={styles.input} value={inputText}/>\r\n        <button\r\n          disabled={!inputText}\r\n          style={searchButtonStyle}\r\n          onClick={onButtonClick}\r\n          className={styles.button}>\r\n          Найти\r\n        </button>\r\n        <Button margin='0 0 0 10px' onClick={onReset}>Сброс</Button>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport styles from './PaginationItem.module.css'\r\n\r\ntype PropTypes = {\r\n  active: boolean\r\n  number: number\r\n}\r\n\r\nconst PaginationItem: React.FC<PropTypes> = ({ active, number }) => {\r\n  const activeStyle = active ? styles.paginationItemActive : ''\r\n\r\n  return (\r\n    <li className={styles.paginationItem + ' ' + activeStyle} data-number={number}>{number}</li>\r\n  )\r\n}\r\n\r\nexport default PaginationItem\r\n","import React, { useEffect } from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport PaginationItem from './PaginationItem/PaginationItem'\r\n\r\ntype PropTypes = {\r\n  currentPage: number\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  portionSize: number\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  term: string\r\n  setCurrentPage: (page: number) => void\r\n  portionNumber: number\r\n  setPortionNumber: (number: number) => void\r\n}\r\n\r\nconst Paginator = React.memo<PropTypes>(\r\n  ({ setCurrentPage, currentPage, totalUsersCount, pageSize, portionSize, getRequestUsers, term, portionNumber, setPortionNumber }) => {\r\n\r\n    useEffect(() => {\r\n      getRequestUsers(pageSize, currentPage, term)\r\n    }, [getRequestUsers, pageSize, currentPage, term])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n      getRequestUsers(pageSize, currentPage, term)\r\n      setCurrentPage(currentPage)\r\n    }\r\n\r\n    const pageCount = Math.ceil(totalUsersCount / pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i < totalUsersCount; i++) {\r\n      pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / portionSize)\r\n    const lastElemPageNumber = pageCount / portionSize * portionSize\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    const changePage = (event: any) => {\r\n      const pageNumber = +event.target.dataset.number\r\n\r\n      if (pageNumber) {\r\n        onPageChanged(pageNumber)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div onClick={changePage} className={styles.paginationItems}>\r\n        {\r\n          totalUsersCount > 0 &&\r\n          <button disabled={portionNumber === 1} className={styles.button}\r\n                  onClick={() => {setPortionNumber(portionNumber - 1)}}>Влево</button>\r\n        }\r\n        {\r\n          pages.filter(\r\n            (num) => (num >= leftPortionPageNumber && num <= rightPortionPageNumber && num <= lastElemPageNumber))\r\n            .map((num) => (\r\n              <PaginationItem key={num} number={num} active={+currentPage === num}/>\r\n            ))\r\n        }\r\n        {\r\n          totalUsersCount > 0 &&\r\n          <button disabled={portionCount === portionNumber} className={styles.button}\r\n                  onClick={() => {setPortionNumber(portionNumber + 1)}}>Вправо</button>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default Paginator\r\n","import React from 'react'\r\nimport styles from './User.module.css'\r\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../../../../types/types'\r\n\r\ntype PropTypes = {\r\n  user: UserType\r\n  followButtonDisabled: boolean\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n}\r\n\r\nfunction User ({ user, followButtonDisabled, unfollow, follow }: PropTypes) {\r\n  return (\r\n    <li className={styles.user}>\r\n      <div className={styles.avatarBox}>\r\n        <NavLink to={`/profile/${user.id}`}>\r\n          <img src={user.photos.small || defaultAvatar} alt='avatar'/>\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={styles.info}>\r\n        <NavLink className={styles.userName} to={`/profile/${user.id}`}>{user.name}</NavLink>\r\n        {user.status && <span className={styles.userStatus}>{user.status}</span>}\r\n\r\n        {\r\n          user.followed ? (\r\n            <button\r\n              className={styles.followButton}\r\n              disabled={followButtonDisabled}\r\n              onClick={() => {unfollow(user.id)}}\r\n            >\r\n              Отписаться <span aria-label=\"Отписаться\" role=\"img\">❌</span>\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className={styles.followButton}\r\n              disabled={followButtonDisabled}\r\n              onClick={() => {follow(user.id)}}\r\n            >\r\n              Подписаться <span aria-label=\"Подписаться\" role=\"img\">✅</span>\r\n            </button>\r\n          )\r\n        }\r\n\r\n        <NavLink to={`/messages/${user.id}`} className={styles.sendMessage}>Написать сообщение</NavLink>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\nimport styles from './Preloader.module.css'\nimport preloader from '../../../assets/images/preloader.gif'\n\ntype PropTypes = {\n  fullscreen?: boolean\n}\n\nconst Preloader: React.FC<PropTypes> = ({ fullscreen = false }) => {\n  return (fullscreen) ? (\n    <div className={styles.wrapper}>\n      <div className={styles.preloader}>\n        <img className={styles.preloaderIMG} src={preloader} alt='load'/>\n      </div>\n    </div>\n  ) : (\n    <img className={styles.preloaderIMG} src={preloader} alt='load'/>\n  )\n}\n\nexport default Preloader\n","import React from 'react'\r\nimport styles from './UsersList.module.css'\r\nimport User from './User/User'\r\nimport { UserType } from '../../../../types/types'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\n\r\ntype PropTypes = {\r\n  users: Array<UserType>\r\n  followingInProgress: Array<number>\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  isFetching: boolean\r\n}\r\n\r\nconst UsersList = React.memo<PropTypes>(\r\n  ({ users, followingInProgress, follow, unfollow, isFetching }) => {\r\n\r\n    const usersOrMessage = (users.length) ?\r\n      users.map((user) => (\r\n        <User key={user.id}\r\n              user={user}\r\n              followButtonDisabled={followingInProgress.some(id => id === user.id)}\r\n              follow={follow}\r\n              unfollow={unfollow}\r\n        />\r\n      )) : 'Ничего не найдено'\r\n\r\n    return (\r\n      isFetching ? <Preloader/> :\r\n        <ul className={styles.users}>\r\n          {usersOrMessage}\r\n        </ul>\r\n    )\r\n\r\n  }\r\n)\r\n\r\nexport default UsersList\r\n","import { connect } from 'react-redux'\r\nimport {\r\n  getRequestUsers,\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n} from '../../../redux/users-reducer'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getTotalUsersCount,\r\n  getUsersSelector,\r\n} from '../../../redux/users-selectors'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { UserType } from '../../../types/types'\r\nimport { compose } from 'redux'\r\nimport Search from './Search/Search'\r\nimport Paginator from './Paginator/Paginator'\r\nimport UsersList from './UsersList/UsersList'\r\n\r\ntype MapStatePropTypes = {\r\n  currentPage: number\r\n  users: Array<UserType>\r\n  totalUsersCount: number\r\n  isFetching: boolean\r\n  followingInProgress: Array<number>\r\n  term: string\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  setCurrentPage: (page: number) => void\r\n  setIsFetching: (isFetching: boolean) => void\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  setTerm: (term: string) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nconst Users: React.FC<PropTypes> = ({\r\n  currentPage,\r\n  totalUsersCount,\r\n  isFetching,\r\n  users,\r\n  followingInProgress,\r\n  setCurrentPage,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n  getRequestUsers,\r\n  term,\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setCurrentPage(1)\r\n    }\r\n  }, [setCurrentPage])\r\n\r\n  const [portionNumber, setPortionNumber] = useState(1)\r\n\r\n  return (\r\n    <>\r\n      <h1>Пользователи</h1>\r\n      <Search\r\n        setTerm={setTerm}\r\n        setCurrentPage={setCurrentPage}\r\n        setPortionNumber={setPortionNumber}\r\n      />\r\n      <Paginator\r\n        totalUsersCount={totalUsersCount}\r\n        currentPage={currentPage}\r\n        pageSize={6}\r\n        portionSize={10}\r\n        getRequestUsers={getRequestUsers}\r\n        term={term}\r\n        setCurrentPage={setCurrentPage}\r\n        portionNumber={portionNumber}\r\n        setPortionNumber={setPortionNumber}\r\n      />\r\n      <UsersList\r\n        users={users}\r\n        followingInProgress={followingInProgress}\r\n        follow={follow}\r\n        unfollow={unfollow}\r\n        isFetching={isFetching}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\r\n  return {\r\n    users: getUsersSelector(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n    term: state.usersPage.term,\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\r\n    setCurrentPage,\r\n    setIsFetching,\r\n    getRequestUsers,\r\n    follow,\r\n    unfollow,\r\n    setTerm,\r\n  }),\r\n)(Users)\r\n","import React from 'react'\nimport styles from './News.module.css'\n\nfunction News () {\n  return (\n    <div className={styles.messages}>\n      Новости\n    </div>\n  )\n}\n\nexport default News\n","import React from 'react'\nimport styles from './Music.module.css'\n\nfunction Music () {\n  return (\n    <div className={styles.messages}>\n      Музыка\n    </div>\n  )\n}\n\nexport default Music\n","import React from 'react'\nimport styles from './Settings.module.css'\n\nfunction Settings () {\n  return (\n    <div className={styles.messages}>\n      Настройки\n    </div>\n  )\n}\n\nexport default Settings\n","export const required = (value: string) => {\r\n  if (!value) return 'Поле обязательное'\r\n}\r\n\r\nexport const maxLengthCreator = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Максимальная длина - ${length}`\r\n}\r\n","import { getAuthUserData, setMyProfile } from './auth-reducer'\r\nimport { profileAPI } from '../api/api'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\n\r\n/* Action types */\r\nconst INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes = InitializedSuccessType\r\n\r\nfunction initReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype InitializedSuccessType = { type: typeof INITIALIZED_SUCCESS };\r\nexport const initializedSuccess = (): InitializedSuccessType => ({\r\n  type: INITIALIZED_SUCCESS\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const initializeApp = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(getAuthUserData())\r\n      .then(() => {\r\n        dispatch(getMyProfile()).then(() => {\r\n          dispatch(initializedSuccess())\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const getMyProfile = (): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    const isAuth = getState().auth.isAuth\r\n    const userID = getState().auth.userId\r\n\r\n    if (isAuth && userID) {\r\n      const response = await profileAPI.getProfile(userID)\r\n      // @ts-ignore\r\n      dispatch(setMyProfile(response))\r\n    }\r\n  }\r\n}\r\n\r\nexport default initReducer\r\n","import { authAPI, profileAPI, securityAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType, ProfileType } from '../types/types'\r\nimport { getMyProfile } from './init-reducer'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\n\r\n/* Action types */\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\nconst SET_CAPTCHA_URL = 'samurai-network/auth/SET_CAPTCHA_URL'\r\nconst SET_MY_PROFILE = 'samurai-network/auth/SET_MY_PROFILE'\r\nconst SET_MY_PHOTO = 'samurai-network/auth/SET_MY_PHOTO'\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isFetching: false,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n  myProfile: null as ProfileType | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  SetAuthUserDataActionType |\r\n  GetCaptchaUrlSuccessType |\r\n  SetMyProfileType |\r\n  SetMyPhotoType\r\n\r\nfunction authReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n\r\n    case SET_CAPTCHA_URL:\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      }\r\n\r\n    case SET_MY_PROFILE:\r\n      return {\r\n        ...state,\r\n        myProfile: action.profile,\r\n      }\r\n\r\n    case SET_MY_PHOTO:\r\n      return {\r\n        ...state,\r\n        myProfile: {\r\n          ...state.myProfile,\r\n          photos: action.photos\r\n        } as ProfileType,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype SetAuthUserDataActionPayloadType = { userId: number | null, email: string | null, login: string | null, isAuth: boolean };\r\ntype SetAuthUserDataActionType = { type: typeof SET_USER_DATA, payload: SetAuthUserDataActionPayloadType };\r\nexport const setAuthUserData = (\r\n  userId: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n): SetAuthUserDataActionType => (\r\n  { type: SET_USER_DATA, payload: { userId, email, login, isAuth } }\r\n)\r\n\r\ntype GetCaptchaUrlSuccessType = { type: typeof SET_CAPTCHA_URL, captchaUrl: string };\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n  type: SET_CAPTCHA_URL,\r\n  captchaUrl: captchaUrl,\r\n})\r\n\r\ntype SetMyProfileType = { type: typeof SET_MY_PROFILE, profile: ProfileType }\r\nexport const setMyProfile = (profile: ProfileType): SetMyProfileType => ({\r\n  type: SET_MY_PROFILE,\r\n  profile,\r\n})\r\n\r\nexport type SetMyPhotoType = { type: typeof SET_MY_PHOTO, photos: PhotosType }\r\nexport const setMyPhoto = (photos: PhotosType): SetMyPhotoType => ({\r\n  type: SET_MY_PHOTO,\r\n  photos,\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const saveMyProfile = (profile: ProfileType): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updateProfile(profile)\r\n    if (response.resultCode === 0) {\r\n      await dispatch(setMyProfile(profile))\r\n    }\r\n    else {\r\n      // @ts-ignore\r\n      dispatch(stopSubmit('edit-profile', { _error: response.messages[0] }))\r\n      return Promise.reject()\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === 0) {\r\n      let { id, email, login } = meData.data\r\n      dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (data.resultCode === 0) {\r\n      dispatch(getAuthUserData()).then(() => {\r\n        dispatch(getMyProfile())\r\n      })\r\n    }\r\n    else {\r\n      // 10 - Captcha is required\r\n      if (data.resultCode === 10) {\r\n        await dispatch(getCaptchaUrl())\r\n      }\r\n\r\n      // @ts-ignore\r\n      dispatch(stopSubmit('login', { _error: data.messages[0] }))\r\n    }\r\n  }\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n\r\n    if (response.resultCode === 0) {\r\n      dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await securityAPI.getCaptcha()\r\n    const captchaUrl = response.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n  }\r\n}\r\n\r\nexport default authReducer\r\n","import React from 'react'\nimport styles from './Input.module.css'\n\ntype PropTypes = {\n  width?: number\n  margin?: string\n  placeholder: string\n  meta: any\n  input: any\n  type: string\n  id: string\n}\n\nconst Input: React.FC<PropTypes> = ({ width, margin, placeholder, meta, input, type, id }) => {\n  const isError = meta.error && meta.touched\n\n  return (\n    <span>\n      <input\n        {...input}\n        id={id}\n        type={type}\n        style={{ width, margin }}\n        className={styles.input}\n        placeholder={placeholder}\n      />\n      {isError && <span className={(isError || null) && styles.error}>{meta.error}</span>}\n    </span>\n  )\n}\n\nexport default Input\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required } from '../../../utils/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Input from '../../common/Input/Input'\r\nimport styles from './Login.module.css'\r\nimport Button from '../../common/Button/Button'\r\n\r\nfunction Login ({ login, isAuth, captchaUrl }) {\r\n  const onSubmit = (formData) => {\r\n    const { userLogin, password, rememberMe, captcha } = formData\r\n    login(userLogin, password, rememberMe, captcha)\r\n  }\r\n\r\n  const logTestAccount = () => {\r\n    login('free@samuraijs.com', 'free', true, '')\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to='/profile'/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Авторизация</h1>\r\n      <LoginReduxForm\r\n        initialValues={{ rememberMe: true }}\r\n        logTestAccount={logTestAccount}\r\n        captchaUrl={captchaUrl}\r\n        onSubmit={onSubmit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction LoginForm ({ handleSubmit, error, captchaUrl, logTestAccount }) {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      <div>\r\n        <label htmlFor='loginLogin'>Email</label>\r\n        <Field\r\n          width='250px'\r\n          type='text'\r\n          placeholder='Email'\r\n          name='userLogin'\r\n          component={Input}\r\n          validate={[required]}\r\n          id='loginLogin'\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor='loginPassword'>Пароль</label>\r\n        <Field\r\n          type='password'\r\n          placeholder='Пароль'\r\n          name='password'\r\n          component={Input}\r\n          validate={[required]}\r\n          width='250px'\r\n          id='loginPassword'\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Field type='checkbox' name='rememberMe' id='rememberMe' component={Input}/>\r\n        <label htmlFor='rememberMe'>Запомнить меня</label>\r\n      </div>\r\n\r\n      <div>\r\n        {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n        {\r\n          captchaUrl && (\r\n            <>\r\n              <label htmlFor='loginCaptcha'>Капча</label>\r\n              <Field\r\n                type='text'\r\n                placeholder='Капча'\r\n                name='captcha'\r\n                component={Input}\r\n                validate={[required]}\r\n                id='loginCaptcha'\r\n              />\r\n            </>\r\n          )\r\n        }\r\n      </div>\r\n\r\n      {error ? <div style={{ color: 'red' }}>{error}</div> : null}\r\n      <div>\r\n        <Button type='submit' width='100px'>Войти</Button>\r\n        <Button type='button' margin='0 0 0 10px' onClick={logTestAccount}>Войти под тестовым аккаунтом</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nexport default connect((state) => ({\r\n  isAuth: state.auth.isAuth, captchaUrl: state.auth.captchaUrl\r\n}), { login })(Login)\r\n","import { profileAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType, PostType, ProfileType } from '../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\nimport { setMyPhoto, SetMyPhotoType } from './auth-reducer'\r\n\r\n/* Action types */\r\nconst ADD_POST = 'samurai-network/profile/ADD_POST'\r\nconst SET_USER_PROFILE = 'samurai-network/profile/SET_USER_PROFILE'\r\nconst SET_STATUS = 'samurai-network/profile/SET_STATUS'\r\nconst SET_PROFILE_PHOTO = 'samurai-network/profile/SET_PROFILE_PHOTO'\r\nconst SET_AVATAR_FETCHING = 'samurai-network/profile/SET_AVATAR_FETCHING'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, text: 'Вам нравится React?', likes: 4 },\r\n    { id: 2, text: 'hey', likes: 2 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  avatarIsFetching: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  AddPostActionType |\r\n  SetUserProfileActionType |\r\n  SetStatusActionType |\r\n  setProfilePhotoActionType |\r\n  setAvatarIsFetchingActionType |\r\n  SetMyPhotoType\r\n\r\nfunction profileReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      const newPost = {\r\n        id: state.posts[state.posts.length - 1].id + 1,\r\n        text: action.text,\r\n        likes: 0,\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      }\r\n\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      }\r\n\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      }\r\n\r\n    case SET_PROFILE_PHOTO:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      }\r\n\r\n    case SET_AVATAR_FETCHING:\r\n      return {\r\n        ...state,\r\n        avatarIsFetching: action.isFetching\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AddPostActionType = { type: typeof ADD_POST, text: string }\r\nexport const addPost = (formData: { newPost: string }): AddPostActionType => ({\r\n  type: ADD_POST,\r\n  text: formData.newPost\r\n})\r\n\r\ntype SetUserProfileActionType = { type: typeof SET_USER_PROFILE, profile: ProfileType | null }\r\nexport const setUserProfile = (profile: ProfileType | null): SetUserProfileActionType => ({\r\n  type: SET_USER_PROFILE,\r\n  profile: profile\r\n})\r\n\r\ntype SetStatusActionType = { type: typeof SET_STATUS, status: string }\r\nexport const setStatus = (status: string): SetStatusActionType => ({\r\n  type: SET_STATUS,\r\n  status: status\r\n})\r\n\r\ntype setProfilePhotoActionType = { type: typeof SET_PROFILE_PHOTO, photos: PhotosType }\r\nexport const setProfilePhoto = (photos: PhotosType): setProfilePhotoActionType => ({\r\n  type: SET_PROFILE_PHOTO,\r\n  photos: photos\r\n})\r\n\r\ntype setAvatarIsFetchingActionType = { type: typeof SET_AVATAR_FETCHING, isFetching: boolean }\r\nexport const setAvatarIsFetching = (isFetching: boolean): setAvatarIsFetchingActionType => ({\r\n  type: SET_AVATAR_FETCHING,\r\n  isFetching\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getUsersProfile = (userID: number | null): ThunkType => {\r\n  return async (dispatch) => {\r\n    if (userID) {\r\n      dispatch(setUserProfile(null))\r\n      const response = await profileAPI.getProfile(userID)\r\n      dispatch(setUserProfile(response))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response))\r\n  }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.resultCode === 0) {\r\n      dispatch(setStatus(status))\r\n    }\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file: any): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updatePhoto(file)\r\n    if (response.resultCode === 0) {\r\n      dispatch(setProfilePhoto(response.data.photos))\r\n      dispatch(setMyPhoto(response.data.photos))\r\n      dispatch(setAvatarIsFetching(false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    const response = await profileAPI.updateProfile(profile)\r\n    if (response.resultCode === 0) {\r\n      await dispatch(getUsersProfile(getState().auth.userId))\r\n    }\r\n    else {\r\n      // @ts-ignore\r\n      dispatch(stopSubmit('edit-profile', { _error: response.messages[0] }))\r\n      return Promise.reject()\r\n    }\r\n  }\r\n}\r\n\r\nexport default profileReducer\r\n","import React from 'react'\nimport styles from './Post.module.css'\n\nfunction Post (props) {\n  return (\n    <div className={styles.post}>\n      <div>\n        <img className={styles.avatar} src='https://miro.medium.com/max/480/1*5LGjgBL2kWpog3AodB569A.jpeg' alt='' />\n      </div>\n      <div className={styles.message}>\n        <div>\n          {props.text}\n        </div>\n        <div>\n          {props.likes}♥\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport styles from './Textarea.module.css'\n\ntype PropTypes = {\n  width?: number\n  margin?: string\n  placeholder?: string\n  rows?: number\n  cols?: number\n  meta: any\n  input: any\n  id: string\n}\n\nconst Textarea: React.FC<PropTypes> = ({ width, margin, placeholder, rows = 1, cols, meta, input, id }) => {\n  const isError = meta.error && meta.touched\n\n  return (\n    <span>\n      <textarea\n        {...input}\n        rows={rows}\n        cols={cols}\n        style={{ width, margin }}\n        className={styles.textarea}\n        placeholder={placeholder}\n        id={id}\n      />\n      {isError && <span className={(isError || null) && styles.error}>{meta.error}</span>}\n    </span>\n  )\n}\n\nexport default Textarea\n","import React from 'react'\nimport styles from './Posts.module.css'\nimport Post from './Post/Post'\nimport { Field, reduxForm } from 'redux-form'\nimport { required, maxLengthCreator } from '../../../../utils/validators'\nimport Button from '../../../common/Button/Button'\nimport Textarea from '../../../common/Textarea/Textarea'\n\nconst maxLength = maxLengthCreator(10)\n\nfunction Posts (props) {\n  const postsElements = props.state.profilePage.posts.map(\n    post => <Post key={post.id} text={post.text} likes={post.likes}/>\n  ).reverse()\n\n  return (\n    <div className={styles.posts}>\n      <h2 className={styles.title}>Посты</h2>\n      <AddNewPostFormRedux onSubmit={(formData) => { props.addPost(formData) }}/>\n      <div className={styles.postsList}>\n        {postsElements}\n      </div>\n    </div>\n  )\n}\n\nconst AddNewPostFormRedux = reduxForm({ form: 'profileAddNewPost' })(AddNewPostForm)\n\nfunction AddNewPostForm (props) {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          className={styles.textarea}\n          name='newPost'\n          component={Textarea}\n          placeholder='Что у вас нового?'\n          validate={[required, maxLength]}\n          width='100%'\n          rows={2}\n          margin='10px 0 0 0'\n        />\n      </div>\n      <div>\n        <Button margin='10px 0 0 0' className={styles.button}>Отправить</Button>\n      </div>\n    </form>\n  )\n}\n\nexport default Posts\n","import { addPost } from '../../../../redux/profile-reducer'\nimport Posts from './Posts'\nimport { connect } from 'react-redux'\n\nfunction mapStateToProps (state) {\n  return {\n    state: state\n  }\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    addPost (formData) {\n      dispatch(addPost(formData))\n    }\n  }\n}\n\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts)\n\nexport default PostsContainer\n","import React from 'react'\nimport styles from './Avatar.module.css'\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\nimport Preloader from '../../../../common/Preloader/Preloader'\n\nfunction Avatar ({ isOwner, savePhoto, profile, setAvatarIsFetching, avatarIsFetching }) {\n  const uploadLabel = React.createRef()\n\n  function onUploadPhoto (e) {\n    if (e.target.files.length) {\n      const photo = e.target.files[0]\n      uploadLabel.current.textContent = photo.name\n      setAvatarIsFetching(true)\n      savePhoto(photo)\n    }\n  }\n\n  return (\n    <div className={styles.avatar}>\n      <div className={styles.avatarWrapper}>\n        {\n          avatarIsFetching ? <Preloader/> : (\n            <img\n              className={styles.avatarIMG}\n              src={profile.photos.large || defaultAvatar} alt='avatar'\n            />\n          )\n        }\n      </div>\n      {\n        isOwner &&\n        <div className={styles.upload}>\n          <input className={styles.uploadInput} onChange={onUploadPhoto} type='file' id='UserPhotoUpload'/>\n          <label\n            ref={uploadLabel}\n            className={styles.uploadLabel}\n            htmlFor='UserPhotoUpload'\n          >\n            Обновить фотографию\n          </label>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Avatar\n","import React, { useEffect, useState } from 'react'\nimport styles from './Status.module.css'\n\ntype PropTypes = {\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropTypes> = ({ status, updateStatus, isOwner }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [localStatus, setLocalStatus] = useState(status)\n\n  useEffect(() => {\n    setLocalStatus(status)\n  }, [status])\n\n  const activateEditMode = () => {setEditMode(true)}\n  const deactivateEditMode = () => {setEditMode(false)}\n\n  const onUpdateStatus = () => {\n    deactivateEditMode()\n    updateStatus(localStatus)\n  }\n\n  const onStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLocalStatus(event.currentTarget.value)\n  }\n\n  const selectInputText = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.currentTarget.select()\n  }\n\n  const statusClass = ((status) ? styles.statusExist : styles.statusNotExist) + ' ' + styles.status\n\n  return (\n    <div className={styles.statusBox}>\n      {\n        !editMode ? (\n          (isOwner && <button className={statusClass} onClick={activateEditMode}>{status || 'изменить статус'}</button>)\n          || <div className={styles.statusNotMe}>{status}</div>\n        ) : (\n          <input\n            autoFocus\n            onChange={onStatusChange}\n            onBlur={onUpdateStatus}\n            onFocus={selectInputText}\n            type=\"text\"\n            value={localStatus}\n            className={styles.statusInput}\n          />\n        )\n      }\n    </div>\n  )\n}\n\nexport default Status\n","import React from 'react'\r\nimport { required } from '../../../../../../utils/validators'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport Button from '../../../../../common/Button/Button'\r\nimport Input from '../../../../../common/Input/Input'\r\nimport Textarea from '../../../../../common/Textarea/Textarea'\r\nimport styles from './ProfileDataForm.module.css'\r\n\r\nfunction ProfileDataForm ({ handleSubmit, error, profile, setEditMode }) {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      {error && <div className={styles.error}>{error}</div>}\r\n\r\n      <h3>Основная информация</h3>\r\n\r\n      <div className={styles.aboutMe}>\r\n        <div>\r\n          <label htmlFor='dataFormName'>ФИО:</label>\r\n          <Field\r\n            type='text'\r\n            width='300px'\r\n            placeholder='Имя'\r\n            name='fullName'\r\n            component={Input}\r\n            validate={[required]}\r\n            id='dataFormName'\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor='dataFormWork'>Ищите работу:</label>\r\n          <Field type='checkbox' name='lookingForAJob' component={Input} id='dataFormWork'/>\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor='dataFormSkills'>Ваши навыки:</label>\r\n          <Field\r\n            rows={2}\r\n            width='300px'\r\n            name='lookingForAJobDescription'\r\n            component={Textarea}\r\n            validate={[required]}\r\n            id='dataFormSkills'\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor='dataFormAbout'>О Вас:</label>\r\n          <Field rows={2} width='300px' name='aboutMe' component={Textarea} validate={[required]} id='dataFormAbout'/>\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <h3>Ваши контакты</h3>\r\n\r\n      <div className={styles.myContacts}>\r\n        {\r\n          Object.keys(profile.contacts).map(key => (\r\n            <div key={key}>\r\n              <label htmlFor={'dataForm' + key}>{key[0].toUpperCase() + key.slice(1)}:</label>\r\n              <Field\r\n                type='text'\r\n                width='300px'\r\n                name={'contacts.' + key}\r\n                component={Input}\r\n                id={'dataForm' + key}\r\n              />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n      <Button>Сохранить</Button>\r\n      <Button type='button' margin='0 0 0 10px' onClick={() => {setEditMode(false)}}>Отмена</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n","import React from 'react'\nimport styles from './ProfileData.module.css'\n\nfunction ProfileData ({ profile }) {\n  const isContactsExists = Object.values(profile.contacts).some((contact) => (contact !== null))\n\n  return (\n    <dl className={styles.about}>\n      <div>\n        <dt>Ищу работу:</dt>\n        <dd> {profile.lookingForAJob ? 'да' : 'нет'}</dd>\n      </div>\n\n      <div>\n        <dt>Мои навыки:</dt>\n        <dd> {profile.lookingForAJobDescription || 'нету'}</dd>\n      </div>\n\n      <div>\n        <dt>Обо мне:</dt>\n        <dd> {profile.aboutMe || 'не заполнено'}</dd>\n      </div>\n\n      {isContactsExists && <hr/>}\n\n      {\n        isContactsExists && (\n          <div className={styles.contacts}>\n            <dt>Мои контакты:</dt>\n            <dd>\n              <dl className={styles.contactsList}>\n                {\n                  Object.entries(profile.contacts).map((contact) => {\n                    const key = contact[0]\n                    const value = contact[1]\n\n                    return (value) ? (\n                      <div key={key}>\n                        <dt>{key}:</dt>\n                        <dd>\n                          <a rel='noopener noreferrer' target='_blank' href={profile.contacts[key]}>\n                            {profile.contacts[key]}\n                          </a>\n                        </dd>\n                      </div>\n                    ) : null\n                  })\n                }\n              </dl>\n            </dd>\n          </div>\n        )\n      }\n    </dl>\n  )\n}\n\nexport default ProfileData\n","import React, { useState } from 'react'\nimport styles from './UserInfo.module.css'\nimport Status from './Status/Status'\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm'\nimport ProfileData from './ProfileData/ProfileData'\nimport Button from '../../../../common/Button/Button'\n\nfunction UserInfo ({ profile, status, isOwner, saveProfile, updateStatus }) {\n  const [editMode, setEditMode] = useState(false)\n\n  function onSubmit (formData) {\n    saveProfile(formData).then(() => {\n      setEditMode(false)\n    }).catch(() => {})\n  }\n\n  return (\n    <div className={styles.info}>\n      <div>\n        <h1 className={styles.userName}>{profile.fullName}</h1>\n        <Status status={status} updateStatus={updateStatus} isOwner={isOwner}/>\n\n        {(status || isOwner) && <hr/>}\n\n        {\n          editMode ?\n            <ProfileDataForm setEditMode={setEditMode} profile={profile} initialValues={profile} onSubmit={onSubmit}/> :\n            <ProfileData isOwner={isOwner} profile={profile}/>\n        }\n      </div>\n\n      {isOwner && !editMode && <div><Button onClick={() => { setEditMode(true) }}>Редактировать</Button></div>}\n    </div>\n  )\n}\n\nexport default UserInfo\n","import React from 'react'\nimport Preloader from '../../../common/Preloader/Preloader'\nimport Avatar from './Avatar/Avatar'\nimport UserInfo from './UserInfo/UserInfo'\n\nfunction User ({\n  profile, savePhoto, status, updateStatus, isOwner, saveProfile, avatarIsFetching, setAvatarIsFetching\n}) {\n\n  if (!profile) {\n    return <Preloader/>\n  }\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <Avatar\n        savePhoto={savePhoto}\n        profile={profile}\n        isOwner={isOwner}\n        avatarIsFetching={avatarIsFetching}\n        setAvatarIsFetching={setAvatarIsFetching}\n      />\n\n      <UserInfo\n        status={status}\n        updateStatus={updateStatus}\n        saveProfile={saveProfile}\n        profile={profile}\n        isOwner={isOwner}\n      />\n    </div>\n  )\n}\n\nexport default User\n","import React, { useEffect } from 'react'\r\nimport {\r\n  getStatus,\r\n  getUsersProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus,\r\n  setAvatarIsFetching\r\n} from '../../../redux/profile-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\nimport { saveMyProfile } from '../../../redux/auth-reducer'\r\nimport { ProfileType } from '../../../types/types'\r\nimport PostsContainer from './Posts/PostsContainer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport User from './User/User'\r\n\r\ntype MapStatePropTypes = {\r\n  userID: number | null\r\n  profile: ProfileType | null\r\n  status: string\r\n  avatarIsFetching: boolean\r\n  myProfile: ProfileType | null\r\n  isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  getUsersProfile: (userID: number) => void\r\n  getStatus: (userID: number) => void\r\n  savePhoto: (photo: Blob) => void\r\n  updateStatus: (newStatus: string) => void\r\n  setAvatarIsFetching: (isFetching: boolean) => void\r\n  saveProfile: (profile: ProfileType) => void\r\n  saveMyProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nconst Profile: React.FC<PropTypes> = ({\r\n  savePhoto,\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  saveProfile,\r\n  userID,\r\n  getUsersProfile,\r\n  getStatus,\r\n  avatarIsFetching,\r\n  setAvatarIsFetching,\r\n  myProfile,\r\n  saveMyProfile,\r\n  isAuth,\r\n}) => {\r\n\r\n  const { userID: id } = useParams()\r\n\r\n  const userURL = (id) ? +id : userID\r\n  const isOwner = userID === userURL\r\n\r\n  useEffect(() => {\r\n    const updateProfile = () => {\r\n      if (userURL) {\r\n        getUsersProfile(userURL)\r\n        getStatus(userURL)\r\n      }\r\n    }\r\n\r\n    updateProfile()\r\n  }, [userURL, getUsersProfile, getStatus])\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to='/login'/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <User\r\n        savePhoto={savePhoto}\r\n        profile={isOwner ? myProfile : profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        isOwner={isOwner}\r\n        saveProfile={isOwner ? saveMyProfile : saveProfile}\r\n        avatarIsFetching={avatarIsFetching}\r\n        setAvatarIsFetching={setAvatarIsFetching}\r\n      />\r\n      <PostsContainer/>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userID: state.auth.userId,\r\n    avatarIsFetching: state.profilePage.avatarIsFetching,\r\n    myProfile: state.auth.myProfile,\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\r\n  getUsersProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n  setAvatarIsFetching,\r\n  saveMyProfile,\r\n})(Profile)\r\n","import React, { useEffect, useState } from 'react'\nimport styles from './MessageListItem.module.css'\nimport { PhotosType } from '../../../../../../types/types'\nimport { NavLink } from 'react-router-dom'\nimport defaultAvatar from '../../../../../../assets/images/defaultAvatar.png'\n\ntype PropTypes = {\n  id: number\n  userName: string\n  hasNewMessages: boolean\n  lastDialogActivityDate: string\n  lastUserActivityDate: string\n  newMessagesCount: number\n  photos: PhotosType\n}\n\nconst MessageListItem: React.FC<PropTypes> = ({\n  id, userName, hasNewMessages, lastDialogActivityDate, lastUserActivityDate, newMessagesCount, photos\n}) => {\n  const [isToday, setIsToday] = useState(false)\n\n  useEffect(() => {\n    const now = new Date()\n    const tomorrow = now.setDate(now.getDate() + 1)\n    const yesterday = now.setDate(now.getDate() - 1)\n    const lastMessageDate = new Date(lastDialogActivityDate).getTime()\n\n    setIsToday(yesterday < lastMessageDate && lastMessageDate < tomorrow)\n  }, [lastDialogActivityDate])\n\n  return (\n    <li className={styles.li}>\n      <NavLink className={styles.a} to={`/messages/${id}`} activeClassName={styles.active}>\n        <img className={styles.avatar} src={photos.small || defaultAvatar} alt=\"avatar\"/>\n        <div className={styles.info}>\n          <div className={styles.infoMessage}>\n            <span>{userName}</span>\n            {hasNewMessages && <span>{newMessagesCount}<span role='img' aria-label='сообщение'>💬</span></span>}\n          </div>\n          <div className={styles.lastMessage}>\n            {\n              isToday ? new Date(lastDialogActivityDate).toLocaleTimeString().slice(0, 5) :\n                new Date(lastDialogActivityDate).toLocaleDateString()\n            }\n          </div>\n        </div>\n      </NavLink>\n    </li>\n  )\n}\n\nexport default MessageListItem\n","import React from 'react'\nimport styles from './MessageList.module.css'\nimport { InterlocutorType } from '../../../../../types/types'\nimport MessageListItem from './MessageListItem/MessageListItem'\n\ntype PropTypes = {\n  interlocutors: Array<InterlocutorType>\n}\n\nconst MessageList: React.FC<PropTypes> = ({ interlocutors }) => {\n  return (\n    <ul className={styles.ul}>\n      {\n        interlocutors.map((message) => (\n          <MessageListItem\n            key={message.id}\n            id={message.id}\n            userName={message.userName}\n            hasNewMessages={message.hasNewMessages}\n            lastDialogActivityDate={message.lastDialogActivityDate}\n            lastUserActivityDate={message.lastUserActivityDate}\n            newMessagesCount={message.newMessagesCount}\n            photos={message.photos}\n          />\n        ))\n      }\n    </ul>\n  )\n}\n\nexport default MessageList\n","import React from 'react'\nimport styles from './AllMessages.module.css'\nimport { InterlocutorType } from '../../../../types/types'\nimport MessageList from './MessageList/MessageList'\nimport Preloader from '../../../common/Preloader/Preloader'\n\ntype PropTypes = {\n  interlocutors: Array<InterlocutorType> | null\n}\n\nconst AllMessages: React.FC<PropTypes> = ({ interlocutors }) => {\n  return (\n    <div className={styles.wrapper}>\n      {\n        interlocutors ? <MessageList interlocutors={interlocutors}/> : <Preloader/>\n      }\n    </div>\n  )\n}\n\nexport default AllMessages\n","import React from 'react'\nimport styles from './Dialog.module.css'\nimport { DialogType, InterlocutorType } from '../../../../types/types'\n\ntype PropTypes = {\n  currentDialog: Array<DialogType> | null\n  interlocutor: InterlocutorType | undefined\n}\n\nconst Dialog: React.FC<PropTypes> = () => {\n  return (\n    <div className={styles.wrapper}>\n      dialog\n    </div>\n  )\n}\n\nexport default Dialog\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../../redux/store'\nimport { InterlocutorType, DialogType, MessagesAfterDateType } from '../../../types/types'\nimport {\n  getInterlocutorsList,\n  getDialog,\n  getMessagesAfterDate,\n  startChatting,\n  sendMessage\n} from '../../../redux/messages-reducer'\nimport { Redirect, useParams } from 'react-router-dom'\nimport AllMessages from './AllMessages/AllMessages'\nimport Dialog from './Dialog/Dialog'\n\ntype MapStatePropTypes = {\n  interlocutors: Array<InterlocutorType> | null\n  currentDialog: Array<DialogType> | null\n  messagesAfterDate: Array<MessagesAfterDateType> | null\n\n  fetching: {\n    interlocutors: boolean\n    currentDialog: boolean\n    messagesAfterDate: boolean\n  }\n\n  isAuth: boolean\n}\n\ntype MapDispatchPropTypes = {\n  startChatting: (userID: number) => void\n  getInterlocutorsList: () => void\n  getDialog: (userID: number) => void\n  sendMessage: (userID: number, message: string) => void\n  getMessagesAfterDate: (userID: number, date: string) => void\n}\n\nconst Messages: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({\n  interlocutors,\n  currentDialog,\n  messagesAfterDate,\n  fetching,\n  startChatting,\n  getInterlocutorsList,\n  getDialog,\n  sendMessage,\n  getMessagesAfterDate,\n  isAuth,\n}) => {\n  const { userID } = useParams()\n\n  useEffect(() => {\n    getInterlocutorsList()\n  }, [getInterlocutorsList])\n\n  useEffect(() => {\n    if (userID) {\n      getDialog(+userID)\n    }\n  }, [getDialog, userID])\n\n  if (!isAuth) {\n    return <Redirect to='/login'/>\n  }\n\n  let interlocutor\n  if (userID) {\n    interlocutor = interlocutors?.find((item) => item.id === +userID)\n  }\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-between', height: 'calc(100vh - 60px - 60px - 40px)' }}>\n      <AllMessages interlocutors={interlocutors}/>\n      <Dialog interlocutor={interlocutor} currentDialog={currentDialog}/>\n    </div>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    interlocutors: state.messagesPage.interlocutors,\n    currentDialog: state.messagesPage.currentDialog,\n    messagesAfterDate: state.messagesPage.messagesAfterDate,\n    fetching: state.messagesPage.fetching,\n    isAuth: state.auth.isAuth,\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\n  startChatting,\n  getInterlocutorsList,\n  getDialog,\n  getMessagesAfterDate,\n  sendMessage\n})(Messages)\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport styles from './Main.module.css'\r\nimport Users from './Users/Users'\r\nimport News from './News/News'\r\nimport Music from './Music/Music'\r\nimport Settings from './Settings/Settings'\r\nimport Login from './Login/Login'\r\nimport Profile from './Profile/Profile'\r\nimport Messages from './Messages/Messages'\r\n\r\nfunction Main () {\r\n  return (\r\n    <div className={styles.content}>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\r\n        <Route path='/profile/:userID?' render={() => <Profile/>}/>\r\n        <Route path='/messages/:userID?' render={() => <Messages/>}/>\r\n        <Route path='/users' render={() => <Users/>}/>\r\n        <Route path='/news' component={News}/>\r\n        <Route path='/music' component={Music}/>\r\n        <Route path='/settings' component={Settings}/>\r\n        <Route path='/login' render={() => <Login/>}/>\r\n        <Route path='*' render={() => '404'}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport { logout } from '../../redux/auth-reducer'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/store'\nimport styles from './Header.module.css'\nimport Button from '../common/Button/Button'\nimport { NavLink } from 'react-router-dom'\nimport { ProfileType } from '../../types/types'\n\ntype MapStatePropTypes = {\n  isAuth: boolean\n  myProfile: ProfileType | null\n}\n\ntype MapDispatchPropTypes = {\n  logout: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst Header: React.FC<PropTypes> = ({ isAuth, logout, myProfile }) => {\n  return (\n    <header className={styles.header}>\n      <div className={styles.container}>\n        <div>Samurai-Network</div>\n        {\n          isAuth && myProfile && myProfile.photos.small ? (\n              <div className={styles.infoMe}>\n                <NavLink to='/profile' className={styles.userName}>\n                  <span>\n                    {myProfile.fullName.split(' ')[0]}\n                  </span>\n                </NavLink>\n                <NavLink to='/profile' className={styles.avatar}>\n                  <img src={myProfile.photos.small} alt='avatar'/>\n                </NavLink>\n                <Button onClick={logout}>Выйти</Button>\n              </div>\n            )\n            : (\n              <NavLink to='/login' className={styles.login}>\n                <Button>Авторизоваться</Button>\n              </NavLink>\n            )\n        }\n      </div>\n    </header>\n  )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropTypes => ({\n  isAuth: state.auth.isAuth,\n  myProfile: state.auth.myProfile\n})\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>(mapStateToProps, {\n  logout,\n})(Header)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport styles from './App.module.css'\nimport Footer from './Footer/Footer'\nimport Sidebar from './Sidebar/Sidebar'\nimport Main from './Main/Main'\nimport Header from './Header/Header'\nimport { initializeApp } from '../redux/init-reducer'\nimport { AppStateType } from '../redux/store'\nimport { HashRouter } from 'react-router-dom'\nimport Preloader from './common/Preloader/Preloader'\n\ntype MapStatePropTypes = {\n  initialized: boolean\n}\n\ntype MapDispatchPropTypes = {\n  initializeApp: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst App: React.FC<PropTypes> = ({ initializeApp, initialized }) => {\n  useEffect(() => {\n    initializeApp()\n  }, [initializeApp])\n\n  if (!initialized) {\n    return <Preloader fullscreen/>\n  }\n\n  return (\n    <HashRouter>\n      <div className={styles.page}>\n        <Header/>\n        <main className={styles.main}>\n          <Sidebar/>\n          <Main/>\n        </main>\n        <Footer/>\n      </div>\n    </HashRouter>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    initialized: state.init.initialized\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>(\n  mapStateToProps, { initializeApp }\n)(App)\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport messagesReducer from './messages-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport initReducer from './init-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  init: initReducer,\r\n  form: formReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nexport default store\r\n","import * as serviceWorker from './serviceWorker'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MessageListItem_wrapper__lnUl2\",\"li\":\"MessageListItem_li__1K_mk\",\"a\":\"MessageListItem_a__1UcR5\",\"active\":\"MessageListItem_active__1gogu\",\"avatar\":\"MessageListItem_avatar__rCm1g\",\"info\":\"MessageListItem_info__bdOBk\",\"infoMessage\":\"MessageListItem_infoMessage__1hatk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__212y-\",\"avatarIMG\":\"Avatar_avatarIMG__1-LTa\",\"upload\":\"Avatar_upload__3w34x\",\"uploadInput\":\"Avatar_uploadInput__3u7cW\",\"uploadLabel\":\"Avatar_uploadLabel__2Exb6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusBox\":\"Status_statusBox__3qS3R\",\"status\":\"Status_status__1ZDrO\",\"statusNotExist\":\"Status_statusNotExist__2Ayt_\",\"statusExist\":\"Status_statusExist__2EA9K\",\"statusInput\":\"Status_statusInput__2o4UG\",\"statusNotMe\":\"Status_statusNotMe__22woT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2CR8J\",\"container\":\"Header_container__HDvgl\",\"userName\":\"Header_userName__3dpGW\",\"avatar\":\"Header_avatar__34Ghc\",\"infoMe\":\"Header_infoMe__UMQTd\"};","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.b4b85090.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__epRJ6\",\"title\":\"Posts_title__3oTfI\",\"textarea\":\"Posts_textarea__1CXXA\",\"button\":\"Posts_button__3XZT1\",\"postsList\":\"Posts_postsList__3exEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderIMG\":\"Preloader_preloaderIMG__BZHNf\",\"wrapper\":\"Preloader_wrapper__1pJ8g\",\"preloader\":\"Preloader_preloader__oGcz1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileDataForm_form__2KiwA\",\"myContacts\":\"ProfileDataForm_myContacts__3GBy1\",\"aboutMe\":\"ProfileDataForm_aboutMe__2_Y6I\",\"error\":\"ProfileDataForm_error__1DhlD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Search_div__2HjV8\",\"input\":\"Search_input__1SF7g\",\"button\":\"Search_button__tmFR-\",\"reset\":\"Search_reset__2G7ng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItems\":\"Paginator_paginationItems__2iECZ\",\"button\":\"Paginator_button__1_Jp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__lASZN\",\"avatar\":\"Post_avatar__3eC36\",\"message\":\"Post_message__3tS2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ProfileData_contactsList__ZEb2E\",\"about\":\"ProfileData_about__2NVys\",\"contacts\":\"ProfileData_contacts__KLq0S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__4Klr-\",\"main\":\"App_main__1nCkj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItem\":\"PaginationItem_paginationItem__1EdWb\",\"paginationItemActive\":\"PaginationItem_paginationItemActive__1EfE6\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.584b607f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3Rg3-\",\"error\":\"Input_error__36SvP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__32chH\",\"error\":\"Textarea_error__1Ernb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__zWzay\",\"userName\":\"UserInfo_userName__2HoIC\"};"],"sourceRoot":""}