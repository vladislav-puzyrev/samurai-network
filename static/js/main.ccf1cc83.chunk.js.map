{"version":3,"sources":["components/Sidebar/Menu/Menu.module.css","assets/images/defaultAvatar.png","api/api.ts","redux/messages-reducer.ts","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Main/Content.module.css","components/Main/Users/UsersList/UsersList.module.css","components/common/FormsControls/FormsControls.module.css","components/common/Button/Button.module.css","serviceWorker.ts","components/Footer/Footer.tsx","components/Sidebar/Menu/Menu.tsx","components/Sidebar/Sidebar.tsx","redux/users-reducer.ts","redux/users-selectors.ts","components/Main/Users/Search/Search.tsx","components/Main/Users/Paginator/PaginationItem/PaginationItem.tsx","components/Main/Users/Paginator/Paginator.tsx","components/Main/Users/UsersList/User/User.tsx","components/Main/Users/UsersList/UsersList.tsx","components/Main/Users/Users.tsx","components/Main/News/News.tsx","components/Main/Music/Music.tsx","components/Main/Settings/Settings.tsx","redux/auth-reducer.ts","components/Main/Login/Login.tsx","hoc/withSuspense.tsx","components/Main/Content.tsx","components/common/Button/Button.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/init-reducer.ts","components/App.tsx","redux/store.ts","index.tsx","components/common/Preloader/Preloader.tsx","components/Main/Users/Search/Search.module.css","components/common/Preloader/Preloader.module.css","utils/validators.ts","components/Main/Users/Paginator/Paginator.module.css","components/Header/Header.module.css","components/App.module.css","components/Main/Users/Paginator/PaginationItem/PaginationItem.module.css","components/Main/Users/UsersList/User/User.module.css","assets/images/preloader.gif","components/common/FormsControls/createField.tsx","redux/profile-reducer.ts"],"names":["module","exports","server","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","count","page","term","get","res","data","isFollowing","userID","follow","post","unfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","updatePhoto","photoFile","formData","FormData","append","updateProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptcha","SEND_MESSAGE","initialState","dialogs","id","username","messages","message","sendMessageActionCreator","type","messagesReducer","state","action","newMessage","length","Boolean","window","location","hostname","match","Footer","className","styles","footer","Menu","menu","menuItem","exact","to","menuLink","activeClassName","active","Sidebar","aside","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","SET_TERM","users","totalUsersCount","currentPage","isFetching","followingInProgress","acceptFollow","acceptUnfollow","setUsers","setTotalUsers","totalUsers","setIsFetching","toggleFollowingProgress","userId","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","async","resultCode","usersReducer","map","user","followed","filter","usersPage","getUsersSelector","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","Search","setTerm","setCurrentPage","useState","inputText","setInputText","searchButtonStyle","cursor","div","placeholder","onChange","event","target","value","input","disabled","style","onClick","button","reset","PaginationItem","number","activeStyle","paginationItemActive","paginationItem","data-number","Paginator","pageSize","portionSize","getRequestUsers","useEffect","pageCount","Math","ceil","pages","i","push","portionCount","lastElemPageNumber","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pageNumber","dataset","onPageChanged","paginationItems","num","key","User","avatarBox","src","photos","small","defaultAvatar","alt","width","some","name","UsersList","usersOrMessage","Preloader","compose","connect","getState","response","items","totalCount","bind","News","Music","Settings","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","meData","getCaptchaUrl","url","authReducer","Input","createField","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","component","validate","required","checked","htmlFor","color","auth","stopSubmit","_error","props","withSuspense","Component","Suspense","fallback","MessagesContainer","React","lazy","ProfileContainer","Content","content","path","render","Button","children","Header","header","container","INITIALIZED_SUCCESS","initialized","initReducer","init","initializeApp","Promise","all","then","main","fullscreen","rootReducer","combineReducers","profilePage","profileReducer","messagesPage","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","wrapper","preloader","preloaderIMG","maxLengthCreator","FormElement","meta","isError","touched","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","text","likes","addPostActionCreator","newPost","setStatus","getUsersProfile","savePhoto","file","saveProfile","reject","postId"],"mappings":"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","file":"static/js/main.ccf1cc83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__27qdF\",\"menuLink\":\"Menu_menuLink__EHAtu\",\"active\":\"Menu_active__2D1vX\"};","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.b4b85090.png\";","import axios from 'axios'\r\nimport {\r\n  GetUsersResponse,\r\n  OperationResult,\r\n  SavePhotoResponse,\r\n  MeResponse,\r\n  LoginResponse,\r\n  GetCaptchaResponse,\r\n  GetAllDialogsResponse,\r\n  GetDialogResponse, SendMessageResponse, messagesNewerThanDateResponse\r\n} from '../types/APITypes'\r\nimport { ProfileType } from '../types/AppTypes'\r\n\r\nconst server = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    // ca3b0eb4-4af6-4803-8caa-f7d26464a12c main\r\n    // a7da6dad-5c4f-417c-a0d9-8d30ee0d96ec secondary\r\n    'API-KEY': 'ca3b0eb4-4af6-4803-8caa-f7d26464a12c',\r\n  }\r\n})\r\n\r\nexport const usersAPI = {\r\n  async getUsers (count: number, page: number, term = '') {\r\n    const res = await server.get<GetUsersResponse>(`users?count=${count}&page=${page}&term=${term}`)\r\n    return res.data\r\n  },\r\n  async isFollowing (userID: number) {\r\n    const res = await server.get<boolean>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async follow (userID: number) {\r\n    const res = await server.post<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async unfollow (userID: number) {\r\n    const res = await server.delete<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile (userID: number) {\r\n    const res = await server.get<ProfileType>(`profile/${userID}`)\r\n    return res.data\r\n  },\r\n  async getStatus (userID: number) {\r\n    const res = await server.get<string>(`profile/status/${userID}`)\r\n    return res.data\r\n  },\r\n  async updateStatus (status: string) {\r\n    const res = await server.put<OperationResult>(`profile/status`, { status: status })\r\n    return res.data\r\n  },\r\n  async updatePhoto (photoFile: File) {\r\n    const formData = new FormData()\r\n    formData.append(`image`, photoFile)\r\n\r\n    const res = await server.put<SavePhotoResponse>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type':\r\n          'multipart/form-data'\r\n      }\r\n    })\r\n\r\n    return res.data\r\n  },\r\n  async updateProfile (profile: ProfileType) {\r\n    const res = await server.put<OperationResult>(`profile`, profile)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  async me () {\r\n    const res = await server.get<MeResponse>(`auth/me`)\r\n    return res.data\r\n  },\r\n  async login (email: string, password: string, rememberMe = true, captcha: string) {\r\n    const res = await server.post<LoginResponse>(`auth/login`, { email, password, rememberMe, captcha })\r\n    return res.data\r\n  },\r\n  async logout () {\r\n    const res = await server.post<OperationResult>(`auth/logout`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptcha () {\r\n    const res = await server.get<GetCaptchaResponse>(`security/get-captcha-url`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const dialogsAPI = {\r\n  // Сортировка человека вверх при начале чатинга\r\n  async startChatting (userID: number) {\r\n    const res = await server.put<OperationResult>(`dialogs/${userID}`)\r\n    return res.data\r\n  },\r\n  // Получить все диалоги (без сообщений просто для вывода)\r\n  async getAllDialogs () {\r\n    const res = await server.get<Array<GetAllDialogsResponse>>(`dialogs`)\r\n    return res.data\r\n  },\r\n  async getDialog (userID: number) {\r\n    const res = await server.get<GetDialogResponse>(`dialogs/${userID}/messages`)\r\n    return res.data\r\n  },\r\n  async sendMessage (userID: number, message: string) {\r\n    const res = await server.post<SendMessageResponse>(`dialogs/${userID}/messages`, { body: message })\r\n    return res.data\r\n  },\r\n  async isMessageViewed (messageID: string) {\r\n    const res = await server.get<boolean>(`dialogs/messages/${messageID}/viewed`)\r\n    return res.data\r\n  },\r\n  async putMessageInSpam (messageID: string) {\r\n    const res = await server.post<OperationResult>(`dialogs/messages/${messageID}/spam`)\r\n    return res.data\r\n  },\r\n  async deleteMessage (messageID: string) {\r\n    const res = await server.delete<OperationResult>(`dialogs/messages/${messageID}`)\r\n    return res.data\r\n  },\r\n  async restoreMessage (messageID: string) {\r\n    const res = await server.put<OperationResult>(`dialogs/messages/${messageID}/restore`)\r\n    return res.data\r\n  },\r\n  async messagesNewerThanDate (userID: number, date: string) {\r\n    const res = await server.get<Array<messagesNewerThanDateResponse>>(\r\n      `dialogs/${userID}/messages/new?newerThen=${date}`\r\n    )\r\n    return res.data\r\n  },\r\n  async getNewMessages () {\r\n    const res = await server.get<number>(`dialogs/messages/new/count`)\r\n    return res.data\r\n  },\r\n}\r\n\r\n// dialogsAPI.startChatting(5).then(r => {console.log(r)})\r\n// dialogsAPI.getAllDialogs().then(r => {console.log(r)})\r\n// dialogsAPI.getDialog(5).then(r => {console.log(r)})\r\n// dialogsAPI.sendMessage(5856, 'test').then(r => {console.log(r)})\r\n// dialogsAPI.isMessageViewed('3e755133-76bf-4d8e-9ba4-80a1683973cd').then(r => {console.log(r)})\r\n// dialogsAPI.putMessageInSpam('3e755133-76bf-4d8e-9ba4-80a1683973cd').then(r => {console.log(r)})\r\n// dialogsAPI.deleteMessage('3e755133-76bf-4d8e-9ba4-80a1683973cd').then(r => {console.log(r)})\r\n// dialogsAPI.restoreMessage('3e755133-76bf-4d8e-9ba4-80a1683973cd').then(r => {console.log(r)})\r\n// dialogsAPI.messagesNewerThanDate(5, '2020-03-11T17:11:10.403').then(r => {console.log(r)})\r\n// dialogsAPI.getNewMessages().then(r => {console.log(r)})\r\n","const SEND_MESSAGE = 'samurai-network/messages/SEND_MESSAGE'\r\n\r\ntype DialogType = {\r\n  id: number\r\n  username: string\r\n}\r\n\r\ntype MessageType = {\r\n  id: number\r\n  username: string\r\n  message: string\r\n}\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    { id: 1, username: 'Димыч' },\r\n    { id: 2, username: 'Саша' },\r\n    { id: 3, username: 'Валера' },\r\n    { id: 4, username: 'Иван' },\r\n    { id: 5, username: 'Света' },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, username: 'Димыч', message: 'Я люблю react!' },\r\n    { id: 2, username: 'Димыч', message: 'Я люблю react!' },\r\n  ] as Array<MessageType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nfunction messagesReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const nextId = state.messages[state.messages.length - 1].id + 1\r\n      const newMessage = {\r\n        id: nextId,\r\n        username: 'username',\r\n        message: action.formData.message,\r\n      }\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, newMessage],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ntype sendMessageActionCreatorActionType = {\r\n  type: typeof SEND_MESSAGE\r\n  formData: string\r\n}\r\n\r\nexport const sendMessageActionCreator = (formData: string): sendMessageActionCreatorActionType => ({\r\n  type: SEND_MESSAGE,\r\n  formData: formData,\r\n})\r\n\r\nexport default messagesReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3hmYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Sidebar_aside__1e2NK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__1TFis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UsersList_users__WQVOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__JuxJL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__OZeNM\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Main is cached for offline use.\" message.\n              console.log('Main is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport styles from './Footer.module.css'\n\nfunction Footer () {\n  return (\n    <footer className={styles.footer}>\n      samurai-network\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styles from './Menu.module.css'\n\nfunction Menu () {\n  return (\n    <ul className={styles.menu}>\n      <li className={styles.menuItem}>\n        <NavLink\n          exact to='/profile' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Профиль\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/messages' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Сообщения\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/users' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Пользователи\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/news' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Новости\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/music' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Музыка\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/settings' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Настройки\n        </NavLink>\n      </li>\n    </ul>\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styles from './Sidebar.module.css'\nimport Menu from './Menu/Menu'\n\nfunction Sidebar () {\n  return (\n    <aside className={styles.aside}>\n      <Menu/>\n    </aside>\n  )\n}\n\nexport default Sidebar\n","import { usersAPI } from '../api/api'\r\nimport { UserType } from '../types/AppTypes'\r\nimport { AppStateType } from './store'\r\nimport { Dispatch } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\n/* Action types */\r\nconst FOLLOW = 'samurai-network/users/FOLLOW'\r\nconst UNFOLLOW = 'samurai-network/users/UNFOLLOW'\r\nconst SET_USERS = 'samurai-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'samurai-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'samurai-network/users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'samurai-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\nconst SET_TERM = 'samurai-network/users/SET_TERM'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>, // array of users ids\r\n  term: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionTypes =\r\n  AcceptFollowActionType |\r\n  AcceptUnfollowActionType |\r\n  SetUsersActionType |\r\n  SetCurrentPageActionType |\r\n  SetTotalUsersActionType |\r\n  SetIsFetchingActionType |\r\n  ToggleFollowingProgressActionType |\r\n  setTermActionType\r\n\r\nfunction usersReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: true }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: false }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      }\r\n\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsers,\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching ?\r\n          [...state.followingInProgress, action.userId] :\r\n          state.followingInProgress.filter(id => id !== action.userId),\r\n      }\r\n\r\n    case SET_TERM:\r\n      return {\r\n        ...state,\r\n        term: action.term,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AcceptFollowActionType = {\r\n  type: typeof FOLLOW,\r\n  id: number\r\n};\r\nexport const acceptFollow = (id: number): AcceptFollowActionType => ({ type: FOLLOW, id })\r\n\r\ntype AcceptUnfollowActionType = {\r\n  type: typeof UNFOLLOW,\r\n  id: number\r\n};\r\nexport const acceptUnfollow = (id: number): AcceptUnfollowActionType => ({ type: UNFOLLOW, id })\r\n\r\ntype SetUsersActionType = {\r\n  type: typeof SET_USERS,\r\n  users: Array<UserType>\r\n};\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({ type: SET_USERS, users })\r\n\r\ntype SetCurrentPageActionType = {\r\n  type: typeof SET_CURRENT_PAGE,\r\n  currentPage: number\r\n};\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n})\r\n\r\ntype SetTotalUsersActionType = {\r\n  type: typeof SET_TOTAL_USERS_COUNT,\r\n  totalUsers: number\r\n};\r\nexport const setTotalUsers = (totalUsers: number): SetTotalUsersActionType => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  totalUsers,\r\n})\r\n\r\ntype SetIsFetchingActionType = {\r\n  type: typeof TOGGLE_IS_FETCHING,\r\n  isFetching: boolean\r\n};\r\nexport const setIsFetching = (isFetching: boolean): SetIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = {\r\n  type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching: boolean\r\n  userId: number\r\n};\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n})\r\n\r\ntype setTermActionType = {\r\n  type: typeof SET_TERM\r\n  term: string\r\n}\r\nexport const setTerm = (term: string): setTermActionType => ({\r\n  type: SET_TERM,\r\n  term,\r\n})\r\n\r\n/* Thunk creators */\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getRequestUsers = (pageSize: number, currentPage: number, term = ''): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(setIsFetching(true))\r\n    const response = await usersAPI.getUsers(pageSize, currentPage, term)\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsers(response.totalCount))\r\n    dispatch(setIsFetching(false))\r\n  }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async (dispatch: DispatchType, getState: GetStateType) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI)\r\n    _followUnfollowFlow(dispatch, userId, apiMethod, acceptFollow)\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async (dispatch: DispatchType, getState: GetStateType) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n    _followUnfollowFlow(dispatch, userId, apiMethod, acceptUnfollow)\r\n  }\r\n}\r\n\r\nconst _followUnfollowFlow = async (\r\n  dispatch: DispatchType,\r\n  userId: number,\r\n  apiMethod: any,\r\n  actionCreator: (userID: number) => AcceptFollowActionType | AcceptUnfollowActionType\r\n) => {\r\n  dispatch(toggleFollowingProgress(true, userId))\r\n  const response = await apiMethod(userId)\r\n  if (response.resultCode === 0) dispatch(actionCreator(userId))\r\n  dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport default usersReducer\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './store'\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector__BadRender = (state: AppStateType) => {\r\n  return getUsers(state).filter(() => true)\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(() => true)\r\n  },\r\n)\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\n","import React, { useState, ChangeEvent } from 'react'\r\nimport styles from './Search.module.css'\r\n\r\ntype PropTypes = {\r\n  setTerm: (term: string) => void\r\n  setCurrentPage: (page: number) => void\r\n}\r\n\r\nconst Search: React.FC<PropTypes> = ({ setTerm, setCurrentPage }) => {\r\n  const [inputText, setInputText] = useState('')\r\n\r\n  const onTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setInputText(event.target.value)\r\n  }\r\n\r\n  const onButtonClick = () => {\r\n    setCurrentPage(1)\r\n    setTerm(inputText)\r\n  }\r\n\r\n  const onReset = () => {\r\n    if (inputText) {\r\n      setCurrentPage(1)\r\n      setTerm('')\r\n      setInputText('')\r\n    }\r\n  }\r\n\r\n  const searchButtonStyle = {\r\n    cursor: (inputText) ? 'pointer' : 'not-allowed'\r\n  }\r\n\r\n  return (\r\n    <div className={styles.div}>\r\n      <input placeholder=\"Поиск\" type=\"text\" onChange={onTextChange} className={styles.input} value={inputText}/>\r\n      <button\r\n        disabled={!inputText}\r\n        style={searchButtonStyle}\r\n        onClick={onButtonClick}\r\n        className={styles.button}>\r\n        Найти\r\n      </button>\r\n      <button onClick={onReset} className={styles.reset}>Сброс</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport styles from './PaginationItem.module.css'\r\n\r\ntype PropTypes = {\r\n  active: boolean\r\n  number: number\r\n}\r\n\r\nconst PaginationItem: React.FC<PropTypes> = ({ active, number }) => {\r\n  const activeStyle = active ? styles.paginationItemActive : ''\r\n\r\n  return (\r\n    <li className={styles.paginationItem + ' ' + activeStyle} data-number={number}>{number}</li>\r\n  )\r\n}\r\n\r\nexport default PaginationItem\r\n","import React, { useEffect, useState } from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport PaginationItem from './PaginationItem/PaginationItem'\r\n\r\ntype PropTypes = {\r\n  currentPage: number\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  portionSize: number\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  term: string\r\n  setCurrentPage: (page: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropTypes> = ({\r\n  setCurrentPage, currentPage, totalUsersCount, pageSize, portionSize, getRequestUsers, term\r\n}) => {\r\n  useEffect(() => {\r\n    getRequestUsers(pageSize, currentPage, term)\r\n  }, [getRequestUsers, pageSize, currentPage, term])\r\n\r\n  const onPageChanged = (currentPage: number) => {\r\n    getRequestUsers(pageSize, currentPage, term)\r\n    setCurrentPage(currentPage)\r\n  }\r\n\r\n  const pageCount = Math.ceil(totalUsersCount / pageSize)\r\n  const pages = []\r\n\r\n  for (let i = 1; i < totalUsersCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  const portionCount = Math.ceil(pageCount / portionSize)\r\n  const lastElemPageNumber = pageCount / portionSize * portionSize\r\n  const [portionNumber, setPortionNumber] = useState(1)\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n  const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n  const changePage = (event: any) => {\r\n    const pageNumber = +event.target.dataset.number\r\n\r\n    if (pageNumber) {\r\n      onPageChanged(pageNumber)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div onClick={changePage} className={styles.paginationItems}>\r\n      {\r\n        totalUsersCount > 0 &&\r\n        <button disabled={portionNumber === 1} className={styles.button}\r\n                onClick={() => {setPortionNumber(portionNumber - 1)}}>Влево</button>\r\n      }\r\n      {\r\n        pages.filter(\r\n          (num) => (num >= leftPortionPageNumber && num <= rightPortionPageNumber && num <= lastElemPageNumber))\r\n          .map((num) => (\r\n            <PaginationItem key={num} number={num} active={+currentPage === num}/>\r\n          ))\r\n      }\r\n      {\r\n        totalUsersCount > 0 &&\r\n        <button disabled={portionCount === portionNumber} className={styles.button}\r\n                onClick={() => {setPortionNumber(portionNumber + 1)}}>Вправо</button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Paginator\r\n","import React from 'react'\r\nimport styles from './User.module.css'\r\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../../../../types/AppTypes'\r\n\r\ntype PropTypes = {\r\n  user: UserType\r\n  followingInProgress: Array<number>\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n}\r\n\r\nfunction User ({ user, followingInProgress, unfollow, follow }: PropTypes) {\r\n  return (\r\n    <li className={styles.user}>\r\n      <div className={styles.avatarBox}>\r\n        <NavLink to={`/profile/${user.id}`}>\r\n          <img src={user.photos.small || defaultAvatar} alt='avatar' width='100'/>\r\n        </NavLink>\r\n        {\r\n          user.followed\r\n            ? <button\r\n              disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n              unfollow(user.id)\r\n            }}\r\n            >unfollow\r\n            </button>\r\n\r\n            : <button\r\n              disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n              follow(user.id)\r\n            }}\r\n            >follow\r\n            </button>\r\n        }\r\n      </div>\r\n\r\n      <div>\r\n        {user.name}\r\n        {user.status}\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\r\nimport styles from './UsersList.module.css'\r\nimport User from './User/User'\r\nimport { UserType } from '../../../../types/AppTypes'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\n\r\ntype PropTypes = {\r\n  users: Array<UserType>\r\n  followingInProgress: Array<number>\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  isFetching: boolean\r\n}\r\n\r\nconst UsersList: React.FC<PropTypes> = ({ users, followingInProgress, follow, unfollow, isFetching }) => {\r\n  const usersOrMessage = (users.length) ?\r\n    users.map((user) => (\r\n      <User key={user.id}\r\n            user={user}\r\n            followingInProgress={followingInProgress}\r\n            follow={follow}\r\n            unfollow={unfollow}\r\n      />\r\n    )) : 'Ничего не найдено'\r\n\r\n  return (\r\n    isFetching ? <Preloader/> :\r\n      <ul className={styles.users}>\r\n        {usersOrMessage}\r\n      </ul>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n","import { connect } from 'react-redux'\r\nimport {\r\n  getRequestUsers,\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n} from '../../../redux/users-reducer'\r\nimport React, { useEffect } from 'react'\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getTotalUsersCount,\r\n  getUsersSelector,\r\n} from '../../../redux/users-selectors'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { UserType } from '../../../types/AppTypes'\r\nimport { compose } from 'redux'\r\nimport Search from './Search/Search'\r\nimport Paginator from './Paginator/Paginator'\r\nimport UsersList from './UsersList/UsersList'\r\n\r\ntype MapStatePropTypes = {\r\n  currentPage: number\r\n  users: Array<UserType>\r\n  totalUsersCount: number\r\n  isFetching: boolean\r\n  followingInProgress: Array<number>\r\n  term: string\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  setCurrentPage: (page: number) => void\r\n  setIsFetching: (isFetching: boolean) => void\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  setTerm: (term: string) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nconst Users: React.FC<PropTypes> = ({\r\n  currentPage,\r\n  totalUsersCount,\r\n  isFetching,\r\n  users,\r\n  followingInProgress,\r\n  setCurrentPage,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n  getRequestUsers,\r\n  term,\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setCurrentPage(1)\r\n    }\r\n  }, [setCurrentPage])\r\n\r\n  return (\r\n    <>\r\n      <h1>Пользователи</h1>\r\n      <Search\r\n        setTerm={setTerm}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n      <Paginator\r\n        totalUsersCount={totalUsersCount}\r\n        currentPage={currentPage}\r\n        pageSize={5}\r\n        portionSize={10}\r\n        getRequestUsers={getRequestUsers}\r\n        term={term}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n      <UsersList\r\n        users={users}\r\n        followingInProgress={followingInProgress}\r\n        follow={follow}\r\n        unfollow={unfollow}\r\n        isFetching={isFetching}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\r\n  return {\r\n    users: getUsersSelector(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n    term: state.usersPage.term,\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\r\n    setCurrentPage,\r\n    setIsFetching,\r\n    getRequestUsers,\r\n    follow,\r\n    unfollow,\r\n    setTerm,\r\n  }),\r\n)(Users)\r\n","import React from 'react'\nimport styles from './News.module.css'\n\nfunction News () {\n  return (\n    <div className={styles.messages}>\n      Новости\n    </div>\n  )\n}\n\nexport default News\n","import React from 'react'\nimport styles from './Music.module.css'\n\nfunction Music () {\n  return (\n    <div className={styles.messages}>\n      Музыка\n    </div>\n  )\n}\n\nexport default Music\n","import React from 'react'\nimport styles from './Settings.module.css'\n\nfunction Settings () {\n  return (\n    <div className={styles.messages}>\n      Настройки\n    </div>\n  )\n}\n\nexport default Settings\n","import { authAPI, securityAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\n\r\n/* Action types */\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isFetching: false as boolean,\r\n  isAuth: false as boolean,\r\n  captchaUrl: null as string | null,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nfunction authReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n\r\n    case GET_CAPTCHA_URL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype SetAuthUserDataActionPayloadType = {\r\n  userId: number | null\r\n  email: string | null\r\n  login: string | null\r\n  isAuth: boolean\r\n};\r\n\r\ntype SetAuthUserDataActionType = {\r\n  type: typeof SET_USER_DATA\r\n  payload: SetAuthUserDataActionPayloadType\r\n};\r\n\r\nexport const setAuthUserData = (\r\n  userId: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n): SetAuthUserDataActionType => (\r\n  { type: SET_USER_DATA, payload: { userId, email, login, isAuth } }\r\n)\r\n\r\ntype GetCaptchaUrlSuccessType = {\r\n  type: typeof GET_CAPTCHA_URL_SUCCESS\r\n  captchaUrl: string\r\n};\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n  type: GET_CAPTCHA_URL_SUCCESS,\r\n  captchaUrl: captchaUrl,\r\n})\r\n\r\n/* Thunk creators */\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n  const meData = await authAPI.me()\r\n\r\n  if (meData.resultCode === 0) {\r\n    let { id, email, login } = meData.data\r\n    dispatch(setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\nexport const login = (\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha: string,\r\n) => async (dispatch: any) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n  if (data.resultCode === 0) {\r\n    dispatch(getAuthUserData())\r\n  }\r\n  else {\r\n    // 10 - Captcha is required\r\n    if (data.resultCode === 10) {\r\n      dispatch(getCaptchaUrl())\r\n    }\r\n\r\n    dispatch(stopSubmit(\r\n      'login',\r\n      { _error: data.messages[0] },\r\n    ))\r\n  }\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n  const response = await authAPI.logout()\r\n\r\n  if (response.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n  const response = await securityAPI.getCaptcha()\r\n  const captchaUrl = response.url\r\n  dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { createField } from '../../common/FormsControls/createField'\r\nimport { required } from '../../../utils/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst Input = createField('input')\r\n\r\ntype PropTypes = {\r\n  isAuth: boolean\r\n  captchaUrl: string\r\n  login: (login: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nfunction Login (props: PropTypes) {\r\n  const onSubmit = (formData: any) => {\r\n    const { login, password, rememberMe, captcha } = formData\r\n    props.login(login, password, rememberMe, captcha)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to='/profile'/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      // @ts-ignore\r\n      <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction LoginForm ({ handleSubmit, error, captchaUrl }: any) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          type='text' placeholder='Логин' name='login' component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          type='password' placeholder='Пароль' name='password'\r\n          component={Input} validate={[required]}\r\n        />\r\n      </div>\r\n      <Field\r\n        type='checkbox' name='rememberMe' id='rememberMe'\r\n        component={Input} checked\r\n      />\r\n      <label htmlFor='rememberMe'>Запомнить меня</label>\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n      {captchaUrl &&\r\n      <Field\r\n        type='text' placeholder='Капча' name='captcha' component={Input}\r\n        validate={[required]}\r\n      />}\r\n\r\n      {error ? <div style={{ color: 'red' }}>{error}</div> : null}\r\n      <div>\r\n        <button>Войти</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nexport default connect((state: any) => ({ isAuth: state.auth.isAuth, captchaUrl: state.auth.captchaUrl }), { login })(Login)\r\n","import Preloader from '../components/common/Preloader/Preloader'\r\nimport React from 'react'\r\n\r\nexport function withSuspense (Component: React.ComponentType) {\r\n  return (props: any) => (\r\n    <React.Suspense fallback={<Preloader/>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport styles from './Content.module.css'\r\nimport Users from './Users/Users'\r\nimport News from './News/News'\r\nimport Music from './Music/Music'\r\nimport Settings from './Settings/Settings'\r\nimport Login from './Login/Login'\r\nimport { withSuspense } from '../../hoc/withSuspense'\r\n\r\nconst MessagesContainer = React.lazy(\r\n  () => import('./Messages/MessagesContainer')\r\n)\r\nconst ProfileContainer = React.lazy(\r\n  () => import('./Profile/ProfileContainer')\r\n)\r\n\r\nfunction Content () {\r\n  return (\r\n    <div className={styles.content}>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\r\n        <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\r\n        <Route path='/messages' render={withSuspense(MessagesContainer)}/>\r\n        <Route path='/users' render={() => <Users/>}/>\r\n        <Route path='/news' component={News}/>\r\n        <Route path='/music' component={Music}/>\r\n        <Route path='/settings' component={Settings}/>\r\n        <Route path='/login' render={() => <Login/>}/>\r\n        <Route path='*' render={() => '404'}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\nimport styles from './Button.module.css'\n\ntype PropTypes = {\n  width?: number\n  onClick?: () => any\n}\n\nconst Button: React.FC<PropTypes> = ({ width, children, onClick }) => {\n  return (\n    <button onClick={onClick} style={{ width }} className={styles.button}>{children}</button>\n  )\n}\n\nexport default Button\n","import React from 'react'\nimport styles from './Header.module.css'\nimport { NavLink } from 'react-router-dom'\nimport Button from '../common/Button/Button'\n\ntype PropTypes = {\n  isAuth: boolean\n  login: string | null\n  logout: () => void\n}\n\nconst Header: React.FC<PropTypes> = (props) => {\n  return (\n    <header className={styles.header}>\n      <div className={styles.container}>\n        <div>Samurai-Network</div>\n        {\n          props.isAuth ? (\n              <div>\n                {props.login} - <Button onClick={props.logout}>Выйти</Button>\n              </div>\n            )\n            : <NavLink to='/login' className={styles.login}>Login</NavLink>\n        }\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Header from './Header'\nimport { logout } from '../../redux/auth-reducer'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/store'\n\ntype MapStatePropTypes = {\n  isAuth: boolean\n  login: string | null\n}\n\ntype MapDispatchPropTypes = {\n  logout: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst HeaderContainer: React.FC<PropTypes> = (props) => {\n  return (\n    <Header {...props} />\n  )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropTypes => ({\n  isAuth: state.auth.isAuth,\n  login: state.auth.login\n})\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>\n(mapStateToProps, { logout })(HeaderContainer)\n","import { getAuthUserData } from './auth-reducer'\r\n\r\n/* Action types */\r\nconst INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\r\n\r\nexport type InitialStateType = {\r\n  initialized: boolean\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  initialized: false,\r\n}\r\n\r\nfunction initReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype InitializedSuccessType = {\r\n  type: typeof INITIALIZED_SUCCESS\r\n};\r\n\r\nexport const initializedSuccess = (): InitializedSuccessType => ({ type: INITIALIZED_SUCCESS })\r\n\r\n/* Thunk creators */\r\nexport const initializeApp = () => (dispatch: any) => {\r\n  // Когда все промисы будут resolve\r\n  Promise.all([\r\n    dispatch(getAuthUserData()),\r\n  ]).then(() => {\r\n    dispatch(initializedSuccess())\r\n  })\r\n}\r\n\r\nexport default initReducer\r\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport styles from './App.module.css'\nimport Footer from './Footer/Footer'\nimport Sidebar from './Sidebar/Sidebar'\nimport Content from './Main/Content'\nimport HeaderContainer from './Header/HeaderContainer'\nimport { initializeApp } from '../redux/init-reducer'\nimport { AppStateType } from '../redux/store'\nimport { HashRouter } from 'react-router-dom'\nimport Preloader from './common/Preloader/Preloader'\n\ntype MapStatePropTypes = {\n  initialized: boolean\n}\n\ntype MapDispatchPropTypes = {\n  initializeApp: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst App: React.FC<PropTypes> = (props) => {\n  useEffect(() => {\n    if (!props.initialized) {\n      props.initializeApp()\n    }\n  }, [props])\n\n  if (!props.initialized) {\n    return <Preloader fullscreen/>\n  }\n\n  return (\n    <HashRouter>\n      <div className={styles.page}>\n        <HeaderContainer/>\n        <main className={styles.main}>\n          <Sidebar/>\n          <Content/>\n        </main>\n        <Footer/>\n      </div>\n    </HashRouter>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    initialized: state.init.initialized\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>(\n  mapStateToProps, { initializeApp }\n)(App)\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport messagesReducer from './messages-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport initReducer from './init-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  init: initReducer,\r\n  form: formReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nexport default store\r\n","import * as serviceWorker from './serviceWorker'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport styles from './Preloader.module.css'\nimport preloader from '../../../assets/images/preloader.gif'\n\ntype PropTypes = {\n  fullscreen?: boolean\n}\n\nconst Preloader: React.FC<PropTypes> = ({ fullscreen = false }) => {\n  return (fullscreen) ? (\n    <div className={styles.wrapper}>\n      <div className={styles.preloader}>\n        <img className={styles.preloaderIMG} src={preloader} alt='load'/>\n      </div>\n    </div>\n  ) : (\n    <img className={styles.preloaderIMG} src={preloader} alt='load'/>\n  )\n}\n\nexport default Preloader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Search_div__2HjV8\",\"input\":\"Search_input__1SF7g\",\"button\":\"Search_button__tmFR-\",\"reset\":\"Search_reset__2G7ng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderIMG\":\"Preloader_preloaderIMG__BZHNf\",\"wrapper\":\"Preloader_wrapper__1pJ8g\",\"preloader\":\"Preloader_preloader__oGcz1\"};","export const required = (value: string) => {\r\n  if (!value) return 'Поле обязательное'\r\n}\r\n\r\nexport const maxLengthCreator = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Максимальная длина - ${length}`\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItems\":\"Paginator_paginationItems__2iECZ\",\"button\":\"Paginator_button__1_Jp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2CR8J\",\"container\":\"Header_container__HDvgl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__4Klr-\",\"main\":\"App_main__1nCkj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItem\":\"PaginationItem_paginationItem__1EdWb\",\"paginationItemActive\":\"PaginationItem_paginationItemActive__1EfE6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarBox\":\"User_avatarBox__dLefj\",\"user\":\"User_user__3Qdic\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.584b607f.gif\";","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport function createField (FormElement: string) {\r\n  return function ({ meta, input, ...props }: any) {\r\n    const isError = meta.error && meta.touched\r\n\r\n    return (\r\n      <span className={(isError || null) && styles.error}>\r\n        <FormElement {...input} {...props} />\r\n        {isError && <span>{meta.error}</span>}\r\n      </span>\r\n    )\r\n  }\r\n}\r\n","import { profileAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType, PostType, ProfileType } from '../types/AppTypes'\r\n\r\n/* Action types */\r\nconst ADD_POST = 'samurai-network/profile/ADD_POST'\r\nconst SET_USER_PROFILE = 'samurai-network/profile/SET_USER_PROFILE'\r\nconst SET_STATUS = 'samurai-network/profile/SET_STATUS'\r\nconst DELETE_POST = 'samurai-network/profile/DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'samurai-network/profile/SAVE_PHOTO_SUCCESS'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, text: 'Вам нравится React?', likes: 4 },\r\n    { id: 2, text: 'hey', likes: 2 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nfunction profileReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      const nextId = state.posts[state.posts.length - 1].id + 1\r\n      const newPost = {\r\n        id: nextId,\r\n        text: action.post,\r\n        likes: 0,\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      }\r\n\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      }\r\n\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      }\r\n\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(post => post.id !== action.postId),\r\n      }\r\n\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AddPostActionCreatorActionType = {\r\n  type: typeof ADD_POST\r\n  post: string\r\n};\r\nexport const addPostActionCreator = (formData: any): AddPostActionCreatorActionType => (\r\n  { type: ADD_POST, post: formData.newPost }\r\n)\r\n\r\ntype SetUserProfileActionType = {\r\n  type: typeof SET_USER_PROFILE\r\n  profile: ProfileType\r\n};\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => (\r\n  { type: SET_USER_PROFILE, profile: profile }\r\n)\r\n\r\ntype SetStatusActionType = {\r\n  type: typeof SET_STATUS\r\n  status: string\r\n};\r\nexport const setStatus = (status: string): SetStatusActionType => (\r\n  { type: SET_STATUS, status: status }\r\n)\r\n\r\ntype DeletePostActionType = {\r\n  type: typeof DELETE_POST\r\n  postId: number\r\n};\r\nexport const deletePost = (postId: number): DeletePostActionType => (\r\n  { type: DELETE_POST, postId: postId }\r\n)\r\n\r\ntype SavePhotoSuccessActionType = {\r\n  type: typeof SAVE_PHOTO_SUCCESS\r\n  photos: PhotosType\r\n};\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => (\r\n  { type: SAVE_PHOTO_SUCCESS, photos: photos }\r\n)\r\n\r\n/* Thunk creators */\r\nexport const getUsersProfile = (userId: number) => async (dispatch: any) => {\r\n  const response = await profileAPI.getProfile(userId)\r\n  dispatch(setUserProfile(response))\r\n}\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n  const response = await profileAPI.getStatus(userId)\r\n  dispatch(setStatus(response))\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n  const response = await profileAPI.updateStatus(status)\r\n  if (response.resultCode === 0) {\r\n    dispatch(setStatus(status))\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n  const response = await profileAPI.updatePhoto(file)\r\n  if (response.resultCode === 0) {\r\n    dispatch(savePhotoSuccess(response.data.photos))\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n  const response = await profileAPI.updateProfile(profile)\r\n  if (response.resultCode === 0) {\r\n    dispatch(getUsersProfile(getState().auth.userId))\r\n  }\r\n  else {\r\n    dispatch(stopSubmit(\r\n      'edit-profile', { _error: 'response.data.messages[0]' },\r\n    ))\r\n    return Promise.reject()\r\n  }\r\n}\r\n\r\nexport default profileReducer\r\n"],"sourceRoot":""}