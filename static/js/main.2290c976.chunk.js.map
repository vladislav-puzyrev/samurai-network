{"version":3,"sources":["components/Sidebar/Menu/Menu.module.css","api/api.ts","redux/messages-reducer.ts","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Content/Content.module.css","components/common/Preloader/Preloader.module.css","assets/images/preloader.gif","components/common/FormsControls/FormsControls.module.css","serviceWorker.ts","components/Footer/Footer.tsx","components/Sidebar/Menu/Menu.tsx","components/Sidebar/Sidebar.tsx","components/Content/Users/PaginationItem/PaginationItem.tsx","components/Content/Users/User/User.tsx","components/Content/Users/Users.tsx","redux/users-reducer.ts","redux/users-selectors.ts","components/Content/Users/UsersContainer.tsx","components/Content/News/News.tsx","components/Content/Music/Music.tsx","components/Content/Settings/Settings.tsx","redux/auth-reducer.ts","components/Content/Login/Login.tsx","hoc/withSuspense.tsx","components/Content/Content.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","components/App.tsx","redux/sidebar-reducer.ts","redux/store.ts","index.tsx","components/common/Preloader/Preloader.tsx","utils/validators.ts","components/Content/Users/Users.module.css","components/Header/Header.module.css","components/App.module.css","components/Content/Users/PaginationItem/PaginationItem.module.css","components/Content/Users/User/User.module.css","components/common/FormsControls/createField.tsx","redux/profile-reducer.ts","assets/images/defaultAvatar.png"],"names":["module","exports","server","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","count","page","term","get","res","data","isFollowing","userID","follow","post","unfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","updatePhoto","photoFile","formData","FormData","append","updateProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptcha","SEND_MESSAGE","initialState","dialogs","id","username","messages","message","sendMessageActionCreator","type","messagesReducer","state","action","newMessage","length","Boolean","window","location","hostname","match","Footer","className","styles","footer","Menu","menu","menuItem","exact","to","menuLink","activeClassName","active","Sidebar","aside","PaginationItem","props","activeStyle","paginationItemActive","paginationItem","number","User","user","followingInProgress","avatarBox","src","photos","small","defaultAvatar","alt","width","followed","disabled","some","onClick","name","Users","currentPage","totalUsersCount","onPageChanged","setCurrentPage","isFetching","users","paginationItems","i","push","key","title","pagination","event","target","textContent","Preloader","map","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","pageSize","acceptFollow","acceptUnfollow","setIsFetching","toggleFollowingProgress","userId","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","async","resultCode","usersReducer","totalUsers","filter","usersPage","getUsersSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","getRequestUsers","this","React","Component","connect","getState","response","items","totalCount","bind","News","Music","Settings","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","meData","getCaptchaUrl","url","authReducer","Input","createField","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","validate","required","checked","htmlFor","style","color","auth","stopSubmit","_error","withSuspense","Suspense","fallback","MessagesContainer","lazy","ProfileContainer","Content","content","path","render","Header","header","container","INITIALIZED_SUCCESS","initialized","appReducer","init","initializeApp","Promise","all","then","useEffect","main","friends","avatar","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","messagesPage","sidebar","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","_store","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","preloader","value","maxLengthCreator","FormElement","meta","input","isError","touched","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","text","likes","postText","addPostActionCreator","newPost","setStatus","getUsersProfile","savePhoto","file","saveProfile","reject","postId"],"mappings":"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","file":"static/js/main.2290c976.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__27qdF\",\"menuLink\":\"Menu_menuLink__EHAtu\",\"active\":\"Menu_active__2D1vX\"};","import axios from 'axios'\r\nimport {\r\n  GetUsersResponse,\r\n  OperationResult,\r\n  SavePhotoResponse,\r\n  MeResponse,\r\n  LoginResponse,\r\n  GetCaptchaResponse,\r\n  GetAllDialogsResponse\r\n} from '../types/APITypes'\r\nimport { ProfileType } from '../types/AppTypes'\r\n\r\nconst server = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '179dfe62-c6c9-4ba2-b5d0-e88802782ea6'\r\n  }\r\n})\r\n\r\nexport const usersAPI = {\r\n  async getUsers (count: number, page: number, term = '') {\r\n    const res = await server.get<GetUsersResponse>(`users?count=${count}&page=${page}&term=${term}`)\r\n    return res.data\r\n  },\r\n  async isFollowing (userID: number) {\r\n    const res = await server.get<boolean>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async follow (userID: number) {\r\n    const res = await server.post<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async unfollow (userID: number) {\r\n    const res = await server.delete<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  }\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile (userID: number) {\r\n    const res = await server.get<ProfileType>(`profile/${userID}`)\r\n    return res.data\r\n  },\r\n  async getStatus (userID: number) {\r\n    const res = await server.get<string>(`profile/status/${userID}`)\r\n    return res.data\r\n  },\r\n  async updateStatus (status: string) {\r\n    const res = await server.put<OperationResult>(`profile/status`, { status: status })\r\n    return res.data\r\n  },\r\n  async updatePhoto (photoFile: File) {\r\n    const formData = new FormData()\r\n    formData.append(`image`, photoFile)\r\n\r\n    const res = await server.put<SavePhotoResponse>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type':\r\n          'multipart/form-data'\r\n      }\r\n    })\r\n\r\n    return res.data\r\n  },\r\n  async updateProfile (profile: ProfileType) {\r\n    const res = await server.put<OperationResult>(`profile`, profile)\r\n    return res.data\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  async me () {\r\n    const res = await server.get<MeResponse>(`auth/me`)\r\n    return res.data\r\n  },\r\n  async login (email: string, password: string, rememberMe = true, captcha: string) {\r\n    const res = await server.post<LoginResponse>(`auth/login`, { email, password, rememberMe, captcha })\r\n    return res.data\r\n  },\r\n  async logout () {\r\n    const res = await server.post<OperationResult>(`auth/logout`)\r\n    return res.data\r\n  }\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptcha () {\r\n    const res = await server.get<GetCaptchaResponse>(`security/get-captcha-url`)\r\n    return res.data\r\n  }\r\n}\r\n\r\nexport const dialogsAPI = {\r\n  // Сортировка человека вверх при начале чатинга\r\n  async startChatting (userID: number) {\r\n    const res = await server.put<OperationResult>(`dialogs/${userID}`)\r\n    return res.data\r\n  },\r\n  // Получить все диалоги (без сообщений просто для вывода)\r\n  async getAllDialogs () {\r\n    const res = await server.get<Array<GetAllDialogsResponse>>(`dialogs`)\r\n    return res.data\r\n  },\r\n  async getDialog (userID: number) {\r\n    const res = await server.get<any>(`dialogs/${userID}/messages`)\r\n    return res.data\r\n  },\r\n  async sendMessage (userID: number, message: string) {\r\n    const res = await server.post<any>(`dialogs/${userID}/messages`, message)\r\n    return res.data\r\n  },\r\n  async isMessageViewed (messageID: number) {\r\n    const res = await server.get<any>(`dialogs/messages/${messageID}/viewed`)\r\n    return res.data\r\n  },\r\n  async putMessageInSpam (messageID: number) {\r\n    const res = await server.post<any>(`dialogs/messages/${messageID}/spam`)\r\n    return res.data\r\n  },\r\n  async deleteMessage (messageID: number) {\r\n    const res = await server.delete<any>(`dialogs/messages/${messageID}`)\r\n    return res.data\r\n  },\r\n  async restoreMessage (messageID: number) {\r\n    const res = await server.put<any>(`dialogs/messages/${messageID}/restore`)\r\n    return res.data\r\n  },\r\n  async messagesNewerThanDate (userID: number, date: string) {\r\n    const res = await server.get<any>(`dialogs/${userID}/messages/new?newerThen=${date}`)\r\n    return res.data\r\n  },\r\n  async getNewMessages () {\r\n    const res = await server.get<any>(`dialogs/messages/new/count`)\r\n    return res.data\r\n  }\r\n}\r\n","const SEND_MESSAGE = 'samurai-network/messages/SEND_MESSAGE'\r\n\r\ntype DialogType = {\r\n  id: number\r\n  username: string\r\n};\r\n\r\ntype MessageType = {\r\n  id: number\r\n  username: string\r\n  message: string\r\n};\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    { id: 1, username: 'Димыч' },\r\n    { id: 2, username: 'Саша' },\r\n    { id: 3, username: 'Валера' },\r\n    { id: 4, username: 'Иван' },\r\n    { id: 5, username: 'Света' },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, username: 'Димыч', message: 'Я люблю react!' },\r\n    { id: 2, username: 'Димыч', message: 'Я люблю react!' },\r\n  ] as Array<MessageType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nfunction messagesReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case SEND_MESSAGE:\r\n      const nextId = state.messages[state.messages.length - 1].id + 1\r\n      const newMessage = {\r\n        id: nextId,\r\n        username: 'username',\r\n        message: action.formData.message,\r\n      }\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, newMessage],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ntype sendMessageActionCreatorActionType = {\r\n  type: typeof SEND_MESSAGE\r\n  formData: string\r\n};\r\n\r\nexport const sendMessageActionCreator = (formData: string): sendMessageActionCreatorActionType => ({\r\n  type: SEND_MESSAGE,\r\n  formData: formData,\r\n})\r\n\r\nexport default messagesReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3hmYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Sidebar_aside__1e2NK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__fZ86A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__oGcz1\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.584b607f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__JuxJL\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport styles from './Footer.module.css'\n\nfunction Footer () {\n  return (\n    <footer className={styles.footer}>\n      samurai-network\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styles from './Menu.module.css'\n\nfunction Menu () {\n  return (\n    <ul className={styles.menu}>\n      <li className={styles.menuItem}>\n        <NavLink\n          exact to='/profile' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Профиль\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/messages' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Сообщения\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/users' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Пользователи\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/news' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Новости\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/music' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Музыка\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/settings' className={styles.menuLink}\n          activeClassName={styles.active}\n        >Настройки\n        </NavLink>\n      </li>\n    </ul>\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styles from './Sidebar.module.css'\nimport Menu from './Menu/Menu'\n\nfunction Sidebar () {\n  return (\n    <aside className={styles.aside}>\n      <Menu/>\n    </aside>\n  )\n}\n\nexport default Sidebar\n","import React from 'react'\r\nimport styles from './PaginationItem.module.css'\r\n\r\ntype PropTypes = {\r\n  active: boolean\r\n  number: number\r\n}\r\n\r\nfunction PaginationItem (props: PropTypes) {\r\n  const activeStyle = props.active ? styles.paginationItemActive : ''\r\n\r\n  return (\r\n    <li className={styles.paginationItem + ' ' + activeStyle}>{props.number}</li>\r\n  )\r\n}\r\n\r\nexport default PaginationItem\r\n","import React from 'react'\r\nimport styles from './User.module.css'\r\nimport defaultAvatar from '../../../../assets/images/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../../../types/AppTypes'\r\n\r\ntype PropTypes = {\r\n  user: UserType\r\n  followingInProgress: Array<number>\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n}\r\n\r\nfunction User ({ user, followingInProgress, unfollow, follow }: PropTypes) {\r\n  return (\r\n    <li className={styles.user}>\r\n      <div className={styles.avatarBox}>\r\n        <NavLink to={`/profile/${user.id}`}>\r\n          <img src={user.photos.small || defaultAvatar} alt='avatar' width='100'/>\r\n        </NavLink>\r\n        {\r\n          user.followed\r\n            ? <button\r\n              disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n              unfollow(user.id)\r\n            }}\r\n            >unfollow\r\n            </button>\r\n\r\n            : <button\r\n              disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n              follow(user.id)\r\n            }}\r\n            >follow\r\n            </button>\r\n        }\r\n      </div>\r\n\r\n      <div>\r\n        {user.name}\r\n        {user.status}\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\r\nimport styles from './Users.module.css'\r\nimport PaginationItem from './PaginationItem/PaginationItem'\r\nimport User from './User/User'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport { UserType } from '../../../types/AppTypes'\r\n\r\ntype PropTypes = {\r\n  currentPage: number\r\n  totalUsersCount: number\r\n  onPageChanged: (page: number) => void\r\n  setCurrentPage: (page: number) => void\r\n  isFetching: boolean\r\n  users: Array<UserType>\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  followingInProgress: Array<number>\r\n}\r\n\r\nconst Users: React.FC<PropTypes> = ({\r\n  currentPage, totalUsersCount, onPageChanged, setCurrentPage, isFetching, users, follow, unfollow, followingInProgress,\r\n}) => {\r\n  // const pagesQuantity = Math.ceil(totalUsersCount / pageSize);\r\n  const paginationItems = []\r\n\r\n  for (let i = +currentPage; i < +currentPage + 5; i++) {\r\n    if (i < +totalUsersCount) {\r\n      paginationItems.push(\r\n        <PaginationItem key={i} number={i} active={currentPage === +i}/>,\r\n      )\r\n    }\r\n  }\r\n\r\n  function onClickHandler (event: any) {\r\n    onPageChanged(event.target.textContent)\r\n    setCurrentPage(event.target.textContent)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className={styles.title}>Пользователи</h1>\r\n      <ul className={styles.pagination} onClick={onClickHandler}>\r\n        {paginationItems}\r\n      </ul>\r\n\r\n      {isFetching && <Preloader/>}\r\n      <ul className={styles.users}>\r\n        {\r\n          users.map((user) => (\r\n            <User key={user.id}\r\n                  user={user}\r\n                  followingInProgress={followingInProgress}\r\n                  follow={follow}\r\n                  unfollow={unfollow}\r\n            />\r\n          ))\r\n        }\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Users\r\n","import { usersAPI } from '../api/api'\r\nimport { UserType } from '../types/AppTypes'\r\nimport { AppStateType } from './store'\r\nimport { Dispatch } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\nconst FOLLOW = 'samurai-network/users/FOLLOW'\r\nconst UNFOLLOW = 'samurai-network/users/UNFOLLOW'\r\nconst SET_USERS = 'samurai-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'samurai-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'samurai-network/users/SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'samurai-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  pageSize: 5,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>, // array of users ids\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionTypes =\r\n  AcceptFollowActionType |\r\n  AcceptUnfollowActionType |\r\n  SetUsersActionType |\r\n  SetCurrentPageActionType |\r\n  SetTotalUsersActionType |\r\n  SetIsFetchingActionType |\r\n  ToggleFollowingProgressActionType\r\n\r\nfunction usersReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: true }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: false }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      }\r\n\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsers,\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching ?\r\n          [...state.followingInProgress, action.userId] :\r\n          state.followingInProgress.filter(id => id !== action.userId),\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// Action Creators\r\ntype AcceptFollowActionType = {\r\n  type: typeof FOLLOW,\r\n  id: number\r\n};\r\nexport const acceptFollow = (id: number): AcceptFollowActionType => ({ type: FOLLOW, id })\r\n\r\ntype AcceptUnfollowActionType = {\r\n  type: typeof UNFOLLOW,\r\n  id: number\r\n};\r\nexport const acceptUnfollow = (id: number): AcceptUnfollowActionType => ({ type: UNFOLLOW, id })\r\n\r\ntype SetUsersActionType = {\r\n  type: typeof SET_USERS,\r\n  users: Array<UserType>\r\n};\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({ type: SET_USERS, users })\r\n\r\ntype SetCurrentPageActionType = {\r\n  type: typeof SET_CURRENT_PAGE,\r\n  currentPage: number\r\n};\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n})\r\n\r\ntype SetTotalUsersActionType = {\r\n  type: typeof SET_TOTAL_USERS_COUNT,\r\n  totalUsers: number\r\n};\r\nexport const setTotalUsers = (totalUsers: number): SetTotalUsersActionType => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  totalUsers,\r\n})\r\n\r\ntype SetIsFetchingActionType = {\r\n  type: typeof TOGGLE_IS_FETCHING,\r\n  isFetching: boolean\r\n};\r\nexport const setIsFetching = (isFetching: boolean): SetIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = {\r\n  type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching: boolean\r\n  userId: number\r\n};\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n})\r\n\r\n// Thunk Creators\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getRequestUsers = (pageSize: number, currentPage: number): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    dispatch(setIsFetching(true))\r\n    const response = await usersAPI.getUsers(pageSize, currentPage)\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsers(response.totalCount))\r\n    dispatch(setIsFetching(false))\r\n  }\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async (dispatch: DispatchType, getState: GetStateType) => {\r\n    let apiMethod = usersAPI.follow.bind(usersAPI)\r\n    _followUnfollowFlow(dispatch, userId, apiMethod, acceptFollow)\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async (dispatch: DispatchType, getState: GetStateType) => {\r\n    let apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n    _followUnfollowFlow(dispatch, userId, apiMethod, acceptUnfollow)\r\n  }\r\n}\r\n\r\nconst _followUnfollowFlow = async (\r\n  dispatch: DispatchType,\r\n  userId: number,\r\n  apiMethod: any,\r\n  actionCreator: (userID: number) => AcceptFollowActionType | AcceptUnfollowActionType\r\n) => {\r\n  dispatch(toggleFollowingProgress(true, userId))\r\n  const response = await apiMethod(userId)\r\n  if (response.resultCode === 0) dispatch(actionCreator(userId))\r\n  dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport default usersReducer\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './store'\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsersSelector__BadRender = (state: AppStateType) => {\r\n  return getUsers(state).filter(() => true)\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(() => true)\r\n  },\r\n)\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\n","import { connect } from 'react-redux'\r\nimport Users from './Users'\r\nimport {\r\n  getRequestUsers,\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  follow,\r\n  unfollow,\r\n} from '../../../redux/users-reducer'\r\nimport React from 'react'\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsersSelector,\r\n} from '../../../redux/users-selectors'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { UserType } from '../../../types/AppTypes'\r\n\r\ntype MapStatePropTypes = {\r\n  pageSize: number\r\n  currentPage: number\r\n  users: Array<UserType>\r\n  totalUsersCount: number\r\n  isFetching: boolean\r\n  followingInProgress: Array<number>\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  setCurrentPage: (page: number) => void\r\n  setIsFetching: (isFetching: boolean) => void\r\n  getRequestUsers: (pageSize: number, currentPage: number) => void\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nclass UsersContainer extends React.Component<PropTypes> {\r\n  componentDidMount () {\r\n    this.props.getRequestUsers(this.props.pageSize, this.props.currentPage)\r\n  }\r\n\r\n  // WITHOUT BIND\r\n  onPageChanged = (currentPage: number) => {\r\n    this.props.getRequestUsers(this.props.pageSize, currentPage)\r\n  }\r\n\r\n  render () {\r\n    return <Users\r\n      onPageChanged={this.onPageChanged}\r\n      currentPage={this.props.currentPage}\r\n      totalUsersCount={this.props.totalUsersCount}\r\n      setCurrentPage={this.props.setCurrentPage}\r\n      isFetching={this.props.isFetching}\r\n      users={this.props.users}\r\n      follow={this.props.follow}\r\n      unfollow={this.props.unfollow}\r\n      followingInProgress={this.props.followingInProgress}\r\n    />\r\n  }\r\n}\r\n\r\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\r\n  return {\r\n    users: getUsersSelector(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>(mapStateToProps, {\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  getRequestUsers,\r\n  follow,\r\n  unfollow,\r\n})(UsersContainer)\r\n","import React from 'react'\nimport styles from './News.module.css'\n\nfunction News () {\n  return (\n    <div className={styles.messages}>\n      Новости\n    </div>\n  )\n}\n\nexport default News\n","import React from 'react'\nimport styles from './Music.module.css'\n\nfunction Music () {\n  return (\n    <div className={styles.messages}>\n      Музыка\n    </div>\n  )\n}\n\nexport default Music\n","import React from 'react'\nimport styles from './Settings.module.css'\n\nfunction Settings () {\n  return (\n    <div className={styles.messages}>\n      Настройки\n    </div>\n  )\n}\n\nexport default Settings\n","import { authAPI, securityAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isFetching: false as boolean,\r\n  isAuth: false as boolean,\r\n  captchaUrl: null as string | null,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nfunction authReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n\r\n    case GET_CAPTCHA_URL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// setAuthUserData\r\ntype SetAuthUserDataActionPayloadType = {\r\n  userId: number | null\r\n  email: string | null\r\n  login: string | null\r\n  isAuth: boolean\r\n};\r\n\r\ntype SetAuthUserDataActionType = {\r\n  type: typeof SET_USER_DATA\r\n  payload: SetAuthUserDataActionPayloadType\r\n};\r\n\r\nexport const setAuthUserData = (\r\n  userId: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n): SetAuthUserDataActionType => (\r\n  { type: SET_USER_DATA, payload: { userId, email, login, isAuth } }\r\n)\r\n\r\n// getCaptchaUrlSuccess\r\ntype GetCaptchaUrlSuccessType = {\r\n  type: typeof GET_CAPTCHA_URL_SUCCESS\r\n  captchaUrl: string\r\n};\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n  type: GET_CAPTCHA_URL_SUCCESS,\r\n  captchaUrl: captchaUrl,\r\n})\r\n\r\n// getAuthUserData\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n  const meData = await authAPI.me()\r\n\r\n  if (meData.resultCode === 0) {\r\n    let { id, email, login } = meData.data\r\n    dispatch(setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\n// login\r\nexport const login = (\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha: string,\r\n) => async (dispatch: any) => {\r\n  const data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n  if (data.resultCode === 0) {\r\n    dispatch(getAuthUserData())\r\n  }\r\n  else {\r\n    // 10 - Captcha is required\r\n    if (data.resultCode === 10) {\r\n      dispatch(getCaptchaUrl())\r\n    }\r\n\r\n    dispatch(stopSubmit(\r\n      'login',\r\n      { _error: data.messages[0] },\r\n    ))\r\n  }\r\n}\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n  const response = await authAPI.logout()\r\n\r\n  if (response.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n  const response = await securityAPI.getCaptcha()\r\n  const captchaUrl = response.url\r\n  dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { createField } from '../../common/FormsControls/createField'\r\nimport { required } from '../../../utils/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst Input = createField('input')\r\n\r\ntype PropTypes = {\r\n  isAuth: boolean\r\n  captchaUrl: string\r\n  login: (login: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nfunction Login (props: PropTypes) {\r\n  const onSubmit = (formData: any) => {\r\n    const { login, password, rememberMe, captcha } = formData\r\n    props.login(login, password, rememberMe, captcha)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Redirect to='/profile'/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      // @ts-ignore\r\n      <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction LoginForm ({ handleSubmit, error, captchaUrl }: any) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          type='text' placeholder='Логин' name='login' component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          type='password' placeholder='Пароль' name='password'\r\n          component={Input} validate={[required]}\r\n        />\r\n      </div>\r\n      <Field\r\n        type='checkbox' name='rememberMe' id='rememberMe'\r\n        component={Input} checked\r\n      />\r\n      <label htmlFor='rememberMe'>Запомнить меня</label>\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n      {captchaUrl &&\r\n      <Field\r\n        type='text' placeholder='Капча' name='captcha' component={Input}\r\n        validate={[required]}\r\n      />}\r\n\r\n      {error ? <div style={{ color: 'red' }}>{error}</div> : null}\r\n      <div>\r\n        <button>Войти</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nexport default connect((state: any) => ({ isAuth: state.auth.isAuth, captchaUrl: state.auth.captchaUrl }), { login })(Login)\r\n","import Preloader from '../components/common/Preloader/Preloader'\r\nimport React from 'react'\r\n\r\nexport function withSuspense (Component: React.ComponentType) {\r\n  return (props: any) => (\r\n    <React.Suspense fallback={<Preloader/>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport styles from './Content.module.css'\r\nimport UsersContainer from './Users/UsersContainer'\r\nimport News from './News/News'\r\nimport Music from './Music/Music'\r\nimport Settings from './Settings/Settings'\r\nimport Login from './Login/Login'\r\nimport { withSuspense } from '../../hoc/withSuspense'\r\n\r\nconst MessagesContainer = React.lazy(\r\n  () => import('./Messages/MessagesContainer')\r\n)\r\nconst ProfileContainer = React.lazy(\r\n  () => import('./Profile/ProfileContainer')\r\n)\r\n\r\nfunction Content () {\r\n  return (\r\n    <div className={styles.content}>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\r\n        <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\r\n        <Route path='/messages' render={withSuspense(MessagesContainer)}/>\r\n        <Route path='/users' render={() => <UsersContainer/>}/>\r\n        <Route path='/news' component={News}/>\r\n        <Route path='/music' component={Music}/>\r\n        <Route path='/settings' component={Settings}/>\r\n        <Route path='/login' render={() => <Login/>}/>\r\n        <Route path='*' render={() => '404'}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\nimport styles from './Header.module.css'\nimport { NavLink } from 'react-router-dom'\n\ntype PropTypes = {\n  isAuth: boolean\n  login: string | null\n  logout: () => void\n}\n\nconst Header: React.FC<PropTypes> = (props) => {\n  return (\n    <header className={styles.header}>\n      <div className={styles.container}>\n        <div>LOGO</div>\n        {\n          props.isAuth\n            ? <div>{props.login} - <button\n              onClick={props.logout}\n            >Выйти\n            </button>\n            </div>\n            : <NavLink to='/login' className={styles.login}>Login</NavLink>\n        }\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Header from './Header'\nimport { logout } from '../../redux/auth-reducer'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/store'\n\ntype MapStatePropTypes = {\n  isAuth: boolean\n  login: string | null\n}\n\ntype MapDispatchPropTypes = {\n  logout: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst HeaderContainer: React.FC<PropTypes> = (props) => {\n  return (\n    <Header {...props} />\n  )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropTypes => ({\n  isAuth: state.auth.isAuth,\n  login: state.auth.login\n})\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>\n(mapStateToProps, { logout })(HeaderContainer)\n","import { getAuthUserData } from './auth-reducer'\r\n\r\nconst INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\r\n\r\nexport type InitialStateType = {\r\n  initialized: boolean\r\n};\r\n\r\nconst initialState: InitialStateType = {\r\n  initialized: false,\r\n}\r\n\r\nfunction appReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ntype InitializedSuccessType = {\r\n  type: typeof INITIALIZED_SUCCESS\r\n};\r\nexport const initializedSuccess = (): InitializedSuccessType => ({ type: INITIALIZED_SUCCESS })\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n  // Когда все промисы будут resolve\r\n  Promise.all([\r\n    dispatch(getAuthUserData()),\r\n  ]).then(() => {\r\n    dispatch(initializedSuccess())\r\n  })\r\n}\r\n\r\nexport default appReducer\r\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport styles from './App.module.css'\nimport Footer from './Footer/Footer'\nimport Sidebar from './Sidebar/Sidebar'\nimport Content from './Content/Content'\nimport HeaderContainer from './Header/HeaderContainer'\nimport { initializeApp } from '../redux/app-reducer'\nimport Preloader from './common/Preloader/Preloader'\nimport { AppStateType } from '../redux/store'\nimport { HashRouter } from 'react-router-dom'\n\ntype MapStatePropTypes = {\n  initialized: boolean\n}\n\ntype MapDispatchPropTypes = {\n  initializeApp: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst App: React.FC<PropTypes> = (props) => {\n  useEffect(() => {\n    props.initializeApp()\n  }, [])\n\n  if (!props.initialized) {\n    return <Preloader/>\n  }\n\n  return (\n    <HashRouter>\n      <div className={styles.page}>\n        <HeaderContainer/>\n        <main className={styles.main}>\n          <Sidebar/>\n          <Content/>\n        </main>\n        <Footer/>\n      </div>\n    </HashRouter>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    initialized: state.init.initialized\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>\n(mapStateToProps, { initializeApp })(App)\n","type FriendType = {\r\n  id: number\r\n  username: string\r\n  avatar: string\r\n};\r\n\r\nconst initialState = {\r\n  friends: [\r\n    {\r\n      id: 1,\r\n      username: 'Димыч',\r\n      avatar: 'https://whatsism.com/uploads/posts/2018-07/1530546770_rmk_vdjbx10.jpg',\r\n    },\r\n    {\r\n      id: 2,\r\n      username: 'Колян',\r\n      avatar: 'https://whatsism.com/uploads/posts/2018-07/1530546770_rmk_vdjbx10.jpg',\r\n    },\r\n    {\r\n      id: 3,\r\n      username: 'Серега',\r\n      avatar: 'https://whatsism.com/uploads/posts/2018-07/1530546770_rmk_vdjbx10.jpg',\r\n    },\r\n  ] as Array<FriendType>,\r\n}\r\n\r\nfunction sidebarReducer (state = initialState, action: any) {\r\n  return state\r\n}\r\n\r\nexport default sidebarReducer\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport messagesReducer from './messages-reducer'\r\nimport sidebarReducer from './sidebar-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport appReducer from './app-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  sidebar: sidebarReducer,\r\n  auth: authReducer,\r\n  init: appReducer,\r\n  form: formReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nwindow._store = store\r\nexport default store\r\n","import * as serviceWorker from './serviceWorker'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react'\nimport styles from './Preloader.module.css'\nimport preloader from '../../../assets/images/preloader.gif'\n\nfunction Preloader () {\n  return (\n    <img className={styles.preloader} src={preloader} alt='load'/>\n  )\n}\n\nexport default Preloader\n","export const required = (value: string) => {\r\n  if (!value) return 'Поле обязательное'\r\n}\r\n\r\nexport const maxLengthCreator = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Максимальная длина - ${length}`\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Users_pagination__nolDT\",\"users\":\"Users_users__2YeWT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2CR8J\",\"container\":\"Header_container__HDvgl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__4Klr-\",\"main\":\"App_main__1nCkj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItem\":\"PaginationItem_paginationItem__10Dwb\",\"paginationItemActive\":\"PaginationItem_paginationItemActive__vaSqg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarBox\":\"User_avatarBox__1_XPd\"};","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\n\r\nexport function createField (FormElement: string) {\r\n  return function ({ meta, input, ...props }: any) {\r\n    const isError = meta.error && meta.touched\r\n\r\n    return (\r\n      <span className={(isError || null) && styles.error}>\r\n        <FormElement {...input} {...props} />\r\n        {isError && <span>{meta.error}</span>}\r\n      </span>\r\n    )\r\n  }\r\n}\r\n","import { profileAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType, PostType, ProfileType } from '../types/AppTypes'\r\n\r\nconst ADD_POST = 'samurai-network/profile/ADD_POST'\r\nconst SET_USER_PROFILE = 'samurai-network/profile/SET_USER_PROFILE'\r\nconst SET_STATUS = 'samurai-network/profile/SET_STATUS'\r\nconst DELETE_POST = 'samurai-network/profile/DELETE_POST'\r\nconst SAVE_PHOTO_SUCCESS = 'samurai-network/profile/SAVE_PHOTO_SUCCESS'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, text: 'Вам нравится React?', likes: 4 },\r\n    { id: 2, text: 'hey', likes: 2 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  postText: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nfunction profileReducer (state = initialState, action: any): InitialStateType {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      const nextId = state.posts[state.posts.length - 1].id + 1\r\n      const newPost = {\r\n        id: nextId,\r\n        text: action.post,\r\n        likes: 0,\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n        postText: '',\r\n      }\r\n\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      }\r\n\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      }\r\n\r\n    case DELETE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(post => post.id !== action.postId),\r\n      }\r\n\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// addPostActionCreator\r\ntype AddPostActionCreatorActionType = {\r\n  type: typeof ADD_POST\r\n  post: string\r\n};\r\n\r\nexport const addPostActionCreator = (formData: any): AddPostActionCreatorActionType => (\r\n  { type: ADD_POST, post: formData.newPost }\r\n)\r\n\r\n// setUserProfile\r\ntype SetUserProfileActionType = {\r\n  type: typeof SET_USER_PROFILE\r\n  profile: ProfileType\r\n};\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => (\r\n  { type: SET_USER_PROFILE, profile: profile }\r\n)\r\n\r\n// setStatus\r\ntype SetStatusActionType = {\r\n  type: typeof SET_STATUS\r\n  status: string\r\n};\r\n\r\nexport const setStatus = (status: string): SetStatusActionType => (\r\n  { type: SET_STATUS, status: status }\r\n)\r\n\r\n// deletePost\r\ntype DeletePostActionType = {\r\n  type: typeof DELETE_POST\r\n  postId: number\r\n};\r\n\r\nexport const deletePost = (postId: number): DeletePostActionType => (\r\n  { type: DELETE_POST, postId: postId }\r\n)\r\n\r\n// savePhotoSuccess\r\ntype SavePhotoSuccessActionType = {\r\n  type: typeof SAVE_PHOTO_SUCCESS\r\n  photos: PhotosType\r\n};\r\n\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => (\r\n  { type: SAVE_PHOTO_SUCCESS, photos: photos }\r\n)\r\n\r\nexport const getUsersProfile = (userId: number) => async (dispatch: any) => {\r\n  const response = await profileAPI.getProfile(userId)\r\n  dispatch(setUserProfile(response))\r\n}\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n  const response = await profileAPI.getStatus(userId)\r\n  dispatch(setStatus(response))\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n  const response = await profileAPI.updateStatus(status)\r\n  if (response.resultCode === 0) {\r\n    dispatch(setStatus(status))\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n  const response = await profileAPI.updatePhoto(file)\r\n  if (response.resultCode === 0) {\r\n    dispatch(savePhotoSuccess(response.data.photos))\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n  const response = await profileAPI.updateProfile(profile)\r\n  if (response.resultCode === 0) {\r\n    dispatch(getUsersProfile(getState().auth.userId))\r\n  }\r\n  else {\r\n    dispatch(stopSubmit(\r\n      'edit-profile', { _error: 'response.data.messages[0]' },\r\n    ))\r\n    return Promise.reject()\r\n  }\r\n}\r\n\r\nexport default profileReducer\r\n","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.b4b85090.png\";"],"sourceRoot":""}