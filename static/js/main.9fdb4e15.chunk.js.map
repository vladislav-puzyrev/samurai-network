{"version":3,"sources":["components/common/Textarea/Textarea.module.css","components/Main/Profile/User/UserInfo/UserInfo.module.css","components/Sidebar/Menu/Menu.module.css","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Main/Main.module.css","components/common/Button/Button.module.css","components/Main/Users/UsersList/UsersList.module.css","components/Main/Login/Login.module.css","components/Main/Messages/Interlocutors/Interlocutors.module.css","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsList.module.css","components/Main/Messages/Dialog/Dialog.module.css","components/Main/Messages/Dialog/DialogMessages/DialogMessages.module.css","components/Main/Messages/Dialog/DialogForm/DialogForm.module.css","components/Main/Messages/Messages.module.css","assets/images/defaultAvatar.png","components/Main/Users/UsersList/User/User.module.css","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsListItem/InterlocutorsListItem.module.css","serviceWorker.ts","components/Footer/Footer.tsx","components/Sidebar/Menu/Menu.tsx","api/api.ts","redux/messages-reducer.ts","components/Sidebar/Sidebar.tsx","redux/users-reducer.ts","redux/users-selectors.ts","components/common/Button/Button.tsx","components/Main/Users/Search/Search.tsx","components/Main/Users/Paginator/PaginationItem/PaginationItem.tsx","components/Main/Users/Paginator/Paginator.tsx","components/Main/Users/UsersList/User/User.tsx","components/common/Preloader/Preloader.tsx","components/Main/Users/UsersList/UsersList.tsx","components/Main/Users/Users.tsx","components/Main/News/News.tsx","components/Main/Music/Music.tsx","components/Main/Settings/Settings.tsx","utils/validators.ts","redux/init-reducer.ts","redux/auth-reducer.ts","components/common/Input/Input.tsx","components/Main/Login/Login.jsx","redux/profile-reducer.ts","components/Main/Profile/Posts/Post/Post.jsx","components/common/Textarea/Textarea.tsx","components/Main/Profile/Posts/Posts.jsx","components/Main/Profile/Posts/PostsContainer.jsx","components/Main/Profile/User/Avatar/Avatar.jsx","components/Main/Profile/User/UserInfo/Status/Status.tsx","components/Main/Profile/User/UserInfo/ProfileDataForm/ProfileDataForm.jsx","components/Main/Profile/User/UserInfo/ProfileData/ProfileData.jsx","components/Main/Profile/User/UserInfo/UserInfo.jsx","components/Main/Profile/User/User.jsx","components/Main/Profile/Profile.tsx","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsListItem/InterlocutorsListItem.tsx","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsList.tsx","components/Main/Messages/Interlocutors/Interlocutors.tsx","components/Main/Messages/Dialog/SelectIntercutor/SelectInterlocutor.tsx","components/Main/Messages/Dialog/InterlocutorInfo/InterlocutorInfo.tsx","components/Main/Messages/Dialog/DialogMessages/DialogMessagesItem/DialogMessagesItem.tsx","components/Main/Messages/Dialog/DialogMessages/DialogMessages.tsx","components/Main/Messages/Dialog/DialogForm/DialogForm.tsx","components/Main/Messages/Dialog/Dialog.tsx","components/Main/Messages/Messages.tsx","components/Main/Main.tsx","components/Header/Header.tsx","components/App.tsx","redux/store.ts","index.tsx","components/Main/Profile/User/Avatar/Avatar.module.css","components/Header/Header.module.css","components/Main/Profile/User/UserInfo/Status/Status.module.css","components/Main/Messages/Dialog/DialogMessages/DialogMessagesItem/DialogMessagesItem.module.css","components/Main/Profile/Posts/Posts.module.css","components/Main/Messages/Dialog/InterlocutorInfo/InterlocutorInfo.module.css","components/common/Preloader/Preloader.module.css","components/Main/Profile/User/UserInfo/ProfileDataForm/ProfileDataForm.module.css","components/Main/Users/Search/Search.module.css","components/Main/Users/Paginator/Paginator.module.css","components/Main/Profile/Posts/Post/Post.module.css","components/Main/Profile/User/UserInfo/ProfileData/ProfileData.module.css","components/Main/Messages/Dialog/SelectIntercutor/SelectInterlocutor.module.css","components/App.module.css","components/Main/Users/Paginator/PaginationItem/PaginationItem.module.css","assets/images/preloader.gif","components/common/Input/Input.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Footer","className","styles","footer","Menu","newMessagesCount","menu","menuItem","exact","to","menuLink","activeClassName","active","server","axios","create","withCredentials","baseURL","headers","usersAPI","count","page","term","get","res","data","userID","post","delete","profileAPI","status","put","photoFile","formData","FormData","append","profile","authAPI","email","password","rememberMe","captcha","securityAPI","messagesAPI","message","body","date","SET_INTERLOCUTORS","SET_NEW_INTERLOCUTOR","SET_CURRENT_DIALOG","SET_MESSAGES_AFTER_DATE","SET_NEW_MESSAGES_COUNT","TOGGLE_IS_FETCHING","initialState","interlocutors","newInterlocutor","currentDialog","messagesAfterDate","fetching","sendMessage","toggleIsFetching","property","isFetching","type","getInterlocutorsList","dispatch","a","async","messages","getDialog","error","items","messagesReducer","state","action","connect","messagesPage","isAuth","auth","getNewMessagesCount","timerID","useRef","useEffect","current","setInterval","clearInterval","aside","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SET_TERM","TOGGLE_IS_FOLLOWING_PROGRESS","TOGGLE_IS_FOLLOWING_USER","users","totalUsersCount","currentPage","followingInProgress","isFollowingUser","setUsers","setTotalUsers","totalUsers","setIsFetching","toggleFollowingProgress","userId","toggleFollowedUser","following","follow","resultCode","id","unfollow","usersReducer","map","user","followed","filter","getUsersSelector","createSelector","usersPage","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","Button","width","children","onClick","margin","disabled","height","style","button","Search","React","memo","setTerm","setCurrentPage","setPortionNumber","useState","inputText","setInputText","searchButtonStyle","cursor","div","placeholder","onChange","event","target","value","input","PaginationItem","number","activeStyle","paginationItemActive","paginationItem","data-number","Paginator","pageSize","portionSize","getRequestUsers","portionNumber","pageCount","Math","ceil","pages","i","push","portionCount","lastElemPageNumber","leftPortionPageNumber","rightPortionPageNumber","pageNumber","dataset","onPageChanged","paginationItems","num","key","User","followButtonDisabled","avatarBox","src","photos","small","defaultAvatar","alt","info","userName","name","userStatus","followButton","aria-label","role","Preloader","fullscreen","wrapper","preloader","preloaderIMG","UsersList","usersOrMessage","length","some","compose","response","totalCount","News","Music","Settings","required","INITIALIZED_SUCCESS","initialized","getMyProfile","getState","setMyProfile","initReducer","SET_USER_DATA","SET_CAPTCHA_URL","SET_MY_PROFILE","SET_MY_PHOTO","login","captchaUrl","myProfile","setAuthUserData","payload","getCaptchaUrlSuccess","setMyPhoto","getAuthUserData","meData","getCaptchaUrl","url","authReducer","Input","meta","isError","touched","LoginReduxForm","reduxForm","form","handleSubmit","logTestAccount","onSubmit","htmlFor","Field","component","validate","color","then","stopSubmit","_error","initialValues","userLogin","ADD_POST","SET_USER_PROFILE","SET_STATUS","SET_PROFILE_PHOTO","SET_AVATAR_FETCHING","posts","text","likes","avatarIsFetching","addPost","newPost","setUserProfile","setStatus","setAvatarIsFetching","getUsersProfile","profileReducer","Post","props","avatar","Textarea","rows","cols","flexGrow","onKeyDown","bottom","undefined","Object","assign","transform","textarea","maxLengthValidator","AddNewPostFormRedux","marginTop","Posts","postsElements","profilePage","reverse","title","postsList","PostsContainer","Avatar","isOwner","savePhoto","userURL","uploadLabel","createRef","followingFetching","avatarWrapper","avatarIMG","large","upload","uploadInput","e","files","photo","textContent","ref","Status","updateStatus","editMode","setEditMode","localStatus","setLocalStatus","statusClass","statusExist","statusNotExist","statusBox","autoFocus","currentTarget","onBlur","onFocus","select","statusInput","statusNotMe","aboutMe","myContacts","keys","contacts","toUpperCase","slice","ProfileData","isContactsExists","values","contact","about","lookingForAJob","lookingForAJobDescription","contactsList","entries","rel","href","UserInfo","saveProfile","fullName","catch","display","getStatus","file","Promise","reject","saveMyProfile","isFollowing","useParams","InterlocutorsListItem","hasNewMessages","lastDialogActivityDate","lastUserActivityDate","isToday","setIsToday","now","Date","tomorrow","setDate","getDate","yesterday","lastMessageDate","getTime","li","infoMessage","lastMessage","toLocaleTimeString","toLocaleDateString","InterlocutorsList","ul","Interlocutors","SelectInterlocutor","elem","messagesIMG","InterlocutorInfo","interlocutor","online","toLocaleString","DialogMessagesItem","messageID","addedAt","translatedMessage","senderID","senderName","lastSenderID","recipientID","viewed","interlocutorPhoto","myPhoto","myID","firstMessage","isNewSender","senderPhoto","aName","time","DialogMessages","dialog","dialogMessagesItem","translatedBody","senderId","recipientId","DialogForm","startChatting","sendMessageFetching","setMessage","scrollHeight","maxHeight","resize","minHeight","trim","keyCode","preventDefault","Dialog","dialogFetching","setUser","getNewInterlocutor","getMessagesAfterDate","extraArgument","resolve","setInterlocutor","find","item","Main","content","path","render","logout","header","container","infoMe","split","init","initializeApp","main","rootReducer","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9fdb4e15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__32chH\",\"error\":\"Textarea_error__1Ernb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__zWzay\",\"userName\":\"UserInfo_userName__2HoIC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__27qdF\",\"menuLink\":\"Menu_menuLink__EHAtu\",\"active\":\"Menu_active__2D1vX\",\"messagesCount\":\"Menu_messagesCount__Gcpgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3hmYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Sidebar_aside__1e2NK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Main_content__2h5Jj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__OZeNM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UsersList_users__WQVOf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__3z_ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Interlocutors_wrapper__2zA-0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InterlocutorsList_wrapper__15THU\",\"ul\":\"InterlocutorsList_ul__3JB43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialog_wrapper__111U0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DialogMessages_wrapper__2CNKp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DialogForm_wrapper__1YYQn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__sE-hE\"};","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.b4b85090.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Qdic\",\"avatarBox\":\"User_avatarBox__dLefj\",\"info\":\"User_info__3dI-o\",\"userName\":\"User_userName__1AQPc\",\"followButton\":\"User_followButton__y-S0x\",\"sendMessage\":\"User_sendMessage__39BmE\",\"userStatus\":\"User_userStatus__1tTcC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InterlocutorsListItem_wrapper__1IgFZ\",\"userName\":\"InterlocutorsListItem_userName__1P_t4\",\"li\":\"InterlocutorsListItem_li__1DLA-\",\"a\":\"InterlocutorsListItem_a__Eytt8\",\"active\":\"InterlocutorsListItem_active__3BK1D\",\"avatar\":\"InterlocutorsListItem_avatar__3l5eU\",\"info\":\"InterlocutorsListItem_info__2OczL\",\"infoMessage\":\"InterlocutorsListItem_infoMessage__GcUxi\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Main is cached for offline use.\" message.\n              console.log('Main is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport styles from './Footer.module.css'\n\nfunction Footer () {\n  return (\n    <footer className={styles.footer}>\n      samurai-network\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styles from './Menu.module.css'\n\ntype PropTypes = {\n  newMessagesCount: number\n}\n\nconst Menu: React.FC<PropTypes> = ({ newMessagesCount }) => {\n  return (\n    <ul className={styles.menu}>\n      <li className={styles.menuItem}>\n        <NavLink\n          exact to='/profile' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Моя страница\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/messages' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Сообщения {newMessagesCount > 0 && `(${newMessagesCount})`}\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/users' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Пользователи\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/news' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Новости\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/music' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Музыка\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/settings' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Настройки\n        </NavLink>\n      </li>\n    </ul>\n  )\n}\n\nexport default Menu\n","import axios from 'axios'\r\nimport {\r\n  UsersType,\r\n  OperationResult,\r\n  SavePhotoType,\r\n  MeType,\r\n  LoginType,\r\n  CaptchaType,\r\n  InterlocutorType,\r\n  DialogsType,\r\n  SendMessageType,\r\n  MessagesAfterDateType,\r\n  ProfileType\r\n} from '../types/types'\r\n\r\nconst server = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    // ca3b0eb4-4af6-4803-8caa-f7d26464a12c main\r\n    // a7da6dad-5c4f-417c-a0d9-8d30ee0d96ec secondary\r\n    'API-KEY': 'ca3b0eb4-4af6-4803-8caa-f7d26464a12c',\r\n  }\r\n})\r\n\r\nexport const usersAPI = {\r\n  async getUsers (count: number, page: number, term = '') {\r\n    const res = await server.get<UsersType>(`users?count=${count}&page=${page}&term=${term}`)\r\n    return res.data\r\n  },\r\n  async isFollowing (userID: number) {\r\n    const res = await server.get<boolean>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async follow (userID: number) {\r\n    const res = await server.post<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async unfollow (userID: number) {\r\n    const res = await server.delete<OperationResult>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile (userID: number) {\r\n    const res = await server.get<ProfileType>(`profile/${userID}`)\r\n    return res.data\r\n  },\r\n  async getStatus (userID: number) {\r\n    const res = await server.get<string>(`profile/status/${userID}`)\r\n    return res.data\r\n  },\r\n  async updateStatus (status: string) {\r\n    const res = await server.put<OperationResult>(`profile/status`, { status: status })\r\n    return res.data\r\n  },\r\n  async updatePhoto (photoFile: File) {\r\n    const formData = new FormData()\r\n    formData.append(`image`, photoFile)\r\n\r\n    const res = await server.put<SavePhotoType>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type':\r\n          'multipart/form-data'\r\n      }\r\n    })\r\n\r\n    return res.data\r\n  },\r\n  async updateProfile (profile: ProfileType) {\r\n    const res = await server.put<OperationResult>(`profile`, profile)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  async me () {\r\n    const res = await server.get<MeType>(`auth/me`)\r\n    return res.data\r\n  },\r\n  async login (email: string, password: string, rememberMe = true, captcha: string) {\r\n    const res = await server.post<LoginType>(`auth/login`, { email, password, rememberMe, captcha })\r\n    return res.data\r\n  },\r\n  async logout () {\r\n    const res = await server.post<OperationResult>(`auth/logout`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptcha () {\r\n    const res = await server.get<CaptchaType>(`security/get-captcha-url`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const messagesAPI = {\r\n  async startChatting (userID: number) {\r\n    const res = await server.put<OperationResult>(`dialogs/${userID}`)\r\n    return res.data\r\n  },\r\n  async getInterlocutorsList () {\r\n    const res = await server.get<Array<InterlocutorType>>(`dialogs`)\r\n    return res.data\r\n  },\r\n  async getDialog (userID: number) {\r\n    const res = await server.get<DialogsType>(`dialogs/${userID}/messages`)\r\n    return res.data\r\n  },\r\n  async sendMessage (userID: number, message: string) {\r\n    const res = await server.post<SendMessageType>(`dialogs/${userID}/messages`, { body: message })\r\n    return res.data\r\n  },\r\n  async readMessage (messageID: string) {\r\n    const res = await server.get<boolean>(`dialogs/messages/${messageID}/viewed`)\r\n    return res.data\r\n  },\r\n  async putMessageInSpam (messageID: string) {\r\n    const res = await server.post<OperationResult>(`dialogs/messages/${messageID}/spam`)\r\n    return res.data\r\n  },\r\n  async deleteMessage (messageID: string) {\r\n    const res = await server.delete<OperationResult>(`dialogs/messages/${messageID}`)\r\n    return res.data\r\n  },\r\n  async restoreMessage (messageID: string) {\r\n    const res = await server.put<OperationResult>(`dialogs/messages/${messageID}/restore`)\r\n    return res.data\r\n  },\r\n  async getMessagesAfterDate (userID: number, date: string) {\r\n    const res = await server.get<Array<MessagesAfterDateType>>(\r\n      `dialogs/${userID}/messages/new?newerThen=${date}`\r\n    )\r\n    return res.data\r\n  },\r\n  async getNewMessagesCount () {\r\n    const res = await server.get<number>(`dialogs/messages/new/count`)\r\n    return res.data\r\n  },\r\n}\r\n","import { InterlocutorType, DialogType, MessagesAfterDateType, ProfileType } from '../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\nimport { messagesAPI, profileAPI } from '../api/api'\r\n\r\n/* Action types */\r\nconst SET_INTERLOCUTORS = 'samurai-network/messages/SET_INTERLOCUTORS'\r\nconst SET_NEW_INTERLOCUTOR = 'samurai-network/messages/SET_NEW_INTERLOCUTOR'\r\nconst SET_CURRENT_DIALOG = 'samurai-network/messages/SET_CURRENT_DIALOG'\r\nconst SET_MESSAGES_AFTER_DATE = 'samurai-network/messages/SET_MESSAGES_AFTER_DATE'\r\nconst SET_NEW_MESSAGES_COUNT = 'samurai-network/messages/SET_NEW_MESSAGES_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/messages/TOGGLE_IS_FETCHING'\r\n\r\nconst initialState = {\r\n  interlocutors: null as Array<InterlocutorType> | null,\r\n  newInterlocutor: null as ProfileType | null,\r\n  currentDialog: null as Array<DialogType> | null,\r\n  messagesAfterDate: null as Array<MessagesAfterDateType> | null,\r\n  newMessagesCount: 0,\r\n\r\n  fetching: {\r\n    interlocutors: false,\r\n    newInterlocutor: false,\r\n    currentDialog: false,\r\n    messagesAfterDate: false,\r\n    newMessagesCount: false,\r\n    sendMessage: false,\r\n  },\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionTypes =\r\n  setInterlocutorsActionType |\r\n  setNewInterlocutorActionType |\r\n  setCurrentDialogActionType |\r\n  setNewMessagesCountActionType |\r\n  setMessagesAfterDateActionType |\r\n  toggleIsFetchingActionType\r\n\r\nfunction messagesReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_INTERLOCUTORS:\r\n      return {\r\n        ...state,\r\n        interlocutors: action.messages\r\n      }\r\n\r\n    case SET_NEW_INTERLOCUTOR:\r\n      return {\r\n        ...state,\r\n        newInterlocutor: action.profile\r\n      }\r\n\r\n    case SET_CURRENT_DIALOG:\r\n      return {\r\n        ...state,\r\n        currentDialog: action.currentDialog\r\n      }\r\n\r\n    case SET_MESSAGES_AFTER_DATE:\r\n      return {\r\n        ...state,\r\n        messagesAfterDate: action.messagesAfterDate\r\n      }\r\n\r\n    case SET_NEW_MESSAGES_COUNT:\r\n      return {\r\n        ...state,\r\n        newMessagesCount: action.count\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        fetching: {\r\n          ...state.fetching,\r\n          [action.property]: action.isFetching\r\n        }\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype setInterlocutorsActionType = { type: typeof SET_INTERLOCUTORS, messages: Array<InterlocutorType> };\r\nexport const setInterlocutors = (messages: Array<InterlocutorType>): setInterlocutorsActionType => ({\r\n  type: SET_INTERLOCUTORS,\r\n  messages\r\n})\r\n\r\ntype setNewInterlocutorActionType = { type: typeof SET_NEW_INTERLOCUTOR, profile: ProfileType };\r\nexport const setNewInterlocutor = (profile: ProfileType): setNewInterlocutorActionType => ({\r\n  type: SET_NEW_INTERLOCUTOR,\r\n  profile\r\n})\r\n\r\ntype setCurrentDialogActionType = { type: typeof SET_CURRENT_DIALOG, currentDialog: Array<DialogType> };\r\nexport const setCurrentDialog = (currentDialog: Array<DialogType>): setCurrentDialogActionType => ({\r\n  type: SET_CURRENT_DIALOG,\r\n  currentDialog\r\n})\r\n\r\ntype setMessagesAfterDateActionType = { type: typeof SET_MESSAGES_AFTER_DATE, messagesAfterDate: Array<MessagesAfterDateType> };\r\nexport const setMessagesAfterDate = (messagesAfterDate: Array<MessagesAfterDateType>): setMessagesAfterDateActionType => ({\r\n  type: SET_MESSAGES_AFTER_DATE,\r\n  messagesAfterDate: messagesAfterDate\r\n})\r\n\r\ntype setNewMessagesCountActionType = { type: typeof SET_NEW_MESSAGES_COUNT, count: number };\r\nexport const setNewMessagesCount = (count: number): setNewMessagesCountActionType => ({\r\n  type: SET_NEW_MESSAGES_COUNT,\r\n  count\r\n})\r\n\r\ntype toggleIsFetchingPropertyType =\r\n  'interlocutors' |\r\n  'newInterlocutor' |\r\n  'currentDialog' |\r\n  'messagesAfterDate' |\r\n  'newMessagesCount' |\r\n  'sendMessage'\r\ntype toggleIsFetchingActionType = {\r\n  type: typeof TOGGLE_IS_FETCHING,\r\n  property: toggleIsFetchingPropertyType,\r\n  isFetching: boolean\r\n};\r\nexport const toggleIsFetching = (property: toggleIsFetchingPropertyType, isFetching: boolean): toggleIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  property,\r\n  isFetching\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const startChatting = (userID: number): ThunkType => {\r\n  return async () => {\r\n    await messagesAPI.startChatting(userID)\r\n  }\r\n}\r\n\r\nexport const getInterlocutorsList = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('interlocutors', true))\r\n    const res = await messagesAPI.getInterlocutorsList()\r\n    dispatch(setInterlocutors(res))\r\n    dispatch(toggleIsFetching('interlocutors', false))\r\n  }\r\n}\r\n\r\nexport const getNewInterlocutor = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('newInterlocutor', true))\r\n    const res = await profileAPI.getProfile(userID)\r\n    dispatch(setNewInterlocutor(res))\r\n    dispatch(toggleIsFetching('newInterlocutor', false))\r\n  }\r\n}\r\n\r\nexport const getDialog = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('currentDialog', true))\r\n    const res = await messagesAPI.getDialog(userID)\r\n    if (!res.error) {\r\n      dispatch(setCurrentDialog(res.items))\r\n      dispatch(toggleIsFetching('currentDialog', false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const sendMessage = (userID: number, message: string): ThunkType => {\r\n  return async (dispatch, getState, extraArgument) => {\r\n    dispatch(toggleIsFetching('sendMessage', true))\r\n    const res = await messagesAPI.sendMessage(userID, message)\r\n    if (res.resultCode === 0) {\r\n      Promise.resolve().then(() => {\r\n        getDialog(userID)(dispatch, getState, extraArgument)\r\n        getInterlocutorsList()(dispatch, getState, extraArgument)\r\n      })\r\n        .then(() => {\r\n          dispatch(toggleIsFetching('sendMessage', false))\r\n        })\r\n    }\r\n  }\r\n}\r\n\r\nexport const getNewMessagesCount = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('newMessagesCount', true))\r\n    const res = await messagesAPI.getNewMessagesCount()\r\n    dispatch(setNewMessagesCount(res))\r\n    dispatch(toggleIsFetching('newMessagesCount', false))\r\n  }\r\n}\r\n\r\nexport const getMessagesAfterDate = (userID: number, date: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('messagesAfterDate', true))\r\n    const res = await messagesAPI.getMessagesAfterDate(userID, date)\r\n    dispatch(setMessagesAfterDate(res))\r\n    dispatch(toggleIsFetching('messagesAfterDate', false))\r\n  }\r\n}\r\n\r\nexport default messagesReducer\r\n","import React, { useEffect, useRef } from 'react'\nimport styles from './Sidebar.module.css'\nimport Menu from './Menu/Menu'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/store'\nimport { getNewMessagesCount } from '../../redux/messages-reducer'\n\ntype MapStatePropTypes = { newMessagesCount: number, isAuth: boolean }\n\ntype MapDispatchPropTypes = { getNewMessagesCount: () => void }\n\nconst Sidebar: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({ newMessagesCount, getNewMessagesCount, isAuth }) => {\n  const timerID = useRef<NodeJS.Timeout>()\n\n  useEffect(() => {\n    if (isAuth) {\n      timerID.current = setInterval(() => {\n        getNewMessagesCount()\n      }, 10000)\n    }\n\n    return () => {\n      if (timerID.current) {\n        clearInterval(timerID.current)\n      }\n    }\n  }, [getNewMessagesCount, isAuth])\n\n  return (\n    <aside className={styles.aside}>\n      <Menu newMessagesCount={newMessagesCount}/>\n    </aside>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    newMessagesCount: state.messagesPage.newMessagesCount,\n    isAuth: state.auth.isAuth,\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\n  getNewMessagesCount\n})(Sidebar)\n","import { usersAPI } from '../api/api'\r\nimport { UserType } from '../types/types'\r\nimport { AppStateType } from './store'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\n/* Action types */\r\nconst FOLLOW = 'samurai-network/users/FOLLOW'\r\nconst UNFOLLOW = 'samurai-network/users/UNFOLLOW'\r\nconst SET_USERS = 'samurai-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'samurai-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'samurai-network/users/SET_TOTAL_USERS_COUNT'\r\nconst SET_TERM = 'samurai-network/users/SET_TERM'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'samurai-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\nconst TOGGLE_IS_FOLLOWING_USER = 'samurai-network/users/TOGGLE_IS_FOLLOWING_USER'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UserType>,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>,\r\n  term: '',\r\n  isFollowingUser: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  AcceptFollowActionType |\r\n  AcceptUnfollowActionType |\r\n  SetUsersActionType |\r\n  SetCurrentPageActionType |\r\n  SetTotalUsersActionType |\r\n  SetIsFetchingActionType |\r\n  ToggleFollowingProgressActionType |\r\n  setTermActionType |\r\n  toggleFollowedUserActionType\r\n\r\nfunction usersReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: true }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: false }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      }\r\n\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching ?\r\n          [...state.followingInProgress, action.userId] :\r\n          state.followingInProgress.filter(id => id !== action.userId),\r\n      }\r\n\r\n    case SET_TERM:\r\n      return {\r\n        ...state,\r\n        term: action.term,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_USER:\r\n      return {\r\n        ...state,\r\n        isFollowingUser: action.following\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AcceptFollowActionType = { type: typeof FOLLOW, id: number };\r\nexport const acceptFollow = (id: number): AcceptFollowActionType => ({\r\n  type: FOLLOW,\r\n  id\r\n})\r\n\r\ntype AcceptUnfollowActionType = { type: typeof UNFOLLOW, id: number };\r\nexport const acceptUnfollow = (id: number): AcceptUnfollowActionType => ({\r\n  type: UNFOLLOW,\r\n  id\r\n})\r\n\r\ntype SetUsersActionType = { type: typeof SET_USERS, users: Array<UserType> };\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({\r\n  type: SET_USERS,\r\n  users\r\n})\r\n\r\ntype SetCurrentPageActionType = { type: typeof SET_CURRENT_PAGE, currentPage: number };\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n})\r\n\r\ntype SetTotalUsersActionType = { type: typeof SET_TOTAL_USERS_COUNT, totalUsersCount: number };\r\nexport const setTotalUsers = (totalUsers: number): SetTotalUsersActionType => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  totalUsersCount: totalUsers,\r\n})\r\n\r\ntype SetIsFetchingActionType = { type: typeof TOGGLE_IS_FETCHING, isFetching: boolean };\r\nexport const setIsFetching = (isFetching: boolean): SetIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = { type: typeof TOGGLE_IS_FOLLOWING_PROGRESS, isFetching: boolean, userId: number };\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n})\r\n\r\ntype setTermActionType = { type: typeof SET_TERM, term: string }\r\nexport const setTerm = (term: string): setTermActionType => ({\r\n  type: SET_TERM,\r\n  term,\r\n})\r\n\r\ntype toggleFollowedUserActionType = { type: typeof TOGGLE_IS_FOLLOWING_USER, following: boolean }\r\nexport const toggleFollowedUser = (following: boolean): toggleFollowedUserActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_USER,\r\n  following,\r\n})\r\n\r\n/* Thunk creators */\r\n// type GetStateType = () => AppStateType\r\n// type DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getRequestUsers = (pageSize: number, currentPage: number, term = ''): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(setIsFetching(true))\r\n    const response = await usersAPI.getUsers(pageSize, currentPage, term)\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsers(response.totalCount))\r\n    dispatch(setIsFetching(false))\r\n  }\r\n}\r\n\r\nexport const follow = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userID))\r\n    const response = await usersAPI.follow(userID)\r\n    if (response.resultCode === 0) {\r\n      dispatch(acceptFollow(userID))\r\n      dispatch(toggleFollowedUser(true))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userID))\r\n  }\r\n}\r\n\r\nexport const unfollow = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userID))\r\n    const response = await usersAPI.unfollow(userID)\r\n    if (response.resultCode === 0) {\r\n      dispatch(acceptUnfollow(userID))\r\n      dispatch(toggleFollowedUser(false))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userID))\r\n  }\r\n}\r\n\r\nexport const isFollowing = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await usersAPI.isFollowing(userID)\r\n    dispatch(toggleFollowedUser(response))\r\n  }\r\n}\r\n\r\nexport default usersReducer\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './store'\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\n// export const getUsersSelector__BadRender = (state: AppStateType) => {\r\n//   return getUsers(state).filter(() => true)\r\n// }\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(() => true)\r\n  },\r\n)\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\n","import React from 'react'\nimport styles from './Button.module.css'\n\ntype PropTypes = {\n  width?: number\n  onClick?: () => any\n  margin?: string\n  type?: any\n  disabled?: boolean\n  height?: string\n}\n\nconst Button: React.FC<PropTypes> = ({ width, children, onClick, margin, type, disabled, height }) => {\n  return (\n    <button\n      disabled={disabled}\n      type={type}\n      onClick={onClick}\n      style={{ width, margin, height }}\n      className={styles.button}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import React, { useState, ChangeEvent } from 'react'\r\nimport styles from './Search.module.css'\r\nimport Button from '../../../common/Button/Button'\r\n\r\ntype PropTypes = {\r\n  setTerm: (term: string) => void\r\n  setCurrentPage: (page: number) => void\r\n  setPortionNumber: (number: number) => void\r\n}\r\n\r\nconst Search = React.memo<PropTypes>(\r\n  ({ setTerm, setCurrentPage, setPortionNumber }) => {\r\n    const [inputText, setInputText] = useState('')\r\n\r\n    const onTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n      setInputText(event.target.value)\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n      setCurrentPage(1)\r\n      setTerm(inputText)\r\n      setPortionNumber(1)\r\n    }\r\n\r\n    const onReset = () => {\r\n      setCurrentPage(1)\r\n      setTerm('')\r\n      setInputText('')\r\n      setPortionNumber(1)\r\n    }\r\n\r\n    const searchButtonStyle = {\r\n      cursor: (inputText) ? 'pointer' : 'not-allowed'\r\n    }\r\n\r\n    return (\r\n      <div className={styles.div}>\r\n        <input placeholder=\"Поиск\" type=\"text\" onChange={onTextChange} className={styles.input} value={inputText}/>\r\n        <button\r\n          disabled={!inputText}\r\n          style={searchButtonStyle}\r\n          onClick={onButtonClick}\r\n          className={styles.button}>\r\n          Найти\r\n        </button>\r\n        <Button margin='0 0 0 10px' onClick={onReset}>Сброс</Button>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport styles from './PaginationItem.module.css'\r\n\r\ntype PropTypes = {\r\n  active: boolean\r\n  number: number\r\n}\r\n\r\nconst PaginationItem: React.FC<PropTypes> = ({ active, number }) => {\r\n  const activeStyle = active ? styles.paginationItemActive : ''\r\n\r\n  return (\r\n    <li className={styles.paginationItem + ' ' + activeStyle} data-number={number}>{number}</li>\r\n  )\r\n}\r\n\r\nexport default PaginationItem\r\n","import React, { useEffect } from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport PaginationItem from './PaginationItem/PaginationItem'\r\n\r\ntype PropTypes = {\r\n  currentPage: number\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  portionSize: number\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  term: string\r\n  setCurrentPage: (page: number) => void\r\n  portionNumber: number\r\n  setPortionNumber: (number: number) => void\r\n}\r\n\r\nconst Paginator = React.memo<PropTypes>(\r\n  ({ setCurrentPage, currentPage, totalUsersCount, pageSize, portionSize, getRequestUsers, term, portionNumber, setPortionNumber }) => {\r\n\r\n    useEffect(() => {\r\n      getRequestUsers(pageSize, currentPage, term)\r\n    }, [getRequestUsers, pageSize, currentPage, term])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n      getRequestUsers(pageSize, currentPage, term)\r\n      setCurrentPage(currentPage)\r\n    }\r\n\r\n    const pageCount = Math.ceil(totalUsersCount / pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i < totalUsersCount; i++) {\r\n      pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / portionSize)\r\n    const lastElemPageNumber = pageCount / portionSize * portionSize\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    const changePage = (event: any) => {\r\n      const pageNumber = +event.target.dataset.number\r\n\r\n      if (pageNumber) {\r\n        onPageChanged(pageNumber)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div onClick={changePage} className={styles.paginationItems}>\r\n        {\r\n          totalUsersCount > 0 &&\r\n          <button disabled={portionNumber === 1} className={styles.button}\r\n                  onClick={() => {setPortionNumber(portionNumber - 1)}}>Влево</button>\r\n        }\r\n        {\r\n          pages.filter(\r\n            (num) => (num >= leftPortionPageNumber && num <= rightPortionPageNumber && num <= lastElemPageNumber))\r\n            .map((num) => (\r\n              <PaginationItem key={num} number={num} active={+currentPage === num}/>\r\n            ))\r\n        }\r\n        {\r\n          totalUsersCount > 0 &&\r\n          <button disabled={portionCount === portionNumber} className={styles.button}\r\n                  onClick={() => {setPortionNumber(portionNumber + 1)}}>Вправо</button>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default Paginator\r\n","import React from 'react'\r\nimport styles from './User.module.css'\r\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UserType } from '../../../../../types/types'\r\n\r\ntype PropTypes = {\r\n  user: UserType\r\n  followButtonDisabled: boolean\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n}\r\n\r\nfunction User ({ user, followButtonDisabled, unfollow, follow }: PropTypes) {\r\n  return (\r\n    <li className={styles.user}>\r\n      <div className={styles.avatarBox}>\r\n        <NavLink to={`/profile/${user.id}`}>\r\n          <img src={user.photos.small || defaultAvatar} alt='avatar'/>\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={styles.info}>\r\n        <NavLink className={styles.userName} to={`/profile/${user.id}`}>{user.name}</NavLink>\r\n        {user.status && <span className={styles.userStatus}>{user.status}</span>}\r\n\r\n        {\r\n          user.followed ? (\r\n            <button\r\n              className={styles.followButton}\r\n              disabled={followButtonDisabled}\r\n              onClick={() => {unfollow(user.id)}}\r\n            >\r\n              Отписаться <span aria-label=\"Отписаться\" role=\"img\">❌</span>\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className={styles.followButton}\r\n              disabled={followButtonDisabled}\r\n              onClick={() => {follow(user.id)}}\r\n            >\r\n              Подписаться <span aria-label=\"Подписаться\" role=\"img\">✅</span>\r\n            </button>\r\n          )\r\n        }\r\n\r\n        <NavLink to={`/messages/${user.id}`} className={styles.sendMessage}>Написать сообщение</NavLink>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\nimport styles from './Preloader.module.css'\nimport preloader from '../../../assets/images/preloader.gif'\n\ntype PropTypes = {\n  fullscreen?: boolean\n}\n\nconst Preloader: React.FC<PropTypes> = ({ fullscreen = false }) => {\n  return (fullscreen) ? (\n    <div className={styles.wrapper}>\n      <div className={styles.preloader}>\n        <img className={styles.preloaderIMG} src={preloader} alt='load'/>\n      </div>\n    </div>\n  ) : (\n    <img className={styles.preloaderIMG} src={preloader} alt='load'/>\n  )\n}\n\nexport default Preloader\n","import React from 'react'\r\nimport styles from './UsersList.module.css'\r\nimport User from './User/User'\r\nimport { UserType } from '../../../../types/types'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\n\r\ntype PropTypes = {\r\n  users: Array<UserType>\r\n  followingInProgress: Array<number>\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  isFetching: boolean\r\n}\r\n\r\nconst UsersList = React.memo<PropTypes>(\r\n  ({ users, followingInProgress, follow, unfollow, isFetching }) => {\r\n\r\n    const usersOrMessage = (users.length) ?\r\n      users.map((user) => (\r\n        <User key={user.id}\r\n              user={user}\r\n              followButtonDisabled={followingInProgress.some(id => id === user.id)}\r\n              follow={follow}\r\n              unfollow={unfollow}\r\n        />\r\n      )) : 'Ничего не найдено'\r\n\r\n    return (\r\n      isFetching ? <Preloader/> :\r\n        <ul className={styles.users}>\r\n          {usersOrMessage}\r\n        </ul>\r\n    )\r\n\r\n  }\r\n)\r\n\r\nexport default UsersList\r\n","import { connect } from 'react-redux'\r\nimport {\r\n  getRequestUsers,\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n} from '../../../redux/users-reducer'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getTotalUsersCount,\r\n  getUsersSelector,\r\n} from '../../../redux/users-selectors'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { UserType } from '../../../types/types'\r\nimport { compose } from 'redux'\r\nimport Search from './Search/Search'\r\nimport Paginator from './Paginator/Paginator'\r\nimport UsersList from './UsersList/UsersList'\r\n\r\ntype MapStatePropTypes = {\r\n  currentPage: number\r\n  users: Array<UserType>\r\n  totalUsersCount: number\r\n  isFetching: boolean\r\n  followingInProgress: Array<number>\r\n  term: string\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  setCurrentPage: (page: number) => void\r\n  setIsFetching: (isFetching: boolean) => void\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  setTerm: (term: string) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nconst Users: React.FC<PropTypes> = ({\r\n  currentPage,\r\n  totalUsersCount,\r\n  isFetching,\r\n  users,\r\n  followingInProgress,\r\n  setCurrentPage,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n  getRequestUsers,\r\n  term,\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setCurrentPage(1)\r\n    }\r\n  }, [setCurrentPage])\r\n\r\n  const [portionNumber, setPortionNumber] = useState(1)\r\n\r\n  return (\r\n    <>\r\n      <h1>Пользователи</h1>\r\n      <Search\r\n        setTerm={setTerm}\r\n        setCurrentPage={setCurrentPage}\r\n        setPortionNumber={setPortionNumber}\r\n      />\r\n      <Paginator\r\n        totalUsersCount={totalUsersCount}\r\n        currentPage={currentPage}\r\n        pageSize={6}\r\n        portionSize={10}\r\n        getRequestUsers={getRequestUsers}\r\n        term={term}\r\n        setCurrentPage={setCurrentPage}\r\n        portionNumber={portionNumber}\r\n        setPortionNumber={setPortionNumber}\r\n      />\r\n      <UsersList\r\n        users={users}\r\n        followingInProgress={followingInProgress}\r\n        follow={follow}\r\n        unfollow={unfollow}\r\n        isFetching={isFetching}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\r\n  return {\r\n    users: getUsersSelector(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n    term: state.usersPage.term,\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\r\n    setCurrentPage,\r\n    setIsFetching,\r\n    getRequestUsers,\r\n    follow,\r\n    unfollow,\r\n    setTerm,\r\n  }),\r\n)(Users)\r\n","import React from 'react'\nimport styles from './News.module.css'\n\nfunction News () {\n  return (\n    <div className={styles.messages}>\n      Новости\n    </div>\n  )\n}\n\nexport default News\n","import React from 'react'\nimport styles from './Music.module.css'\n\nfunction Music () {\n  return (\n    <div className={styles.messages}>\n      Музыка\n    </div>\n  )\n}\n\nexport default Music\n","import React from 'react'\nimport styles from './Settings.module.css'\n\nfunction Settings () {\n  return (\n    <div className={styles.messages}>\n      Настройки\n    </div>\n  )\n}\n\nexport default Settings\n","export const required = (value: string) => {\r\n  if (!value) return 'Поле обязательное'\r\n}\r\n\r\nexport const maxLength = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Максимальная длина - ${length}`\r\n}\r\n","import { getAuthUserData, setMyProfile } from './auth-reducer'\r\nimport { profileAPI } from '../api/api'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\n\r\n/* Action types */\r\nconst INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes = InitializedSuccessType\r\n\r\nfunction initReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype InitializedSuccessType = { type: typeof INITIALIZED_SUCCESS };\r\nexport const initializedSuccess = (): InitializedSuccessType => ({\r\n  type: INITIALIZED_SUCCESS\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const initializeApp = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(getAuthUserData())\r\n      .then(() => {\r\n        dispatch(getMyProfile()).then(() => {\r\n          dispatch(initializedSuccess())\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const getMyProfile = (): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    const isAuth = getState().auth.isAuth\r\n    const userID = getState().auth.userId\r\n\r\n    if (isAuth && userID) {\r\n      const response = await profileAPI.getProfile(userID)\r\n      // @ts-ignore\r\n      dispatch(setMyProfile(response))\r\n    }\r\n  }\r\n}\r\n\r\nexport default initReducer\r\n","import { authAPI, profileAPI, securityAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType, ProfileType } from '../types/types'\r\nimport { getMyProfile } from './init-reducer'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\n\r\n/* Action types */\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\nconst SET_CAPTCHA_URL = 'samurai-network/auth/SET_CAPTCHA_URL'\r\nconst SET_MY_PROFILE = 'samurai-network/auth/SET_MY_PROFILE'\r\nconst SET_MY_PHOTO = 'samurai-network/auth/SET_MY_PHOTO'\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isFetching: false,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n  myProfile: null as ProfileType | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  SetAuthUserDataActionType |\r\n  GetCaptchaUrlSuccessType |\r\n  SetMyProfileType |\r\n  SetMyPhotoType\r\n\r\nfunction authReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n\r\n    case SET_CAPTCHA_URL:\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      }\r\n\r\n    case SET_MY_PROFILE:\r\n      return {\r\n        ...state,\r\n        myProfile: action.profile,\r\n      }\r\n\r\n    case SET_MY_PHOTO:\r\n      return {\r\n        ...state,\r\n        myProfile: {\r\n          ...state.myProfile,\r\n          photos: action.photos\r\n        } as ProfileType,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype SetAuthUserDataActionPayloadType = { userId: number | null, email: string | null, login: string | null, isAuth: boolean };\r\ntype SetAuthUserDataActionType = { type: typeof SET_USER_DATA, payload: SetAuthUserDataActionPayloadType };\r\nexport const setAuthUserData = (\r\n  userId: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n): SetAuthUserDataActionType => (\r\n  { type: SET_USER_DATA, payload: { userId, email, login, isAuth } }\r\n)\r\n\r\ntype GetCaptchaUrlSuccessType = { type: typeof SET_CAPTCHA_URL, captchaUrl: string };\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n  type: SET_CAPTCHA_URL,\r\n  captchaUrl: captchaUrl,\r\n})\r\n\r\ntype SetMyProfileType = { type: typeof SET_MY_PROFILE, profile: ProfileType }\r\nexport const setMyProfile = (profile: ProfileType): SetMyProfileType => ({\r\n  type: SET_MY_PROFILE,\r\n  profile,\r\n})\r\n\r\nexport type SetMyPhotoType = { type: typeof SET_MY_PHOTO, photos: PhotosType }\r\nexport const setMyPhoto = (photos: PhotosType): SetMyPhotoType => ({\r\n  type: SET_MY_PHOTO,\r\n  photos,\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const saveMyProfile = (profile: ProfileType): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updateProfile(profile)\r\n    if (response.resultCode === 0) {\r\n      await dispatch(setMyProfile(profile))\r\n    }\r\n    else {\r\n      // @ts-ignore\r\n      dispatch(stopSubmit('edit-profile', { _error: response.messages[0] }))\r\n      return Promise.reject()\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === 0) {\r\n      let { id, email, login } = meData.data\r\n      dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (data.resultCode === 0) {\r\n      dispatch(getAuthUserData()).then(() => {\r\n        dispatch(getMyProfile())\r\n      })\r\n    }\r\n    else {\r\n      // 10 - Captcha is required\r\n      if (data.resultCode === 10) {\r\n        await dispatch(getCaptchaUrl())\r\n      }\r\n\r\n      // @ts-ignore\r\n      dispatch(stopSubmit('login', { _error: data.messages[0] }))\r\n    }\r\n  }\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n\r\n    if (response.resultCode === 0) {\r\n      dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await securityAPI.getCaptcha()\r\n    const captchaUrl = response.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n  }\r\n}\r\n\r\nexport default authReducer\r\n","import React from 'react'\nimport styles from './Input.module.css'\n\ntype PropTypes = {\n  width?: number\n  margin?: string\n  placeholder: string\n  meta: any\n  input: any\n  type: string\n  id: string\n}\n\nconst Input: React.FC<PropTypes> = ({ width, margin, placeholder, meta, input, type, id }) => {\n  const isError = meta.error && meta.touched\n\n  return (\n    <span>\n      <input\n        {...input}\n        id={id}\n        type={type}\n        style={{ width, margin }}\n        className={styles.input}\n        placeholder={placeholder}\n      />\n      {isError && <span className={(isError || null) && styles.error}>{meta.error}</span>}\n    </span>\n  )\n}\n\nexport default Input\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required } from '../../../utils/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Input from '../../common/Input/Input'\r\nimport styles from './Login.module.css'\r\nimport Button from '../../common/Button/Button'\r\n\r\nfunction Login ({ login, isAuth, captchaUrl }) {\r\n  const onSubmit = (formData) => {\r\n    const { userLogin, password, rememberMe, captcha } = formData\r\n    login(userLogin, password, rememberMe, captcha)\r\n  }\r\n\r\n  const logTestAccount = () => {\r\n    login('free@samuraijs.com', 'free', true, '')\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to='/profile'/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Авторизация</h1>\r\n      <LoginReduxForm\r\n        initialValues={{ rememberMe: true }}\r\n        logTestAccount={logTestAccount}\r\n        captchaUrl={captchaUrl}\r\n        onSubmit={onSubmit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction LoginForm ({ handleSubmit, error, captchaUrl, logTestAccount }) {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      <div>\r\n        <label htmlFor='loginLogin'>Email</label>\r\n        <Field\r\n          width='250px'\r\n          type='text'\r\n          placeholder='Email'\r\n          name='userLogin'\r\n          component={Input}\r\n          validate={[required]}\r\n          id='loginLogin'\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor='loginPassword'>Пароль</label>\r\n        <Field\r\n          type='password'\r\n          placeholder='Пароль'\r\n          name='password'\r\n          component={Input}\r\n          validate={[required]}\r\n          width='250px'\r\n          id='loginPassword'\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Field type='checkbox' name='rememberMe' id='rememberMe' component={Input}/>\r\n        <label htmlFor='rememberMe'>Запомнить меня</label>\r\n      </div>\r\n\r\n      <div>\r\n        {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n        {\r\n          captchaUrl && (\r\n            <>\r\n              <label htmlFor='loginCaptcha'>Капча</label>\r\n              <Field\r\n                type='text'\r\n                placeholder='Капча'\r\n                name='captcha'\r\n                component={Input}\r\n                validate={[required]}\r\n                id='loginCaptcha'\r\n              />\r\n            </>\r\n          )\r\n        }\r\n      </div>\r\n\r\n      {error ? <div style={{ color: 'red' }}>{error}</div> : null}\r\n      <div>\r\n        <Button type='submit' width='100px'>Войти</Button>\r\n        <Button type='button' margin='0 0 0 10px' onClick={logTestAccount}>Войти под тестовым аккаунтом</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\n\r\nexport default connect((state) => ({\r\n  isAuth: state.auth.isAuth, captchaUrl: state.auth.captchaUrl\r\n}), { login })(Login)\r\n","import { profileAPI } from '../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nimport { PhotosType, PostType, ProfileType } from '../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { AppStateType } from './store'\r\nimport { setMyPhoto, SetMyPhotoType } from './auth-reducer'\r\n\r\n/* Action types */\r\nconst ADD_POST = 'samurai-network/profile/ADD_POST'\r\nconst SET_USER_PROFILE = 'samurai-network/profile/SET_USER_PROFILE'\r\nconst SET_STATUS = 'samurai-network/profile/SET_STATUS'\r\nconst SET_PROFILE_PHOTO = 'samurai-network/profile/SET_PROFILE_PHOTO'\r\nconst SET_AVATAR_FETCHING = 'samurai-network/profile/SET_AVATAR_FETCHING'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, text: 'Вам нравится React?', likes: 4 },\r\n    { id: 2, text: 'hey', likes: 2 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  avatarIsFetching: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  AddPostActionType |\r\n  SetUserProfileActionType |\r\n  SetStatusActionType |\r\n  setProfilePhotoActionType |\r\n  setAvatarIsFetchingActionType |\r\n  SetMyPhotoType\r\n\r\nfunction profileReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      const newPost = {\r\n        id: state.posts[state.posts.length - 1].id + 1,\r\n        text: action.text,\r\n        likes: 0,\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      }\r\n\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      }\r\n\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      }\r\n\r\n    case SET_PROFILE_PHOTO:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      }\r\n\r\n    case SET_AVATAR_FETCHING:\r\n      return {\r\n        ...state,\r\n        avatarIsFetching: action.isFetching\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AddPostActionType = { type: typeof ADD_POST, text: string }\r\nexport const addPost = (formData: { newPost: string }): AddPostActionType => ({\r\n  type: ADD_POST,\r\n  text: formData.newPost\r\n})\r\n\r\ntype SetUserProfileActionType = { type: typeof SET_USER_PROFILE, profile: ProfileType | null }\r\nexport const setUserProfile = (profile: ProfileType | null): SetUserProfileActionType => ({\r\n  type: SET_USER_PROFILE,\r\n  profile: profile\r\n})\r\n\r\ntype SetStatusActionType = { type: typeof SET_STATUS, status: string }\r\nexport const setStatus = (status: string): SetStatusActionType => ({\r\n  type: SET_STATUS,\r\n  status: status\r\n})\r\n\r\ntype setProfilePhotoActionType = { type: typeof SET_PROFILE_PHOTO, photos: PhotosType }\r\nexport const setProfilePhoto = (photos: PhotosType): setProfilePhotoActionType => ({\r\n  type: SET_PROFILE_PHOTO,\r\n  photos: photos\r\n})\r\n\r\ntype setAvatarIsFetchingActionType = { type: typeof SET_AVATAR_FETCHING, isFetching: boolean }\r\nexport const setAvatarIsFetching = (isFetching: boolean): setAvatarIsFetchingActionType => ({\r\n  type: SET_AVATAR_FETCHING,\r\n  isFetching\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getUsersProfile = (userID: number | null): ThunkType => {\r\n  return async (dispatch) => {\r\n    if (userID) {\r\n      dispatch(setUserProfile(null))\r\n      const response = await profileAPI.getProfile(userID)\r\n      dispatch(setUserProfile(response))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response))\r\n  }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.resultCode === 0) {\r\n      dispatch(setStatus(status))\r\n    }\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file: any): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updatePhoto(file)\r\n    if (response.resultCode === 0) {\r\n      dispatch(setProfilePhoto(response.data.photos))\r\n      dispatch(setMyPhoto(response.data.photos))\r\n      dispatch(setAvatarIsFetching(false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    const response = await profileAPI.updateProfile(profile)\r\n    if (response.resultCode === 0) {\r\n      await dispatch(getUsersProfile(getState().auth.userId))\r\n    }\r\n    else {\r\n      // @ts-ignore\r\n      dispatch(stopSubmit('edit-profile', { _error: response.messages[0] }))\r\n      return Promise.reject()\r\n    }\r\n  }\r\n}\r\n\r\nexport default profileReducer\r\n","import React from 'react'\nimport styles from './Post.module.css'\n\nfunction Post (props) {\n  return (\n    <div className={styles.post}>\n      <div>\n        <img className={styles.avatar} src='https://miro.medium.com/max/480/1*5LGjgBL2kWpog3AodB569A.jpeg' alt='' />\n      </div>\n      <div className={styles.message}>\n        <div>\n          {props.text}\n        </div>\n        <div>\n          {props.likes}♥\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport styles from './Textarea.module.css'\n\ntype PropTypes = {\n  placeholder?: string\n  rows?: number\n  cols?: number\n  meta?: any\n  input?: any\n  id?: string\n  style?: any\n  flexGrow?: boolean\n  value?: string\n  onChange?: any\n  onKeyDown?: any\n  bottom?: boolean\n}\n\nconst Textarea: React.FC<PropTypes> = ({\n  style, placeholder, rows = 1, cols, meta, input, id, flexGrow, value, onChange, onKeyDown, bottom\n}) => {\n  const isError = meta ? meta.error && meta.touched : null\n\n  return (\n    <span style={flexGrow ? { flexGrow: 1 } : undefined}>\n      <textarea\n        rows={rows}\n        cols={cols}\n        style={flexGrow ? Object.assign(style, { width: '100%', transform: bottom ? 'translateY(3px)' : null }) : style}\n        className={styles.textarea}\n        placeholder={placeholder}\n        id={id}\n        value={value}\n        onChange={onChange}\n        {...input}\n        onKeyDown={onKeyDown}\n      />\n      {isError && <span className={(isError || null) && styles.error}>{meta.error}</span>}\n    </span>\n  )\n}\n\nexport default Textarea\n","import React from 'react'\nimport styles from './Posts.module.css'\nimport Post from './Post/Post'\nimport { Field, reduxForm } from 'redux-form'\nimport { required, maxLength } from '../../../../utils/validators'\nimport Button from '../../../common/Button/Button'\nimport Textarea from '../../../common/Textarea/Textarea'\n\nconst maxLengthValidator = maxLength(10)\n\nfunction Posts (props) {\n  const postsElements = props.state.profilePage.posts.map(\n    post => <Post key={post.id} text={post.text} likes={post.likes}/>\n  ).reverse()\n\n  return (\n    <div className={styles.posts}>\n      <h2 className={styles.title}>Посты</h2>\n      <AddNewPostFormRedux onSubmit={(formData) => { props.addPost(formData) }}/>\n      <div className={styles.postsList}>\n        {postsElements}\n      </div>\n    </div>\n  )\n}\n\nconst AddNewPostFormRedux = reduxForm({ form: 'profileAddNewPost' })(AddNewPostForm)\n\nfunction AddNewPostForm (props) {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          className={styles.textarea}\n          name='newPost'\n          component={Textarea}\n          placeholder='Что у вас нового?'\n          validate={[required, maxLengthValidator]}\n          rows={2}\n          style={{ marginTop: '10px', width: '100%' }}\n        />\n      </div>\n      <div>\n        <Button margin='10px 0 0 0' className={styles.button}>Отправить</Button>\n      </div>\n    </form>\n  )\n}\n\nexport default Posts\n","import { addPost } from '../../../../redux/profile-reducer'\nimport Posts from './Posts'\nimport { connect } from 'react-redux'\n\nfunction mapStateToProps (state) {\n  return {\n    state: state\n  }\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    addPost (formData) {\n      dispatch(addPost(formData))\n    }\n  }\n}\n\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts)\n\nexport default PostsContainer\n","import React from 'react'\nimport styles from './Avatar.module.css'\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\nimport Preloader from '../../../../common/Preloader/Preloader'\nimport { NavLink } from 'react-router-dom'\nimport Button from '../../../../common/Button/Button'\n\nfunction Avatar ({\n  isOwner,\n  savePhoto,\n  profile,\n  setAvatarIsFetching,\n  avatarIsFetching,\n  follow,\n  unfollow,\n  followingInProgress,\n  isFollowingUser,\n  userURL,\n}) {\n  const uploadLabel = React.createRef()\n\n  function onUploadPhoto (e) {\n    if (e.target.files.length) {\n      const photo = e.target.files[0]\n      uploadLabel.current.textContent = photo.name\n      setAvatarIsFetching(true)\n      savePhoto(photo)\n    }\n  }\n\n  const followingFetching = followingInProgress.some((id) => (id === userURL))\n\n  const followUnfollow = () => {\n    if (isFollowingUser) {\n      unfollow(userURL)\n    }\n    else {\n      follow(userURL)\n    }\n  }\n\n  return (\n    <div className={styles.avatar}>\n      <div className={styles.avatarWrapper}>\n        {\n          avatarIsFetching ? <Preloader/> : (\n            <img\n              className={styles.avatarIMG}\n              src={profile.photos.large || defaultAvatar} alt='avatar'\n            />\n          )\n        }\n      </div>\n      {\n        isOwner &&\n        <div className={styles.upload}>\n          <input className={styles.uploadInput} onChange={onUploadPhoto} type='file' id='UserPhotoUpload'/>\n          <label\n            ref={uploadLabel}\n            className={styles.uploadLabel}\n            htmlFor='UserPhotoUpload'\n          >\n            Обновить фотографию\n          </label>\n        </div>\n      }\n      {\n        !isOwner && <NavLink className={styles.sendMessage} to={`/messages/${profile.userId}`}>\n          <Button width='100%'>Написать сообщение</Button>\n        </NavLink>\n      }\n      {\n        !isOwner && <Button margin='10px 0 0 0' disabled={followingFetching} width='100%' onClick={followUnfollow}>\n          {isFollowingUser ? 'Отписаться ❌' : 'Подписаться ✅'}\n        </Button>\n      }\n    </div>\n  )\n}\n\nexport default Avatar\n","import React, { useEffect, useState } from 'react'\nimport styles from './Status.module.css'\n\ntype PropTypes = {\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropTypes> = ({ status, updateStatus, isOwner }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [localStatus, setLocalStatus] = useState(status)\n\n  useEffect(() => {\n    setLocalStatus(status)\n  }, [status])\n\n  const activateEditMode = () => {setEditMode(true)}\n  const deactivateEditMode = () => {setEditMode(false)}\n\n  const onUpdateStatus = () => {\n    deactivateEditMode()\n    updateStatus(localStatus)\n  }\n\n  const onStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLocalStatus(event.currentTarget.value)\n  }\n\n  const selectInputText = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.currentTarget.select()\n  }\n\n  const statusClass = ((status) ? styles.statusExist : styles.statusNotExist) + ' ' + styles.status\n\n  return (\n    <div className={styles.statusBox}>\n      {\n        !editMode ? (\n          (isOwner && <button className={statusClass} onClick={activateEditMode}>{status || 'изменить статус'}</button>)\n          || <div className={styles.statusNotMe}>{status}</div>\n        ) : (\n          <input\n            autoFocus\n            onChange={onStatusChange}\n            onBlur={onUpdateStatus}\n            onFocus={selectInputText}\n            type=\"text\"\n            value={localStatus}\n            className={styles.statusInput}\n          />\n        )\n      }\n    </div>\n  )\n}\n\nexport default Status\n","import React from 'react'\r\nimport { required } from '../../../../../../utils/validators'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport Button from '../../../../../common/Button/Button'\r\nimport Input from '../../../../../common/Input/Input'\r\nimport Textarea from '../../../../../common/Textarea/Textarea'\r\nimport styles from './ProfileDataForm.module.css'\r\n\r\nfunction ProfileDataForm ({ handleSubmit, error, profile, setEditMode }) {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      {error && <div className={styles.error}>{error}</div>}\r\n\r\n      <h3>Основная информация</h3>\r\n\r\n      <div className={styles.aboutMe}>\r\n        <div>\r\n          <label htmlFor='dataFormName'>ФИО:</label>\r\n          <Field\r\n            type='text'\r\n            width='280px'\r\n            placeholder='Имя'\r\n            name='fullName'\r\n            component={Input}\r\n            validate={[required]}\r\n            id='dataFormName'\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor='dataFormWork'>Ищите работу:</label>\r\n          <Field type='checkbox' name='lookingForAJob' component={Input} id='dataFormWork'/>\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor='dataFormSkills'>Ваши навыки:</label>\r\n          <Field\r\n            rows={2}\r\n            name='lookingForAJobDescription'\r\n            component={Textarea}\r\n            validate={[required]}\r\n            id='dataFormSkills'\r\n            style={{ width: '280px' }}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor='dataFormAbout'>О Вас:</label>\r\n          <Field\r\n            rows={2}\r\n            style={{ width: '280px' }}\r\n            name='aboutMe'\r\n            component={Textarea}\r\n            validate={[required]}\r\n            id='dataFormAbout'\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <h3>Ваши контакты</h3>\r\n\r\n      <div className={styles.myContacts}>\r\n        {\r\n          Object.keys(profile.contacts).map(key => (\r\n            <div key={key}>\r\n              <label htmlFor={'dataForm' + key}>{key[0].toUpperCase() + key.slice(1)}:</label>\r\n              <Field\r\n                type='text'\r\n                width='280px'\r\n                name={'contacts.' + key}\r\n                component={Input}\r\n                id={'dataForm' + key}\r\n              />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n      <Button margin='15px 0 0 0'>Сохранить</Button>\r\n      <Button type='button' margin='15px 0 0 10px' onClick={() => {setEditMode(false)}}>Отмена</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n","import React from 'react'\nimport styles from './ProfileData.module.css'\n\nfunction ProfileData ({ profile }) {\n  const isContactsExists = Object.values(profile.contacts).some((contact) => (contact !== null))\n\n  return (\n    <dl className={styles.about}>\n      <div>\n        <dt>Ищу работу:</dt>\n        <dd> {profile.lookingForAJob ? 'да' : 'нет'}</dd>\n      </div>\n\n      <div>\n        <dt>Мои навыки:</dt>\n        <dd> {profile.lookingForAJobDescription || 'нету'}</dd>\n      </div>\n\n      <div>\n        <dt>Обо мне:</dt>\n        <dd> {profile.aboutMe || 'не заполнено'}</dd>\n      </div>\n\n      {isContactsExists && <hr/>}\n\n      {\n        isContactsExists && (\n          <div className={styles.contacts}>\n            <dt>Мои контакты:</dt>\n            <dd>\n              <dl className={styles.contactsList}>\n                {\n                  Object.entries(profile.contacts).map((contact) => {\n                    const key = contact[0]\n                    const value = contact[1]\n\n                    return (value) ? (\n                      <div key={key}>\n                        <dt>{key}:</dt>\n                        <dd>\n                          <a rel='noopener noreferrer' target='_blank' href={profile.contacts[key]}>\n                            {profile.contacts[key]}\n                          </a>\n                        </dd>\n                      </div>\n                    ) : null\n                  })\n                }\n              </dl>\n            </dd>\n          </div>\n        )\n      }\n    </dl>\n  )\n}\n\nexport default ProfileData\n","import React, { useState } from 'react'\nimport styles from './UserInfo.module.css'\nimport Status from './Status/Status'\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm'\nimport ProfileData from './ProfileData/ProfileData'\nimport Button from '../../../../common/Button/Button'\n\nfunction UserInfo ({ profile, status, isOwner, saveProfile, updateStatus }) {\n  const [editMode, setEditMode] = useState(false)\n\n  function onSubmit (formData) {\n    saveProfile(formData).then(() => {\n      setEditMode(false)\n    }).catch(() => {})\n  }\n\n  return (\n    <div className={styles.info}>\n      <div>\n        <h1 className={styles.userName}>{profile.fullName}</h1>\n        <Status status={status} updateStatus={updateStatus} isOwner={isOwner}/>\n\n        {(status || isOwner) && <hr/>}\n\n        {\n          editMode ?\n            <ProfileDataForm setEditMode={setEditMode} profile={profile} initialValues={profile} onSubmit={onSubmit}/> :\n            <ProfileData isOwner={isOwner} profile={profile}/>\n        }\n      </div>\n\n      {isOwner && !editMode && <div><Button onClick={() => { setEditMode(true) }}>Редактировать</Button></div>}\n    </div>\n  )\n}\n\nexport default UserInfo\n","import React from 'react'\nimport Preloader from '../../../common/Preloader/Preloader'\nimport Avatar from './Avatar/Avatar'\nimport UserInfo from './UserInfo/UserInfo'\n\nfunction User ({\n  profile,\n  savePhoto,\n  status,\n  updateStatus,\n  isOwner,\n  saveProfile,\n  avatarIsFetching,\n  setAvatarIsFetching,\n  follow,\n  unfollow,\n  followingInProgress,\n  isFollowingUser,\n  userURL,\n}) {\n\n  if (!profile) {\n    return <Preloader/>\n  }\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <Avatar\n        savePhoto={savePhoto}\n        profile={profile}\n        isOwner={isOwner}\n        avatarIsFetching={avatarIsFetching}\n        setAvatarIsFetching={setAvatarIsFetching}\n        follow={follow}\n        unfollow={unfollow}\n        followingInProgress={followingInProgress}\n        isFollowingUser={isFollowingUser}\n        userURL={userURL}\n      />\n\n      <UserInfo\n        status={status}\n        updateStatus={updateStatus}\n        saveProfile={saveProfile}\n        profile={profile}\n        isOwner={isOwner}\n      />\n    </div>\n  )\n}\n\nexport default User\n","import React, { useEffect } from 'react'\r\nimport {\r\n  getStatus,\r\n  getUsersProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus,\r\n  setAvatarIsFetching\r\n} from '../../../redux/profile-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\nimport { saveMyProfile } from '../../../redux/auth-reducer'\r\nimport { ProfileType } from '../../../types/types'\r\nimport PostsContainer from './Posts/PostsContainer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport User from './User/User'\r\nimport { follow, isFollowing, unfollow } from '../../../redux/users-reducer'\r\n\r\ntype MapStatePropTypes = {\r\n  userID: number | null\r\n  profile: ProfileType | null\r\n  status: string\r\n  avatarIsFetching: boolean\r\n  myProfile: ProfileType | null\r\n  isAuth: boolean\r\n  followingInProgress: Array<number>\r\n  isFollowingUser: boolean\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  getUsersProfile: (userID: number) => void\r\n  getStatus: (userID: number) => void\r\n  savePhoto: (photo: Blob) => void\r\n  updateStatus: (newStatus: string) => void\r\n  setAvatarIsFetching: (isFetching: boolean) => void\r\n  saveProfile: (profile: ProfileType) => void\r\n  saveMyProfile: (profile: ProfileType) => void\r\n  follow: (userID: number) => void\r\n  unfollow: (userID: number) => void\r\n  isFollowing: (userID: number) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nconst Profile: React.FC<PropTypes> = ({\r\n  savePhoto,\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  saveProfile,\r\n  userID,\r\n  getUsersProfile,\r\n  getStatus,\r\n  avatarIsFetching,\r\n  setAvatarIsFetching,\r\n  myProfile,\r\n  saveMyProfile,\r\n  isAuth,\r\n  follow,\r\n  unfollow,\r\n  followingInProgress,\r\n  isFollowing,\r\n  isFollowingUser,\r\n}) => {\r\n\r\n  const { userID: id } = useParams()\r\n\r\n  const userURL = (id) ? +id : userID\r\n  const isOwner = userID === userURL\r\n\r\n  useEffect(() => {\r\n    if (userURL) {\r\n      isFollowing(+userURL)\r\n    }\r\n  }, [userURL, isFollowing])\r\n\r\n  useEffect(() => {\r\n    const updateProfile = () => {\r\n      if (userURL) {\r\n        getUsersProfile(userURL)\r\n        getStatus(userURL)\r\n      }\r\n    }\r\n\r\n    updateProfile()\r\n  }, [userURL, getUsersProfile, getStatus])\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to='/login'/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <User\r\n        savePhoto={savePhoto}\r\n        profile={isOwner ? myProfile : profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        isOwner={isOwner}\r\n        saveProfile={isOwner ? saveMyProfile : saveProfile}\r\n        avatarIsFetching={avatarIsFetching}\r\n        setAvatarIsFetching={setAvatarIsFetching}\r\n        follow={follow}\r\n        unfollow={unfollow}\r\n        followingInProgress={followingInProgress}\r\n        isFollowingUser={isFollowingUser}\r\n        userURL={userURL}\r\n      />\r\n      <PostsContainer/>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userID: state.auth.userId,\r\n    avatarIsFetching: state.profilePage.avatarIsFetching,\r\n    myProfile: state.auth.myProfile,\r\n    isAuth: state.auth.isAuth,\r\n    followingInProgress: state.usersPage.followingInProgress,\r\n    isFollowingUser: state.usersPage.isFollowingUser,\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\r\n  getUsersProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n  setAvatarIsFetching,\r\n  saveMyProfile,\r\n  follow,\r\n  unfollow,\r\n  isFollowing,\r\n})(Profile)\r\n","import React, { useEffect, useState } from 'react'\nimport styles from './InterlocutorsListItem.module.css'\nimport { PhotosType } from '../../../../../../types/types'\nimport { NavLink } from 'react-router-dom'\nimport defaultAvatar from '../../../../../../assets/images/defaultAvatar.png'\n\ntype PropTypes = {\n  id: number\n  userName: string\n  hasNewMessages: boolean\n  lastDialogActivityDate: string\n  lastUserActivityDate: string\n  newMessagesCount: number\n  photos: PhotosType\n}\n\nconst InterlocutorsListItem: React.FC<PropTypes> = ({\n  id, userName, hasNewMessages, lastDialogActivityDate, lastUserActivityDate, newMessagesCount, photos\n}) => {\n  const [isToday, setIsToday] = useState(false)\n\n  useEffect(() => {\n    const now = new Date()\n    const tomorrow = now.setDate(now.getDate() + 1)\n    const yesterday = now.setDate(now.getDate() - 1)\n    const lastMessageDate = new Date(lastDialogActivityDate).getTime()\n\n    setIsToday(yesterday < lastMessageDate && lastMessageDate < tomorrow)\n  }, [lastDialogActivityDate])\n\n  return (\n    <li className={styles.li}>\n      <NavLink className={styles.a} to={`/messages/${id}`} activeClassName={styles.active}>\n        <img className={styles.avatar} src={photos.small || defaultAvatar} alt=\"avatar\"/>\n        <div className={styles.info}>\n          <div className={styles.infoMessage}>\n            <span className={styles.userName}>{userName}</span>\n            {hasNewMessages && <span>{newMessagesCount}<span role='img' aria-label='сообщение'>💬</span></span>}\n          </div>\n          <div className={styles.lastMessage}>\n            {\n              isToday ? new Date(lastDialogActivityDate).toLocaleTimeString().slice(0, 5) :\n                new Date(lastDialogActivityDate).toLocaleDateString()\n            }\n          </div>\n        </div>\n      </NavLink>\n    </li>\n  )\n}\n\nexport default InterlocutorsListItem\n","import React from 'react'\nimport styles from './InterlocutorsList.module.css'\nimport { InterlocutorType } from '../../../../../types/types'\nimport InterlocutorsListItem from './InterlocutorsListItem/InterlocutorsListItem'\n\ntype PropTypes = {\n  interlocutors: Array<InterlocutorType>\n}\n\nconst InterlocutorsList: React.FC<PropTypes> = ({ interlocutors }) => {\n  return (\n    <ul className={styles.ul}>\n      {\n        interlocutors.map((message) => (\n          <InterlocutorsListItem\n            key={message.id}\n            id={message.id}\n            userName={message.userName}\n            hasNewMessages={message.hasNewMessages}\n            lastDialogActivityDate={message.lastDialogActivityDate}\n            lastUserActivityDate={message.lastUserActivityDate}\n            newMessagesCount={message.newMessagesCount}\n            photos={message.photos}\n          />\n        ))\n      }\n    </ul>\n  )\n}\n\nexport default InterlocutorsList\n","import React from 'react'\nimport styles from './Interlocutors.module.css'\nimport { InterlocutorType } from '../../../../types/types'\nimport InterlocutorsList from './InterlocutorsList/InterlocutorsList'\nimport Preloader from '../../../common/Preloader/Preloader'\n\ntype PropTypes = {\n  interlocutors: Array<InterlocutorType> | null\n}\n\nconst Interlocutors: React.FC<PropTypes> = ({ interlocutors }) => {\n  return (\n    <div className={styles.wrapper}>\n      {\n        interlocutors ? <InterlocutorsList interlocutors={interlocutors}/> : <Preloader/>\n      }\n    </div>\n  )\n}\n\nexport default Interlocutors\n","import React from 'react'\nimport styles from './SelectInterlocutor.module.css'\n\nconst SelectInterlocutor: React.FC = () => {\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.elem}>\n        <div className={styles.messagesIMG}/>\n        <div>Пожалуйста, выберите собеседника</div>\n      </div>\n    </div>\n  )\n}\n\nexport default SelectInterlocutor\n","import React from 'react'\nimport styles from './InterlocutorInfo.module.css'\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\nimport { NavLink } from 'react-router-dom'\nimport { PhotosType } from '../../../../../types/types'\n\ntype PropTypes = {\n  interlocutor: {\n    id: number | null,\n    userName: string | null,\n    lastUserActivityDate: string | null\n    photos: PhotosType | null\n  }\n}\n\nconst InterlocutorInfo: React.FC<PropTypes> = ({ interlocutor }) => {\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.info}>\n        <NavLink to={`/profile/${interlocutor.id}`} className={styles.userName}>{interlocutor.userName}</NavLink>\n        {\n          interlocutor.lastUserActivityDate && (\n            <div className={styles.online}>\n              Был в сети - {new Date(interlocutor.lastUserActivityDate).toLocaleString()}\n            </div>\n          )\n        }\n      </div>\n      <NavLink to={`/profile/${interlocutor.id}`}>\n        <img className={styles.avatar}\n             src={interlocutor.photos?.small ? interlocutor.photos.small : defaultAvatar || defaultAvatar}\n             alt='avatar'/>\n      </NavLink>\n    </div>\n  )\n}\n\nexport default InterlocutorInfo\n","import React from 'react'\nimport styles from './DialogMessagesItem.module.css'\nimport { NavLink } from 'react-router-dom'\nimport defaultAvatar from '../../../../../../assets/images/defaultAvatar.png'\n\ntype PropTypes = {\n  messageID: string\n  message: string\n  translatedMessage: null\n  addedAt: string\n  senderID: number\n  senderName: string\n  recipientID: number\n  viewed: boolean\n  lastSenderID: number\n  interlocutorPhoto: string | null\n  myPhoto: string | null\n  myID: number | null\n  firstMessage: boolean\n}\n\nconst DialogMessagesItem: React.FC<PropTypes> = ({\n  messageID,\n  message,\n  translatedMessage,\n  addedAt,\n  senderID,\n  senderName,\n  recipientID,\n  viewed,\n  lastSenderID,\n  interlocutorPhoto,\n  myPhoto,\n  myID,\n  firstMessage,\n}) => {\n  const isNewSender = lastSenderID !== senderID\n  const iSender = senderID === myID\n  const senderPhoto = iSender ? myPhoto : interlocutorPhoto\n\n  return (\n    <div className={styles.wrapper} style={{ marginTop: isNewSender ? (firstMessage) ? '0' : '30px' : '15px' }}>\n      {\n        isNewSender && <>\n          <NavLink to={`/profile/${senderID}`}>\n            <img className={styles.avatar} src={senderPhoto || defaultAvatar} alt='avatar'/>\n          </NavLink>\n          <NavLink className={styles.aName} to={`/profile/${senderID}`}>\n            <span className={styles.name}>{senderName}</span>\n          </NavLink>\n          <span className={styles.time}>{new Date(addedAt).toLocaleTimeString().slice(0, 5)}</span>\n        </>\n      }\n\n      <div className={styles.message}>{message}</div>\n    </div>\n  )\n}\n\nexport default DialogMessagesItem\n","import React from 'react'\nimport styles from './DialogMessages.module.css'\nimport { DialogType } from '../../../../../types/types'\nimport DialogMessagesItem from './DialogMessagesItem/DialogMessagesItem'\nimport Preloader from '../../../../common/Preloader/Preloader'\n\ntype PropTypes = {\n  dialog: Array<DialogType> | null\n  interlocutorPhoto: string | null\n  myPhoto: string | null\n  myID: number | null\n  isFetching: boolean\n}\n\nconst DialogMessages: React.FC<PropTypes> = ({ dialog, myPhoto, interlocutorPhoto, myID, isFetching }) => {\n  const dialogMessagesItem = []\n  if (dialog) {\n    let lastSenderID = 0\n    for (let i = 0; i < dialog.length; i++) {\n      dialogMessagesItem.push(\n        <DialogMessagesItem\n          key={dialog[i].id}\n          messageID={dialog[i].id}\n          message={dialog[i].body}\n          translatedMessage={dialog[i].translatedBody}\n          addedAt={dialog[i].addedAt}\n          senderID={dialog[i].senderId}\n          senderName={dialog[i].senderName}\n          recipientID={dialog[i].recipientId}\n          viewed={dialog[i].viewed}\n          lastSenderID={lastSenderID}\n          interlocutorPhoto={interlocutorPhoto}\n          myPhoto={myPhoto}\n          myID={myID}\n          firstMessage={i === 0}\n        />\n      )\n      lastSenderID = dialog[i].senderId\n    }\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {\n        isFetching ? <Preloader/> : dialogMessagesItem ? dialogMessagesItem : <Preloader/>\n      }\n    </div>\n  )\n}\n\nexport default DialogMessages\n","import React, { useState } from 'react'\nimport styles from './DialogForm.module.css'\nimport Textarea from '../../../../common/Textarea/Textarea'\nimport Button from '../../../../common/Button/Button'\n\ntype PropTypes = {\n  sendMessage: (userID: number, message: string) => void\n  startChatting: (userID: number) => void\n  userID: number\n  sendMessageFetching: boolean\n}\n\nconst DialogForm: React.FC<PropTypes> = ({ sendMessage, startChatting, userID, sendMessageFetching }) => {\n  const [message, setMessage] = useState('')\n\n  const onSendMessage = () => {\n    sendMessage(userID, message)\n    setMessage('')\n  }\n\n  const onEnterMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (message.trim() && e.keyCode === 13) {\n      sendMessage(userID, message.trim())\n      setMessage('')\n      e.preventDefault()\n    }\n  }\n\n  const onChange = (e: React.FormEvent<HTMLTextAreaElement>) => {\n    setMessage(e.currentTarget.value)\n    e.currentTarget.style.height = 'auto'\n    e.currentTarget.style.height = e.currentTarget.scrollHeight + 'px'\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <Textarea\n        onChange={onChange}\n        value={message}\n        flexGrow\n        style={{ maxHeight: '200px', resize: 'none', minHeight: '40px' }}\n        placeholder='Напишите сообщение…'\n        onKeyDown={onEnterMessage}\n        bottom={true}\n      />\n      <Button height='40px' disabled={sendMessageFetching || !message.trim()} onClick={onSendMessage}\n              margin='0 0 0 20px'>\n        Отправить\n      </Button>\n    </div>\n  )\n}\n\nexport default DialogForm\n","import React, { useEffect, useState } from 'react'\nimport styles from './Dialog.module.css'\nimport { DialogType, InterlocutorType, PhotosType, ProfileType } from '../../../../types/types'\nimport SelectInterlocutor from './SelectIntercutor/SelectInterlocutor'\nimport InterlocutorInfo from './InterlocutorInfo/InterlocutorInfo'\nimport DialogMessages from './DialogMessages/DialogMessages'\nimport DialogForm from './DialogForm/DialogForm'\n\ntype PropTypes = {\n  currentDialog: Array<DialogType> | null\n  interlocutor: InterlocutorType | null\n  userID: number | null\n  myPhoto: string | null\n  myID: number | null\n  dialogFetching: boolean\n  newInterlocutor: ProfileType | null\n  sendMessage: (userID: number, message: string) => void\n  startChatting: (userID: number) => void\n  sendMessageFetching: boolean\n}\n\nconst Dialog: React.FC<PropTypes> = ({\n  currentDialog,\n  interlocutor,\n  userID,\n  myPhoto,\n  myID,\n  dialogFetching,\n  newInterlocutor,\n  sendMessage,\n  startChatting,\n  sendMessageFetching,\n}) => {\n  const [user, setUser] = useState({\n    id: null as number | null,\n    userName: null as string | null,\n    lastUserActivityDate: null as string | null,\n    photos: null as PhotosType | null\n  })\n\n  useEffect(() => {\n    if (!interlocutor && newInterlocutor) {\n      setUser({\n        id: newInterlocutor.userId,\n        userName: newInterlocutor.fullName,\n        lastUserActivityDate: null,\n        photos: newInterlocutor.photos\n      })\n    }\n    if ((interlocutor && !newInterlocutor) || (interlocutor && newInterlocutor)) {\n      setUser({\n        id: interlocutor.id,\n        userName: interlocutor.userName,\n        lastUserActivityDate: interlocutor.lastUserActivityDate,\n        photos: interlocutor.photos\n      })\n    }\n  }, [interlocutor, newInterlocutor])\n\n  if (!userID) {\n    return <SelectInterlocutor/>\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <InterlocutorInfo interlocutor={user}/>\n      <DialogMessages\n        myID={myID}\n        dialog={currentDialog}\n        interlocutorPhoto={user.photos ? user.photos.small : null}\n        myPhoto={myPhoto}\n        isFetching={dialogFetching}\n      />\n      <DialogForm\n        sendMessage={sendMessage}\n        startChatting={startChatting}\n        userID={userID}\n        sendMessageFetching={sendMessageFetching}\n      />\n    </div>\n  )\n}\n\nexport default Dialog\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../../redux/store'\nimport { InterlocutorType, DialogType, MessagesAfterDateType, ProfileType } from '../../../types/types'\nimport {\n  getInterlocutorsList,\n  getDialog,\n  getMessagesAfterDate,\n  startChatting,\n  sendMessage,\n  getNewInterlocutor\n} from '../../../redux/messages-reducer'\nimport { Redirect, useParams } from 'react-router-dom'\nimport Interlocutors from './Interlocutors/Interlocutors'\nimport Dialog from './Dialog/Dialog'\nimport styles from './Messages.module.css'\n\ntype MapStatePropTypes = {\n  interlocutors: Array<InterlocutorType> | null\n  newInterlocutor: ProfileType | null\n  currentDialog: Array<DialogType> | null\n  messagesAfterDate: Array<MessagesAfterDateType> | null\n\n  fetching: {\n    interlocutors: boolean\n    newInterlocutor: boolean\n    currentDialog: boolean\n    messagesAfterDate: boolean\n    sendMessage: boolean\n  }\n\n  isAuth: boolean\n  myProfile: ProfileType | null\n}\n\ntype MapDispatchPropTypes = {\n  startChatting: (userID: number) => void\n  getInterlocutorsList: () => any\n  getNewInterlocutor: (userID: number) => void\n  getDialog: (userID: number) => void\n  sendMessage: (userID: number, message: string) => void\n  getMessagesAfterDate: (userID: number, date: string) => void\n}\n\nconst Messages: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({\n  interlocutors,\n  newInterlocutor,\n  getNewInterlocutor,\n  currentDialog,\n  messagesAfterDate,\n  fetching,\n  startChatting,\n  getInterlocutorsList,\n  getDialog,\n  sendMessage,\n  getMessagesAfterDate,\n  isAuth,\n  myProfile,\n}) => {\n  const { userID } = useParams()\n  const [interlocutor, setInterlocutor] = useState<InterlocutorType | null>(null)\n\n  useEffect(() => {\n    getInterlocutorsList()\n  }, [getInterlocutorsList])\n\n  useEffect(() => {\n    if (userID) {\n      getNewInterlocutor(+userID)\n    }\n  }, [getNewInterlocutor, userID])\n\n  useEffect(() => {\n    if (userID) {\n      getDialog(+userID)\n    }\n  }, [getDialog, userID])\n\n  useEffect(() => {\n    if (userID && interlocutors) {\n      setInterlocutor(interlocutors.find((item) => item.id === +userID) || null)\n    }\n  }, [userID, interlocutors])\n\n  if (!isAuth) {\n    return <Redirect to='/login'/>\n  }\n\n  return (\n    <div className={styles.messages}>\n      <Interlocutors interlocutors={interlocutors}/>\n      <Dialog\n        userID={userID ? +userID : null}\n        interlocutor={interlocutor}\n        currentDialog={currentDialog}\n        myPhoto={myProfile ? myProfile.photos.small : null}\n        myID={myProfile ? myProfile.userId : null}\n        dialogFetching={fetching.currentDialog}\n        newInterlocutor={newInterlocutor}\n        sendMessage={sendMessage}\n        startChatting={startChatting}\n        sendMessageFetching={fetching.sendMessage}\n      />\n    </div>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    interlocutors: state.messagesPage.interlocutors,\n    newInterlocutor: state.messagesPage.newInterlocutor,\n    currentDialog: state.messagesPage.currentDialog,\n    messagesAfterDate: state.messagesPage.messagesAfterDate,\n    fetching: state.messagesPage.fetching,\n    isAuth: state.auth.isAuth,\n    myProfile: state.auth.myProfile,\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, AppStateType>(mapStateToProps, {\n  startChatting,\n  getInterlocutorsList,\n  getNewInterlocutor,\n  getDialog,\n  getMessagesAfterDate,\n  sendMessage\n})(Messages)\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport styles from './Main.module.css'\r\nimport Users from './Users/Users'\r\nimport News from './News/News'\r\nimport Music from './Music/Music'\r\nimport Settings from './Settings/Settings'\r\nimport Login from './Login/Login'\r\nimport Profile from './Profile/Profile'\r\nimport Messages from './Messages/Messages'\r\n\r\nfunction Main () {\r\n  return (\r\n    <div className={styles.content}>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\r\n        <Route path='/profile/:userID?' render={() => <Profile/>}/>\r\n        <Route path='/messages/:userID?' render={() => <Messages/>}/>\r\n        <Route path='/users' render={() => <Users/>}/>\r\n        <Route path='/news' component={News}/>\r\n        <Route path='/music' component={Music}/>\r\n        <Route path='/settings' component={Settings}/>\r\n        <Route path='/login' render={() => <Login/>}/>\r\n        <Route path='*' render={() => '404'}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport { logout } from '../../redux/auth-reducer'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/store'\nimport styles from './Header.module.css'\nimport Button from '../common/Button/Button'\nimport { NavLink } from 'react-router-dom'\nimport { ProfileType } from '../../types/types'\n\ntype MapStatePropTypes = {\n  isAuth: boolean\n  myProfile: ProfileType | null\n}\n\ntype MapDispatchPropTypes = {\n  logout: () => void\n}\n\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\n\nconst Header: React.FC<PropTypes> = ({ isAuth, logout, myProfile }) => {\n  return (\n    <header className={styles.header}>\n      <div className={styles.container}>\n        <div className={styles.title}>Samurai Network</div>\n        {\n          isAuth && myProfile && myProfile.photos.small ? (\n              <div className={styles.infoMe}>\n                <NavLink to='/profile' className={styles.userName}>\n                  <span>\n                    {myProfile.fullName.split(' ')[0]}\n                  </span>\n                </NavLink>\n                <NavLink to='/profile' className={styles.avatar}>\n                  <img src={myProfile.photos.small} alt='avatar'/>\n                </NavLink>\n                <Button onClick={logout}>Выйти</Button>\n              </div>\n            )\n            : (\n              <NavLink to='/login' className={styles.login}>\n                <Button>Авторизоваться</Button>\n              </NavLink>\n            )\n        }\n      </div>\n    </header>\n  )\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropTypes => ({\n  isAuth: state.auth.isAuth,\n  myProfile: state.auth.myProfile\n})\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>(mapStateToProps, {\n  logout,\n})(Header)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport styles from './App.module.css'\nimport Footer from './Footer/Footer'\nimport Sidebar from './Sidebar/Sidebar'\nimport Main from './Main/Main'\nimport Header from './Header/Header'\nimport { initializeApp } from '../redux/init-reducer'\nimport { AppStateType } from '../redux/store'\nimport { HashRouter } from 'react-router-dom'\nimport Preloader from './common/Preloader/Preloader'\n\ntype MapStatePropTypes = {\n  initialized: boolean\n}\n\ntype MapDispatchPropTypes = {\n  initializeApp: () => void\n}\n\nconst App: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({ initializeApp, initialized }) => {\n  useEffect(() => {\n    initializeApp()\n  }, [initializeApp])\n\n  if (!initialized) {\n    return <Preloader fullscreen/>\n  }\n\n  return (\n    <HashRouter>\n      <div className={styles.page}>\n        <Header/>\n        <main className={styles.main}>\n          <Sidebar/>\n          <Main/>\n        </main>\n        <Footer/>\n      </div>\n    </HashRouter>\n  )\n}\n\nfunction mapStateToProps (state: AppStateType): MapStatePropTypes {\n  return {\n    initialized: state.init.initialized\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, AppStateType>(\n  mapStateToProps, { initializeApp }\n)(App)\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport messagesReducer from './messages-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport initReducer from './init-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  messagesPage: messagesReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  init: initReducer,\r\n  form: formReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n// @ts-ignore\r\nexport default store\r\n","import * as serviceWorker from './serviceWorker'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__212y-\",\"avatarIMG\":\"Avatar_avatarIMG__1-LTa\",\"upload\":\"Avatar_upload__3w34x\",\"uploadInput\":\"Avatar_uploadInput__3u7cW\",\"uploadLabel\":\"Avatar_uploadLabel__2Exb6\",\"sendMessage\":\"Avatar_sendMessage__261Dv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2CR8J\",\"container\":\"Header_container__HDvgl\",\"userName\":\"Header_userName__3dpGW\",\"avatar\":\"Header_avatar__34Ghc\",\"infoMe\":\"Header_infoMe__UMQTd\",\"title\":\"Header_title__1NDT_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusBox\":\"Status_statusBox__3qS3R\",\"status\":\"Status_status__1ZDrO\",\"statusNotExist\":\"Status_statusNotExist__2Ayt_\",\"statusExist\":\"Status_statusExist__2EA9K\",\"statusInput\":\"Status_statusInput__2o4UG\",\"statusNotMe\":\"Status_statusNotMe__22woT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DialogMessagesItem_wrapper__D7RSz\",\"avatar\":\"DialogMessagesItem_avatar__kICSw\",\"name\":\"DialogMessagesItem_name__5Xel9\",\"time\":\"DialogMessagesItem_time__1OJ-S\",\"aName\":\"DialogMessagesItem_aName__q09QC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__epRJ6\",\"title\":\"Posts_title__3oTfI\",\"textarea\":\"Posts_textarea__1CXXA\",\"button\":\"Posts_button__3XZT1\",\"postsList\":\"Posts_postsList__3exEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InterlocutorInfo_wrapper__1YcGt\",\"info\":\"InterlocutorInfo_info__11Ihl\",\"avatar\":\"InterlocutorInfo_avatar__1YtOI\",\"userName\":\"InterlocutorInfo_userName__2BFJg\",\"online\":\"InterlocutorInfo_online__2G9Er\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderIMG\":\"Preloader_preloaderIMG__BZHNf\",\"wrapper\":\"Preloader_wrapper__1pJ8g\",\"preloader\":\"Preloader_preloader__oGcz1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileDataForm_form__2KiwA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Search_div__2HjV8\",\"input\":\"Search_input__1SF7g\",\"button\":\"Search_button__tmFR-\",\"reset\":\"Search_reset__2G7ng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItems\":\"Paginator_paginationItems__2iECZ\",\"button\":\"Paginator_button__1_Jp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__lASZN\",\"avatar\":\"Post_avatar__3eC36\",\"message\":\"Post_message__3tS2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ProfileData_contactsList__ZEb2E\",\"about\":\"ProfileData_about__2NVys\",\"contacts\":\"ProfileData_contacts__KLq0S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SelectInterlocutor_wrapper__1dg4h\",\"elem\":\"SelectInterlocutor_elem__QCwpf\",\"messagesIMG\":\"SelectInterlocutor_messagesIMG__eC6TV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__4Klr-\",\"main\":\"App_main__1nCkj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItem\":\"PaginationItem_paginationItem__1EdWb\",\"paginationItemActive\":\"PaginationItem_paginationItemActive__1EfE6\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.584b607f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3Rg3-\",\"error\":\"Input_error__36SvP\"};"],"sourceRoot":""}