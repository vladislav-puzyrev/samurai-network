{"version":3,"sources":["components/Main/Profile/User/UserInfo/UserInfo.module.css","components/Sidebar/Menu/Menu.module.css","components/Footer/Footer.module.css","components/Sidebar/Sidebar.module.css","components/Main/Main.module.css","components/common/Button/Button.module.css","components/Main/Users/UsersList/UsersList.module.css","assets/images/preloader.gif","components/Main/Login/Login.module.css","components/Main/Messages/Interlocutors/Interlocutors.module.css","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsList.module.css","components/Main/Messages/Dialog/Dialog.module.css","components/Main/Messages/Dialog/DialogMessages/DialogMessages.module.css","components/Main/Messages/Dialog/DialogForm/DialogForm.module.css","components/Main/Messages/Messages.module.css","assets/images/defaultAvatar.png","components/Main/Profile/User/UserInfo/ProfileDataForm/ProfileDataForm.module.css","components/Main/Users/UsersList/User/User.module.css","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsListItem/InterlocutorsListItem.module.css","serviceWorker.ts","components/Footer/Footer.tsx","components/Sidebar/Menu/Menu.tsx","api/api.ts","redux/messages-reducer.ts","components/Sidebar/Sidebar.tsx","redux/users-reducer.ts","redux/users-selectors.ts","components/common/Button/Button.tsx","components/Main/Users/Search/Search.tsx","components/Main/Users/Paginator/PaginationItem/PaginationItem.tsx","components/Main/Users/Paginator/Paginator.tsx","components/Main/Users/UsersList/User/User.tsx","components/common/Preloader/Preloader.tsx","components/Main/Users/UsersList/UsersList.tsx","components/Main/Users/Users.tsx","components/Main/News/News.tsx","components/Main/Music/Music.tsx","components/Main/Settings/Settings.tsx","utils/validators.ts","redux/init-reducer.ts","redux/auth-reducer.ts","components/common/Input/Input.tsx","components/Main/Login/Login.tsx","redux/profile-reducer.ts","components/Main/Profile/Posts/Post/Post.tsx","components/common/Textarea/Textarea.tsx","components/Main/Profile/Posts/Posts.tsx","components/Main/Profile/User/Avatar/Avatar.tsx","components/Main/Profile/User/UserInfo/Status/Status.tsx","components/Main/Profile/User/UserInfo/ProfileDataForm/ProfileDataForm.tsx","components/Main/Profile/User/UserInfo/ProfileData/ProfileData.tsx","components/Main/Profile/User/UserInfo/UserInfo.tsx","components/Main/Profile/User/User.tsx","components/Main/Profile/Profile.tsx","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsListItem/InterlocutorsListItem.tsx","components/Main/Messages/Interlocutors/InterlocutorsList/InterlocutorsList.tsx","components/Main/Messages/Interlocutors/Interlocutors.tsx","components/Main/Messages/Dialog/SelectIntercutor/SelectInterlocutor.tsx","components/Main/Messages/Dialog/InterlocutorInfo/InterlocutorInfo.tsx","components/Main/Messages/Dialog/DialogMessages/DialogMessagesItem/DialogMessagesItem.tsx","components/Main/Messages/Dialog/DialogMessages/DialogMessages.tsx","components/Main/Messages/Dialog/DialogForm/DialogForm.tsx","components/Main/Messages/Dialog/Dialog.tsx","components/Main/Messages/Messages.tsx","components/Main/Main.tsx","components/Header/Header.tsx","components/App.tsx","redux/store.ts","index.tsx","components/Main/Profile/User/Avatar/Avatar.module.css","components/Header/Header.module.css","components/Main/Profile/User/UserInfo/Status/Status.module.css","components/Main/Messages/Dialog/DialogMessages/DialogMessagesItem/DialogMessagesItem.module.css","components/Main/Messages/Dialog/InterlocutorInfo/InterlocutorInfo.module.css","components/Main/Profile/Posts/Posts.module.css","components/App.module.css","components/Main/Users/Search/Search.module.css","components/Main/Users/Paginator/Paginator.module.css","components/Main/Profile/Posts/Post/Post.module.css","components/common/Textarea/Textarea.module.css","components/Main/Profile/User/UserInfo/ProfileData/ProfileData.module.css","components/Main/Messages/Dialog/SelectIntercutor/SelectInterlocutor.module.css","components/Main/Users/Paginator/PaginationItem/PaginationItem.module.css","components/common/Preloader/Preloader.module.css","components/common/Input/Input.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Footer","className","styles","footer","React","memo","newMessagesCount","menu","menuItem","exact","to","menuLink","activeClassName","active","server","axios","create","withCredentials","baseURL","headers","usersAPI","count","page","term","get","res","data","userID","post","delete","profileAPI","status","put","photoFile","formData","FormData","append","profile","authAPI","email","password","rememberMe","captcha","securityAPI","messagesAPI","message","body","date","SET_INTERLOCUTORS","SET_NEW_INTERLOCUTOR","SET_CURRENT_DIALOG","SET_MESSAGES_AFTER_DATE","SET_NEW_MESSAGES_COUNT","TOGGLE_IS_FETCHING","initialState","interlocutors","newInterlocutor","currentDialog","messagesAfterDate","fetching","sendMessage","toggleIsFetching","property","isFetching","type","getInterlocutors","dispatch","a","async","messages","getDialog","error","items","messagesReducer","state","action","connect","isAuth","auth","newMessagesCountFetching","getNewMessagesCount","timerID","useRef","useEffect","current","setInterval","clearInterval","aside","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SET_TERM","TOGGLE_IS_FOLLOWING_PROGRESS","TOGGLE_IS_FOLLOWING_USER","users","totalUsersCount","currentPage","followingInProgress","isFollowingUser","setUsers","setTotalUsers","totalUsers","setIsFetching","toggleFollowingProgress","userId","toggleFollowedUser","following","follow","resultCode","id","unfollow","usersReducer","map","user","followed","filter","getUsersSelector","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","Button","children","onClick","disabled","style","button","Search","setTerm","setCurrentPage","setPortionNumber","useState","inputText","setInputText","searchButtonStyle","cursor","div","placeholder","onChange","event","target","value","input","marginLeft","PaginationItem","number","activeStyle","paginationItemActive","paginationItem","data-number","Paginator","pageSize","portionSize","getRequestUsers","portionNumber","pageCount","Math","ceil","pages","i","push","portionCount","lastElemPageNumber","leftPortionPageNumber","rightPortionPageNumber","pageNumber","dataset","onPageChanged","paginationItems","num","key","User","followButtonDisabled","console","log","avatarBox","src","photos","small","defaultAvatar","alt","info","userName","name","userStatus","followButton","aria-label","role","Preloader","stretch","preloaderStretch","preloaderIMG","preloader","UsersList","usersOrMessage","length","some","response","totalCount","News","Music","Settings","required","INITIALIZED_SUCCESS","initialized","getMyProfile","getState","setMyProfile","initReducer","SET_USER_DATA","SET_CAPTCHA_URL","SET_MY_PROFILE","SET_MY_PHOTO","login","captchaUrl","myProfile","setAuthUserData","payload","getCaptchaUrlSuccess","setMyPhoto","getAuthUserData","meData","getCaptchaUrl","url","authReducer","Input","meta","isError","touched","checkBoxStyle","width","Object","assign","LoginReduxForm","reduxForm","form","handleSubmit","logTestAccount","onSubmit","htmlFor","Field","component","validate","color","then","stopSubmit","_error","initialValues","userLogin","ADD_POST","SET_USER_PROFILE","SET_STATUS","SET_PROFILE_PHOTO","SET_AVATAR_FETCHING","posts","text","likes","avatarIsFetching","setUserProfile","setStatus","setAvatarIsFetching","getUsersProfile","profileReducer","newPost","Post","props","avatar","Textarea","rows","cols","onKeyDown","spanStyle","span","textarea","maxLengthValidator","AddNewPostFormRedux","marginTop","addPost","postsElements","reverse","title","postsList","isOwner","savePhoto","userURL","uploadLabel","followingFetching","avatarWrapper","avatarIMG","large","upload","uploadInput","e","photo","files","textContent","ref","updateStatus","editMode","setEditMode","localStatus","setLocalStatus","statusClass","statusExist","statusNotExist","statusBox","autoFocus","currentTarget","onBlur","onFocus","select","statusInput","statusNotMe","aboutMe","labelWrapper","myContacts","keys","contacts","toUpperCase","slice","buttons","isContactsExists","values","contact","about","lookingForAJob","lookingForAJobDescription","contactsList","entries","rel","href","saveProfile","fullName","display","getStatus","file","Promise","reject","saveMyProfile","isFollowing","useParams","InterlocutorsListItem","hasNewMessages","lastDialogActivityDate","lastUserActivityDate","isToday","setIsToday","now","Date","tomorrow","setDate","getDate","yesterday","lastMessageDate","getTime","li","infoMessage","lastMessage","toLocaleTimeString","toLocaleDateString","InterlocutorsList","ul","wrapper","SelectInterlocutor","elem","messagesIMG","interlocutor","online","toLocaleString","DialogMessagesItem","messageID","addedAt","translatedMessage","senderID","senderName","lastSenderID","recipientID","viewed","interlocutorPhoto","myPhoto","myID","firstMessage","isNewSender","senderPhoto","aName","time","dialog","dialogMessagesItem","translatedBody","senderId","recipientId","startChatting","sendMessageFetching","setMessage","height","scrollHeight","maxHeight","resize","minHeight","flexGrow","trim","keyCode","preventDefault","dialogFetching","setUser","getNewInterlocutor","getMessagesAfterDate","extraArgument","resolve","setInterlocutor","find","item","Main","content","path","render","logout","header","container","infoMe","split","init","initializeApp","main","rootReducer","combineReducers","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7d43b109.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__zWzay\",\"userName\":\"UserInfo_userName__2HoIC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__27qdF\",\"menuLink\":\"Menu_menuLink__EHAtu\",\"active\":\"Menu_active__2D1vX\",\"messagesCount\":\"Menu_messagesCount__Gcpgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3hmYT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aside\":\"Sidebar_aside__1e2NK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Main_content__2h5Jj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__OZeNM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"UsersList_users__WQVOf\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.584b607f.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__3z_ct\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Interlocutors_wrapper__2zA-0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InterlocutorsList_wrapper__15THU\",\"ul\":\"InterlocutorsList_ul__3JB43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialog_wrapper__111U0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DialogMessages_wrapper__2CNKp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DialogForm_wrapper__1YYQn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__sE-hE\"};","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.b4b85090.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ProfileDataForm_form__2KiwA\",\"labelWrapper\":\"ProfileDataForm_labelWrapper__1JZeC\",\"buttons\":\"ProfileDataForm_buttons__QBzRg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3Qdic\",\"avatarBox\":\"User_avatarBox__dLefj\",\"info\":\"User_info__3dI-o\",\"userName\":\"User_userName__1AQPc\",\"followButton\":\"User_followButton__y-S0x\",\"sendMessage\":\"User_sendMessage__39BmE\",\"userStatus\":\"User_userStatus__1tTcC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InterlocutorsListItem_wrapper__1IgFZ\",\"userName\":\"InterlocutorsListItem_userName__1P_t4\",\"li\":\"InterlocutorsListItem_li__1DLA-\",\"a\":\"InterlocutorsListItem_a__Eytt8\",\"active\":\"InterlocutorsListItem_active__3BK1D\",\"avatar\":\"InterlocutorsListItem_avatar__3l5eU\",\"info\":\"InterlocutorsListItem_info__2OczL\",\"infoMessage\":\"InterlocutorsListItem_infoMessage__GcUxi\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      }\n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            }\n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Main is cached for offline use.\" message.\n              console.log('Main is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      }\n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport styles from './Footer.module.css'\n\nfunction Footer () {\n  return (\n    <footer className={styles.footer}>\n      samurai-network\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styles from './Menu.module.css'\n\ntype PropTypes = {\n  newMessagesCount: number\n}\n\nconst Menu: React.FC<PropTypes> = ({ newMessagesCount }) => {\n  return (\n    <ul className={styles.menu}>\n      <li className={styles.menuItem}>\n        <NavLink\n          exact to='/profile' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Моя страница\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/messages' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Сообщения {newMessagesCount > 0 && `(${newMessagesCount})`}\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/users' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Пользователи\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/news' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Новости\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/music' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Музыка\n        </NavLink>\n      </li>\n      <li className={styles.menuItem}>\n        <NavLink\n          to='/settings' className={styles.menuLink}\n          activeClassName={styles.active}\n        >\n          Настройки\n        </NavLink>\n      </li>\n    </ul>\n  )\n}\n\nexport default React.memo(Menu)\n","import axios from 'axios'\r\nimport {\r\n  IUsers,\r\n  IOperationData,\r\n  IUpdatePhoto,\r\n  IMe,\r\n  ILogin,\r\n  ICaptcha,\r\n  IInterlocutor,\r\n  IDialogs,\r\n  ISendMessage,\r\n  IMessagesAfterDate,\r\n  IProfile\r\n} from '../types/types'\r\n\r\nconst server = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    // ca3b0eb4-4af6-4803-8caa-f7d26464a12c main\r\n    // a7da6dad-5c4f-417c-a0d9-8d30ee0d96ec secondary\r\n    'API-KEY': 'ca3b0eb4-4af6-4803-8caa-f7d26464a12c',\r\n  }\r\n})\r\n\r\nexport const usersAPI = {\r\n  async getUsers (count: number, page: number, term = '') {\r\n    const res = await server.get<IUsers>(`users?count=${count}&page=${page}&term=${term}`)\r\n    return res.data\r\n  },\r\n  async isFollowing (userID: number) {\r\n    const res = await server.get<boolean>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async follow (userID: number) {\r\n    const res = await server.post<IOperationData>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n  async unfollow (userID: number) {\r\n    const res = await server.delete<IOperationData>(`follow/${userID}`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const profileAPI = {\r\n  async getProfile (userID: number) {\r\n    const res = await server.get<IProfile>(`profile/${userID}`)\r\n    return res.data\r\n  },\r\n  async getStatus (userID: number) {\r\n    const res = await server.get<string>(`profile/status/${userID}`)\r\n    return res.data\r\n  },\r\n  async updateStatus (status: string) {\r\n    const res = await server.put<IOperationData>(`profile/status`, { status: status })\r\n    return res.data\r\n  },\r\n  async updatePhoto (photoFile: File) {\r\n    const formData = new FormData()\r\n    formData.append(`image`, photoFile)\r\n\r\n    const res = await server.put<IUpdatePhoto>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type':\r\n          'multipart/form-data'\r\n      }\r\n    })\r\n\r\n    return res.data\r\n  },\r\n  async updateProfile (profile: IProfile) {\r\n    const res = await server.put<IOperationData>(`profile`, profile)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  async me () {\r\n    const res = await server.get<IMe>(`auth/me`)\r\n    return res.data\r\n  },\r\n  async login (email: string, password: string, rememberMe = true, captcha: string) {\r\n    const res = await server.post<ILogin>(`auth/login`, { email, password, rememberMe, captcha })\r\n    return res.data\r\n  },\r\n  async logout () {\r\n    const res = await server.post<IOperationData>(`auth/logout`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const securityAPI = {\r\n  async getCaptcha () {\r\n    const res = await server.get<ICaptcha>(`security/get-captcha-url`)\r\n    return res.data\r\n  },\r\n}\r\n\r\nexport const messagesAPI = {\r\n  async startChatting (userID: number) {\r\n    const res = await server.put<IOperationData>(`dialogs/${userID}`)\r\n    return res.data\r\n  },\r\n  async getInterlocutors () {\r\n    const res = await server.get<Array<IInterlocutor>>(`dialogs`)\r\n    return res.data\r\n  },\r\n  async getDialog (userID: number) {\r\n    const res = await server.get<IDialogs>(`dialogs/${userID}/messages`)\r\n    return res.data\r\n  },\r\n  async sendMessage (userID: number, message: string) {\r\n    const res = await server.post<ISendMessage>(`dialogs/${userID}/messages`, { body: message })\r\n    return res.data\r\n  },\r\n  async readMessage (messageID: string) {\r\n    const res = await server.get<boolean>(`dialogs/messages/${messageID}/viewed`)\r\n    return res.data\r\n  },\r\n  async putMessageInSpam (messageID: string) {\r\n    const res = await server.post<IOperationData>(`dialogs/messages/${messageID}/spam`)\r\n    return res.data\r\n  },\r\n  async deleteMessage (messageID: string) {\r\n    const res = await server.delete<IOperationData>(`dialogs/messages/${messageID}`)\r\n    return res.data\r\n  },\r\n  async restoreMessage (messageID: string) {\r\n    const res = await server.put<IOperationData>(`dialogs/messages/${messageID}/restore`)\r\n    return res.data\r\n  },\r\n  async getMessagesAfterDate (userID: number, date: string) {\r\n    const res = await server.get<Array<IMessagesAfterDate>>(\r\n      `dialogs/${userID}/messages/new?newerThen=${date}`\r\n    )\r\n    return res.data\r\n  },\r\n  async getNewMessagesCount () {\r\n    const res = await server.get<number>(`dialogs/messages/new/count`)\r\n    return res.data\r\n  },\r\n}\r\n","import { IInterlocutor, IDialog, IMessagesAfterDate, IProfile } from '../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { RootReducerType } from './store'\r\nimport { messagesAPI, profileAPI } from '../api/api'\r\n\r\n/* Action types */\r\nconst SET_INTERLOCUTORS = 'samurai-network/messages/SET_INTERLOCUTORS'\r\nconst SET_NEW_INTERLOCUTOR = 'samurai-network/messages/SET_NEW_INTERLOCUTOR'\r\nconst SET_CURRENT_DIALOG = 'samurai-network/messages/SET_CURRENT_DIALOG'\r\nconst SET_MESSAGES_AFTER_DATE = 'samurai-network/messages/SET_MESSAGES_AFTER_DATE'\r\nconst SET_NEW_MESSAGES_COUNT = 'samurai-network/messages/SET_NEW_MESSAGES_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/messages/TOGGLE_IS_FETCHING'\r\n\r\nconst initialState = {\r\n  interlocutors: null as Array<IInterlocutor> | null,\r\n  newInterlocutor: null as IProfile | null,\r\n  currentDialog: null as Array<IDialog> | null,\r\n  messagesAfterDate: null as Array<IMessagesAfterDate> | null,\r\n  newMessagesCount: 0,\r\n\r\n  fetching: {\r\n    interlocutors: false,\r\n    newInterlocutor: false,\r\n    currentDialog: false,\r\n    messagesAfterDate: false,\r\n    newMessagesCount: false,\r\n    sendMessage: false,\r\n  },\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionTypes =\r\n  setInterlocutorsActionType |\r\n  setNewInterlocutorActionType |\r\n  setCurrentDialogActionType |\r\n  setNewMessagesCountActionType |\r\n  setMessagesAfterDateActionType |\r\n  toggleIsFetchingActionType\r\n\r\nfunction messagesReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_INTERLOCUTORS:\r\n      return {\r\n        ...state,\r\n        interlocutors: action.messages\r\n      }\r\n\r\n    case SET_NEW_INTERLOCUTOR:\r\n      return {\r\n        ...state,\r\n        newInterlocutor: action.profile\r\n      }\r\n\r\n    case SET_CURRENT_DIALOG:\r\n      return {\r\n        ...state,\r\n        currentDialog: action.currentDialog\r\n      }\r\n\r\n    case SET_MESSAGES_AFTER_DATE:\r\n      return {\r\n        ...state,\r\n        messagesAfterDate: action.messagesAfterDate\r\n      }\r\n\r\n    case SET_NEW_MESSAGES_COUNT:\r\n      return {\r\n        ...state,\r\n        newMessagesCount: action.count\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        fetching: {\r\n          ...state.fetching,\r\n          [action.property]: action.isFetching\r\n        }\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype setInterlocutorsActionType = { type: typeof SET_INTERLOCUTORS, messages: Array<IInterlocutor> };\r\nexport const setInterlocutors = (messages: Array<IInterlocutor>): setInterlocutorsActionType => ({\r\n  type: SET_INTERLOCUTORS,\r\n  messages\r\n})\r\n\r\ntype setNewInterlocutorActionType = { type: typeof SET_NEW_INTERLOCUTOR, profile: IProfile };\r\nexport const setNewInterlocutor = (profile: IProfile): setNewInterlocutorActionType => ({\r\n  type: SET_NEW_INTERLOCUTOR,\r\n  profile\r\n})\r\n\r\ntype setCurrentDialogActionType = { type: typeof SET_CURRENT_DIALOG, currentDialog: Array<IDialog> };\r\nexport const setCurrentDialog = (currentDialog: Array<IDialog>): setCurrentDialogActionType => ({\r\n  type: SET_CURRENT_DIALOG,\r\n  currentDialog\r\n})\r\n\r\ntype setMessagesAfterDateActionType = { type: typeof SET_MESSAGES_AFTER_DATE, messagesAfterDate: Array<IMessagesAfterDate> };\r\nexport const setMessagesAfterDate = (messagesAfterDate: Array<IMessagesAfterDate>): setMessagesAfterDateActionType => ({\r\n  type: SET_MESSAGES_AFTER_DATE,\r\n  messagesAfterDate: messagesAfterDate\r\n})\r\n\r\ntype setNewMessagesCountActionType = { type: typeof SET_NEW_MESSAGES_COUNT, count: number };\r\nexport const setNewMessagesCount = (count: number): setNewMessagesCountActionType => ({\r\n  type: SET_NEW_MESSAGES_COUNT,\r\n  count\r\n})\r\n\r\ntype toggleIsFetchingPropertyType =\r\n  'interlocutors' |\r\n  'newInterlocutor' |\r\n  'currentDialog' |\r\n  'messagesAfterDate' |\r\n  'newMessagesCount' |\r\n  'sendMessage'\r\ntype toggleIsFetchingActionType = {\r\n  type: typeof TOGGLE_IS_FETCHING,\r\n  property: toggleIsFetchingPropertyType,\r\n  isFetching: boolean\r\n};\r\nexport const toggleIsFetching = (property: toggleIsFetchingPropertyType, isFetching: boolean): toggleIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  property,\r\n  isFetching\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, RootReducerType, unknown, ActionTypes>\r\n\r\nexport const startChatting = (userID: number): ThunkType => {\r\n  return async () => {\r\n    await messagesAPI.startChatting(userID)\r\n  }\r\n}\r\n\r\nexport const getInterlocutors = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('interlocutors', true))\r\n    const res = await messagesAPI.getInterlocutors()\r\n    dispatch(setInterlocutors(res))\r\n    dispatch(toggleIsFetching('interlocutors', false))\r\n  }\r\n}\r\n\r\nexport const getNewInterlocutor = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('newInterlocutor', true))\r\n    const res = await profileAPI.getProfile(userID)\r\n    dispatch(setNewInterlocutor(res))\r\n    dispatch(toggleIsFetching('newInterlocutor', false))\r\n  }\r\n}\r\n\r\nexport const getDialog = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('currentDialog', true))\r\n    const res = await messagesAPI.getDialog(userID)\r\n    if (!res.error) {\r\n      dispatch(setCurrentDialog(res.items))\r\n      dispatch(toggleIsFetching('currentDialog', false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const sendMessage = (userID: number, message: string): ThunkType => {\r\n  return async (dispatch, getState, extraArgument) => {\r\n    dispatch(toggleIsFetching('sendMessage', true))\r\n    const res = await messagesAPI.sendMessage(userID, message)\r\n    if (res.resultCode === 0) {\r\n      Promise.resolve().then(() => {\r\n        getDialog(userID)(dispatch, getState, extraArgument)\r\n        getInterlocutors()(dispatch, getState, extraArgument)\r\n      })\r\n        .then(() => {\r\n          dispatch(toggleIsFetching('sendMessage', false))\r\n        })\r\n    }\r\n  }\r\n}\r\n\r\nexport const getNewMessagesCount = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('newMessagesCount', true))\r\n    const res = await messagesAPI.getNewMessagesCount()\r\n    dispatch(setNewMessagesCount(res))\r\n    dispatch(toggleIsFetching('newMessagesCount', false))\r\n  }\r\n}\r\n\r\nexport const getMessagesAfterDate = (userID: number, date: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleIsFetching('messagesAfterDate', true))\r\n    const res = await messagesAPI.getMessagesAfterDate(userID, date)\r\n    dispatch(setMessagesAfterDate(res))\r\n    dispatch(toggleIsFetching('messagesAfterDate', false))\r\n  }\r\n}\r\n\r\nexport default messagesReducer\r\n","import React, { useEffect, useRef } from 'react'\nimport styles from './Sidebar.module.css'\nimport Menu from './Menu/Menu'\nimport { connect } from 'react-redux'\nimport { RootReducerType } from '../../redux/store'\nimport { getNewMessagesCount } from '../../redux/messages-reducer'\n\ntype MapStatePropTypes = {\n  newMessagesCount: number\n  isAuth: boolean\n  newMessagesCountFetching: boolean\n}\n\ntype MapDispatchPropTypes = {\n  getNewMessagesCount: () => void\n}\n\nconst Sidebar: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({\n  newMessagesCount, getNewMessagesCount, isAuth, newMessagesCountFetching\n}) => {\n  const timerID = useRef<NodeJS.Timeout>()\n\n  useEffect(() => {\n    if (isAuth) {\n      getNewMessagesCount()\n    }\n  }, [getNewMessagesCount, isAuth])\n\n  useEffect(() => {\n    if (isAuth && !newMessagesCountFetching) {\n      timerID.current = setInterval(() => {\n        if (!newMessagesCountFetching) {\n          getNewMessagesCount()\n        }\n      }, 10000)\n    }\n\n    return () => {\n      if (timerID.current) {\n        clearInterval(timerID.current)\n      }\n    }\n  }, [getNewMessagesCount, isAuth, newMessagesCountFetching])\n\n  return (\n    <aside className={styles.aside}>\n      <Menu newMessagesCount={newMessagesCount}/>\n    </aside>\n  )\n}\n\nfunction mapStateToProps (state: RootReducerType): MapStatePropTypes {\n  return {\n    newMessagesCount: state.messages.newMessagesCount,\n    isAuth: state.auth.isAuth,\n    newMessagesCountFetching: state.messages.fetching.newMessagesCount\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, RootReducerType>(mapStateToProps, {\n  getNewMessagesCount\n})(Sidebar)\n","import { usersAPI } from '../api/api'\r\nimport { IUser } from '../types/types'\r\nimport { RootReducerType } from './store'\r\nimport { ThunkAction } from 'redux-thunk'\r\n\r\n/* Action types */\r\nconst FOLLOW = 'samurai-network/users/FOLLOW'\r\nconst UNFOLLOW = 'samurai-network/users/UNFOLLOW'\r\nconst SET_USERS = 'samurai-network/users/SET_USERS'\r\nconst SET_CURRENT_PAGE = 'samurai-network/users/SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'samurai-network/users/SET_TOTAL_USERS_COUNT'\r\nconst SET_TERM = 'samurai-network/users/SET_TERM'\r\nconst TOGGLE_IS_FETCHING = 'samurai-network/users/TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'samurai-network/users/TOGGLE_IS_FOLLOWING_PROGRESS'\r\nconst TOGGLE_IS_FOLLOWING_USER = 'samurai-network/users/TOGGLE_IS_FOLLOWING_USER'\r\n\r\nconst initialState = {\r\n  users: [] as Array<IUser>,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>,\r\n  term: '',\r\n  isFollowingUser: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  AcceptFollowActionType |\r\n  AcceptUnfollowActionType |\r\n  SetUsersActionType |\r\n  SetCurrentPageActionType |\r\n  SetTotalUsersActionType |\r\n  SetIsFetchingActionType |\r\n  ToggleFollowingProgressActionType |\r\n  setTermActionType |\r\n  toggleFollowedUserActionType\r\n\r\nfunction usersReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: true }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.id) {\r\n            return { ...user, followed: false }\r\n          }\r\n          return user\r\n        }),\r\n      }\r\n\r\n    case SET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      }\r\n\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      }\r\n\r\n    case SET_TOTAL_USERS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalUsersCount,\r\n      }\r\n\r\n    case TOGGLE_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching ?\r\n          [...state.followingInProgress, action.userId] :\r\n          state.followingInProgress.filter(id => id !== action.userId),\r\n      }\r\n\r\n    case SET_TERM:\r\n      return {\r\n        ...state,\r\n        term: action.term,\r\n      }\r\n\r\n    case TOGGLE_IS_FOLLOWING_USER:\r\n      return {\r\n        ...state,\r\n        isFollowingUser: action.following\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AcceptFollowActionType = { type: typeof FOLLOW, id: number };\r\nexport const acceptFollow = (id: number): AcceptFollowActionType => ({\r\n  type: FOLLOW,\r\n  id\r\n})\r\n\r\ntype AcceptUnfollowActionType = { type: typeof UNFOLLOW, id: number };\r\nexport const acceptUnfollow = (id: number): AcceptUnfollowActionType => ({\r\n  type: UNFOLLOW,\r\n  id\r\n})\r\n\r\ntype SetUsersActionType = { type: typeof SET_USERS, users: Array<IUser> };\r\nexport const setUsers = (users: Array<IUser>): SetUsersActionType => ({\r\n  type: SET_USERS,\r\n  users\r\n})\r\n\r\ntype SetCurrentPageActionType = { type: typeof SET_CURRENT_PAGE, currentPage: number };\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n  type: SET_CURRENT_PAGE,\r\n  currentPage,\r\n})\r\n\r\ntype SetTotalUsersActionType = { type: typeof SET_TOTAL_USERS_COUNT, totalUsersCount: number };\r\nexport const setTotalUsers = (totalUsers: number): SetTotalUsersActionType => ({\r\n  type: SET_TOTAL_USERS_COUNT,\r\n  totalUsersCount: totalUsers,\r\n})\r\n\r\ntype SetIsFetchingActionType = { type: typeof TOGGLE_IS_FETCHING, isFetching: boolean };\r\nexport const setIsFetching = (isFetching: boolean): SetIsFetchingActionType => ({\r\n  type: TOGGLE_IS_FETCHING,\r\n  isFetching,\r\n})\r\n\r\ntype ToggleFollowingProgressActionType = { type: typeof TOGGLE_IS_FOLLOWING_PROGRESS, isFetching: boolean, userId: number };\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n  isFetching,\r\n  userId,\r\n})\r\n\r\ntype setTermActionType = { type: typeof SET_TERM, term: string }\r\nexport const setTerm = (term: string): setTermActionType => ({\r\n  type: SET_TERM,\r\n  term,\r\n})\r\n\r\ntype toggleFollowedUserActionType = { type: typeof TOGGLE_IS_FOLLOWING_USER, following: boolean }\r\nexport const toggleFollowedUser = (following: boolean): toggleFollowedUserActionType => ({\r\n  type: TOGGLE_IS_FOLLOWING_USER,\r\n  following,\r\n})\r\n\r\n/* Thunk creators */\r\n// type GetStateType = () => AppStateType\r\n// type DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, RootReducerType, unknown, ActionTypes>\r\n\r\nexport const getRequestUsers = (pageSize: number, currentPage: number, term = ''): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(setIsFetching(true))\r\n    const response = await usersAPI.getUsers(pageSize, currentPage, term)\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsers(response.totalCount))\r\n    dispatch(setIsFetching(false))\r\n  }\r\n}\r\n\r\nexport const follow = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userID))\r\n    const response = await usersAPI.follow(userID)\r\n    if (response.resultCode === 0) {\r\n      dispatch(acceptFollow(userID))\r\n      dispatch(toggleFollowedUser(true))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userID))\r\n  }\r\n}\r\n\r\nexport const unfollow = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(toggleFollowingProgress(true, userID))\r\n    const response = await usersAPI.unfollow(userID)\r\n    if (response.resultCode === 0) {\r\n      dispatch(acceptUnfollow(userID))\r\n      dispatch(toggleFollowedUser(false))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userID))\r\n  }\r\n}\r\n\r\nexport const isFollowing = (userID: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await usersAPI.isFollowing(userID)\r\n    dispatch(toggleFollowedUser(response))\r\n  }\r\n}\r\n\r\nexport default usersReducer\r\n","import { createSelector } from 'reselect'\r\nimport { RootReducerType } from './store'\r\n\r\nexport const getUsers = (state: RootReducerType) => {\r\n  return state.users.users\r\n}\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(() => true)\r\n  }\r\n)\r\n\r\nexport const getTotalUsersCount = (state: RootReducerType) => {\r\n  return state.users.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: RootReducerType) => {\r\n  return state.users.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: RootReducerType) => {\r\n  return state.users.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: RootReducerType) => {\r\n  return state.users.followingInProgress\r\n}\r\n","import React from 'react'\nimport styles from './Button.module.css'\n\ntype PropTypes = {\n  onClick?: (e: React.MouseEvent) => void\n  type?: 'button' | 'submit' | 'reset'\n  disabled?: boolean\n  style?: React.CSSProperties\n}\n\nconst Button: React.FC<PropTypes> = ({ children, onClick, type, disabled, style }) => {\n  return (\n    <button\n      disabled={disabled}\n      type={type}\n      onClick={onClick}\n      style={style}\n      className={styles.button}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import React, { useState, ChangeEvent } from 'react'\r\nimport styles from './Search.module.css'\r\nimport Button from '../../../common/Button/Button'\r\n\r\ntype PropTypes = {\r\n  setTerm: (term: string) => void\r\n  setCurrentPage: (page: number) => void\r\n  setPortionNumber: (number: number) => void\r\n}\r\n\r\nconst Search = React.memo<PropTypes>(\r\n  ({ setTerm, setCurrentPage, setPortionNumber }) => {\r\n    const [inputText, setInputText] = useState('')\r\n\r\n    const onTextChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n      setInputText(event.target.value)\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n      setCurrentPage(1)\r\n      setTerm(inputText)\r\n      setPortionNumber(1)\r\n    }\r\n\r\n    const onReset = () => {\r\n      setCurrentPage(1)\r\n      setTerm('')\r\n      setInputText('')\r\n      setPortionNumber(1)\r\n    }\r\n\r\n    const searchButtonStyle = {\r\n      cursor: (inputText) ? 'pointer' : 'not-allowed'\r\n    }\r\n\r\n    return (\r\n      <div className={styles.div}>\r\n        <input placeholder=\"Поиск\" type=\"text\" onChange={onTextChange} className={styles.input} value={inputText}/>\r\n        <button\r\n          disabled={!inputText}\r\n          style={searchButtonStyle}\r\n          onClick={onButtonClick}\r\n          className={styles.button}>\r\n          Найти\r\n        </button>\r\n        <Button style={{ marginLeft: '10px' }} onClick={onReset}>Сброс</Button>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default React.memo(Search)\r\n","import React from 'react'\r\nimport styles from './PaginationItem.module.css'\r\n\r\ntype PropTypes = {\r\n  active: boolean\r\n  number: number\r\n}\r\n\r\nconst PaginationItem: React.FC<PropTypes> = ({ active, number }) => {\r\n  const activeStyle = active ? styles.paginationItemActive : ''\r\n\r\n  return (\r\n    <li className={styles.paginationItem + ' ' + activeStyle} data-number={number}>{number}</li>\r\n  )\r\n}\r\n\r\nexport default PaginationItem\r\n","import React, { useEffect } from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport PaginationItem from './PaginationItem/PaginationItem'\r\n\r\ntype PropTypes = {\r\n  currentPage: number\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  portionSize: number\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  term: string\r\n  setCurrentPage: (page: number) => void\r\n  portionNumber: number\r\n  setPortionNumber: (number: number) => void\r\n}\r\n\r\nconst Paginator = React.memo<PropTypes>(\r\n  ({ setCurrentPage, currentPage, totalUsersCount, pageSize, portionSize, getRequestUsers, term, portionNumber, setPortionNumber }) => {\r\n\r\n    useEffect(() => {\r\n      getRequestUsers(pageSize, currentPage, term)\r\n    }, [getRequestUsers, pageSize, currentPage, term])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n      getRequestUsers(pageSize, currentPage, term)\r\n      setCurrentPage(currentPage)\r\n    }\r\n\r\n    const pageCount = Math.ceil(totalUsersCount / pageSize)\r\n    const pages = []\r\n\r\n    for (let i = 1; i < totalUsersCount; i++) {\r\n      pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / portionSize)\r\n    const lastElemPageNumber = pageCount / portionSize * portionSize\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    const changePage = (event: React.MouseEvent<HTMLDivElement>) => {\r\n      const target = event.target as HTMLInputElement\r\n      const pageNumber = target.dataset.number\r\n\r\n      if (pageNumber) {\r\n        onPageChanged(+pageNumber)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div onClick={changePage} className={styles.paginationItems}>\r\n        {\r\n          totalUsersCount > 0 &&\r\n          <button disabled={portionNumber === 1} className={styles.button}\r\n                  onClick={() => {setPortionNumber(portionNumber - 1)}}>Влево</button>\r\n        }\r\n        {\r\n          pages.filter(\r\n            (num) => (num >= leftPortionPageNumber && num <= rightPortionPageNumber && num <= lastElemPageNumber))\r\n            .map((num) => (\r\n              <PaginationItem key={num} number={num} active={+currentPage === num}/>\r\n            ))\r\n        }\r\n        {\r\n          totalUsersCount > 0 &&\r\n          <button disabled={portionCount === portionNumber} className={styles.button}\r\n                  onClick={() => {setPortionNumber(portionNumber + 1)}}>Вправо</button>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default React.memo(Paginator)\r\n","import React from 'react'\r\nimport styles from './User.module.css'\r\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { IUser } from '../../../../../types/types'\r\n\r\ntype PropTypes = {\r\n  user: IUser\r\n  followButtonDisabled: boolean\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n}\r\n\r\nconst User: React.FC<PropTypes> = ({ user, followButtonDisabled, unfollow, follow }) => {\r\n  console.log('s')\r\n  return (\r\n    <li className={styles.user}>\r\n      <div className={styles.avatarBox}>\r\n        <NavLink to={`/profile/${user.id}`}>\r\n          <img src={user.photos.small || defaultAvatar} alt='avatar'/>\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div className={styles.info}>\r\n        <NavLink className={styles.userName} to={`/profile/${user.id}`}>{user.name}</NavLink>\r\n        {user.status && <span className={styles.userStatus}>{user.status}</span>}\r\n\r\n        {\r\n          user.followed ? (\r\n            <button\r\n              className={styles.followButton}\r\n              disabled={followButtonDisabled}\r\n              onClick={() => {unfollow(user.id)}}\r\n            >\r\n              Отписаться <span aria-label=\"Отписаться\" role=\"img\">❌</span>\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className={styles.followButton}\r\n              disabled={followButtonDisabled}\r\n              onClick={() => {follow(user.id)}}\r\n            >\r\n              Подписаться <span aria-label=\"Подписаться\" role=\"img\">✅</span>\r\n            </button>\r\n          )\r\n        }\r\n\r\n        <NavLink to={`/messages/${user.id}`} className={styles.sendMessage}>Написать сообщение</NavLink>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\nimport styles from './Preloader.module.css'\nimport preloader from '../../../assets/images/preloader.gif'\n\ntype PropTypes = {\n  stretch?: boolean\n}\n\nconst Preloader: React.FC<PropTypes> = ({ stretch }) => (\n  <img className={stretch ? styles.preloaderStretch : styles.preloaderIMG} src={preloader} alt='load'/>\n)\n\nexport default Preloader\n","import React from 'react'\r\nimport styles from './UsersList.module.css'\r\nimport User from './User/User'\r\nimport { IUser } from '../../../../types/types'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\n\r\ntype PropTypes = {\r\n  users: Array<IUser>\r\n  followingInProgress: Array<number>\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  isFetching: boolean\r\n}\r\n\r\nconst UsersList = React.memo<PropTypes>(\r\n  ({ users, followingInProgress, follow, unfollow, isFetching }) => {\r\n\r\n    const usersOrMessage = (users.length) ?\r\n      users.map((user) => (\r\n        <User key={user.id}\r\n              user={user}\r\n              followButtonDisabled={followingInProgress.some(id => id === user.id)}\r\n              follow={follow}\r\n              unfollow={unfollow}\r\n        />\r\n      )) : 'Ничего не найдено'\r\n\r\n    return (\r\n      <ul className={styles.users}>\r\n        {isFetching ? <Preloader stretch/> : usersOrMessage}\r\n      </ul>\r\n    )\r\n\r\n  }\r\n)\r\n\r\nexport default React.memo(UsersList)\r\n","import { connect } from 'react-redux'\r\nimport {\r\n  getRequestUsers,\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n} from '../../../redux/users-reducer'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getIsFetching,\r\n  getTotalUsersCount,\r\n  getUsersSelector,\r\n} from '../../../redux/users-selectors'\r\nimport { RootReducerType } from '../../../redux/store'\r\nimport { IUser } from '../../../types/types'\r\nimport Search from './Search/Search'\r\nimport Paginator from './Paginator/Paginator'\r\nimport UsersList from './UsersList/UsersList'\r\n\r\ntype MapStatePropTypes = {\r\n  currentPage: number\r\n  users: Array<IUser>\r\n  totalUsersCount: number\r\n  isFetching: boolean\r\n  followingInProgress: Array<number>\r\n  term: string\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  setCurrentPage: (page: number) => void\r\n  setIsFetching: (isFetching: boolean) => void\r\n  getRequestUsers: (pageSize: number, currentPage: number, term: string) => void\r\n  follow: (id: number) => void\r\n  unfollow: (id: number) => void\r\n  setTerm: (term: string) => void\r\n}\r\n\r\ntype PropTypes = MapStatePropTypes & MapDispatchPropTypes\r\n\r\nconst Users: React.FC<PropTypes> = ({\r\n  currentPage,\r\n  totalUsersCount,\r\n  isFetching,\r\n  users,\r\n  followingInProgress,\r\n  setCurrentPage,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n  getRequestUsers,\r\n  term,\r\n}) => {\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setCurrentPage(1)\r\n    }\r\n  }, [setCurrentPage])\r\n\r\n  const [portionNumber, setPortionNumber] = useState(1)\r\n\r\n  return (\r\n    <>\r\n      <h1>Пользователи</h1>\r\n      <Search\r\n        setTerm={setTerm}\r\n        setCurrentPage={setCurrentPage}\r\n        setPortionNumber={setPortionNumber}\r\n      />\r\n      <Paginator\r\n        totalUsersCount={totalUsersCount}\r\n        currentPage={currentPage}\r\n        pageSize={6}\r\n        portionSize={10}\r\n        getRequestUsers={getRequestUsers}\r\n        term={term}\r\n        setCurrentPage={setCurrentPage}\r\n        portionNumber={portionNumber}\r\n        setPortionNumber={setPortionNumber}\r\n      />\r\n      <UsersList\r\n        users={users}\r\n        followingInProgress={followingInProgress}\r\n        follow={follow}\r\n        unfollow={unfollow}\r\n        isFetching={isFetching}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: RootReducerType): MapStatePropTypes {\r\n  return {\r\n    users: getUsersSelector(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetching: getIsFetching(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n    term: state.users.term,\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, RootReducerType>(mapStateToProps, {\r\n  setCurrentPage,\r\n  setIsFetching,\r\n  getRequestUsers,\r\n  follow,\r\n  unfollow,\r\n  setTerm,\r\n})(Users)\r\n","import React from 'react'\nimport styles from './News.module.css'\n\nfunction News () {\n  return (\n    <div className={styles.messages}>\n      Новости\n    </div>\n  )\n}\n\nexport default News\n","import React from 'react'\nimport styles from './Music.module.css'\n\nfunction Music () {\n  return (\n    <div className={styles.messages}>\n      Музыка\n    </div>\n  )\n}\n\nexport default Music\n","import React from 'react'\nimport styles from './Settings.module.css'\n\nfunction Settings () {\n  return (\n    <div className={styles.messages}>\n      Настройки\n    </div>\n  )\n}\n\nexport default Settings\n","export const required = (value: string) => {\r\n  if (!value) return 'Поле обязательное'\r\n}\r\n\r\nexport const maxLength = (length: number) => (value: string) => {\r\n  if (value.length > length) return `Максимальная длина - ${length}`\r\n}\r\n","import { getAuthUserData, setMyProfile, SetMyProfileType } from './auth-reducer'\r\nimport { profileAPI } from '../api/api'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { RootReducerType } from './store'\r\n\r\n/* Action types */\r\nconst INITIALIZED_SUCCESS = 'samurai-network/app/INITIALIZED_SUCCESS'\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes = InitializedSuccessType | SetMyProfileType\r\n\r\nfunction initReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype InitializedSuccessType = { type: typeof INITIALIZED_SUCCESS };\r\nexport const initializedSuccess = (): InitializedSuccessType => ({\r\n  type: INITIALIZED_SUCCESS\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, RootReducerType, unknown, ActionTypes>\r\n\r\nexport const initializeApp = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    dispatch(getAuthUserData())\r\n      .then(() => {\r\n        dispatch(getMyProfile()).then(() => {\r\n          dispatch(initializedSuccess())\r\n        })\r\n      })\r\n  }\r\n}\r\n\r\nexport const getMyProfile = (): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    const isAuth = getState().auth.isAuth\r\n    const userID = getState().auth.userId\r\n\r\n    if (isAuth && userID) {\r\n      const response = await profileAPI.getProfile(userID)\r\n      dispatch(setMyProfile(response))\r\n    }\r\n  }\r\n}\r\n\r\nexport default initReducer\r\n","import { authAPI, profileAPI, securityAPI } from '../api/api'\r\nimport { stopSubmit, FormAction } from 'redux-form'\r\nimport { IPhotos, IProfile } from '../types/types'\r\nimport { getMyProfile } from './init-reducer'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { RootReducerType } from './store'\r\n\r\n/* Action types */\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA'\r\nconst SET_CAPTCHA_URL = 'samurai-network/auth/SET_CAPTCHA_URL'\r\nconst SET_MY_PROFILE = 'samurai-network/auth/SET_MY_PROFILE'\r\nconst SET_MY_PHOTO = 'samurai-network/auth/SET_MY_PHOTO'\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isFetching: false,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n  myProfile: null as IProfile | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  SetAuthUserDataActionType |\r\n  GetCaptchaUrlSuccessType |\r\n  SetMyProfileType |\r\n  SetMyPhotoType\r\n\r\nfunction authReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n\r\n    case SET_CAPTCHA_URL:\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl,\r\n      }\r\n\r\n    case SET_MY_PROFILE:\r\n      return {\r\n        ...state,\r\n        myProfile: action.profile,\r\n      }\r\n\r\n    case SET_MY_PHOTO:\r\n      return {\r\n        ...state,\r\n        myProfile: {\r\n          ...state.myProfile,\r\n          photos: action.photos\r\n        } as IProfile,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype SetAuthUserDataActionPayloadType = { userId: number | null, email: string | null, login: string | null, isAuth: boolean };\r\ntype SetAuthUserDataActionType = { type: typeof SET_USER_DATA, payload: SetAuthUserDataActionPayloadType };\r\nexport const setAuthUserData = (\r\n  userId: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean,\r\n): SetAuthUserDataActionType => (\r\n  { type: SET_USER_DATA, payload: { userId, email, login, isAuth } }\r\n)\r\n\r\ntype GetCaptchaUrlSuccessType = { type: typeof SET_CAPTCHA_URL, captchaUrl: string };\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n  type: SET_CAPTCHA_URL,\r\n  captchaUrl: captchaUrl,\r\n})\r\n\r\nexport type SetMyProfileType = { type: typeof SET_MY_PROFILE, profile: IProfile }\r\nexport const setMyProfile = (profile: IProfile): SetMyProfileType => ({\r\n  type: SET_MY_PROFILE,\r\n  profile,\r\n})\r\n\r\nexport type SetMyPhotoType = { type: typeof SET_MY_PHOTO, photos: IPhotos }\r\nexport const setMyPhoto = (photos: IPhotos): SetMyPhotoType => ({\r\n  type: SET_MY_PHOTO,\r\n  photos,\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, RootReducerType, unknown, ActionTypes | FormAction>\r\n\r\nexport const saveMyProfile = (profile: IProfile): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updateProfile(profile)\r\n    if (response.resultCode === 0) {\r\n      await dispatch(setMyProfile(profile))\r\n    }\r\n    else {\r\n      dispatch(stopSubmit('edit-profile', { _error: response.messages[0] }))\r\n      return Promise.reject()\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const meData = await authAPI.me()\r\n\r\n    if (meData.resultCode === 0) {\r\n      let { id, email, login } = meData.data\r\n      dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n\r\n    if (data.resultCode === 0) {\r\n      dispatch(getAuthUserData()).then(() => {\r\n        dispatch(getMyProfile())\r\n      })\r\n    }\r\n    else {\r\n      // 10 - Captcha is required\r\n      if (data.resultCode === 10) {\r\n        await dispatch(getCaptchaUrl())\r\n      }\r\n\r\n      dispatch(stopSubmit('login', { _error: data.messages[0] }))\r\n    }\r\n  }\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n\r\n    if (response.resultCode === 0) {\r\n      dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await securityAPI.getCaptcha()\r\n    const captchaUrl = response.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n  }\r\n}\r\n\r\nexport default authReducer\r\n","import React from 'react'\nimport styles from './Input.module.css'\nimport { WrappedFieldInputProps, WrappedFieldMetaProps } from 'redux-form'\n\ntype PropTypes = {\n  placeholder?: string\n  type?: string\n  id?: string\n  style?: React.CSSProperties\n  input?: WrappedFieldInputProps\n  meta?: WrappedFieldMetaProps\n}\n\nconst Input: React.FC<PropTypes> = ({ placeholder, meta, input, type, id, style = {} }) => {\n  const isError = meta ? meta.error && meta.touched : false\n  const checkBoxStyle = (type === 'checkbox') ? { width: 'auto' } : {}\n\n  return (\n    <span>\n      <input\n        id={id}\n        type={type}\n        style={Object.assign(style, checkBoxStyle)}\n        className={styles.input}\n        placeholder={placeholder}\n        {...input}\n      />\n      {isError && meta && <span className={styles.error}>{meta.error}</span>}\n    </span>\n  )\n}\n\nexport default Input\n","import React from 'react'\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form'\r\nimport { required } from '../../../utils/validators'\r\nimport { connect } from 'react-redux'\r\nimport { login } from '../../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Input from '../../common/Input/Input'\r\nimport styles from './Login.module.css'\r\nimport Button from '../../common/Button/Button'\r\nimport { RootReducerType } from '../../../redux/store'\r\n\r\ntype MapStatePropTypes = {\r\n  isAuth: boolean\r\n  captchaUrl: string | null\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst Login: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({ login, isAuth, captchaUrl }) => {\r\n  const onSubmit = (formData: formNames) => {\r\n    const { userLogin, password, rememberMe, captcha } = formData\r\n    login(userLogin, password, rememberMe, captcha)\r\n  }\r\n\r\n  const loginTestAccount = () => {\r\n    login('free@samuraijs.com', 'free', true, '')\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to='/profile'/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Авторизация</h1>\r\n      <LoginReduxForm\r\n        initialValues={{ rememberMe: true }}\r\n        logTestAccount={loginTestAccount}\r\n        captchaUrl={captchaUrl}\r\n        onSubmit={onSubmit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype formProps = {\r\n  captchaUrl: string | null\r\n  logTestAccount: () => void\r\n}\r\n\r\ntype formNames = {\r\n  userLogin: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<formNames, formProps> & formProps> = ({ handleSubmit, error, captchaUrl, logTestAccount }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      <div>\r\n        <label htmlFor='loginLogin'>Email</label>\r\n        <Field\r\n          type='text'\r\n          placeholder='Email'\r\n          name='userLogin'\r\n          component={Input}\r\n          validate={[required]}\r\n          id='loginLogin'\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor='loginPassword'>Пароль</label>\r\n        <Field\r\n          type='password'\r\n          placeholder='Пароль'\r\n          name='password'\r\n          component={Input}\r\n          validate={[required]}\r\n          id='loginPassword'\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Field type='checkbox' name='rememberMe' id='rememberMe' component={Input}/>\r\n        <label htmlFor='rememberMe'>Запомнить меня</label>\r\n      </div>\r\n\r\n      <div>\r\n        {captchaUrl && <img src={captchaUrl} alt='captcha'/>}\r\n        {\r\n          captchaUrl && (\r\n            <>\r\n              <label htmlFor='loginCaptcha'>Капча</label>\r\n              <Field\r\n                type='text'\r\n                placeholder='Капча'\r\n                name='captcha'\r\n                component={Input}\r\n                validate={[required]}\r\n                id='loginCaptcha'\r\n              />\r\n            </>\r\n          )\r\n        }\r\n      </div>\r\n\r\n      {error ? <div style={{ color: 'red' }}>{error}</div> : null}\r\n      <div>\r\n        <Button type='submit' style={{ width: '100px' }}>Войти</Button>\r\n        <Button type='button' style={{ marginLeft: '10px' }} onClick={logTestAccount}>\r\n          Войти под тестовым аккаунтом\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<formNames, formProps>({ form: 'login' })(LoginForm)\r\n\r\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, RootReducerType>((state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captchaUrl: state.auth.captchaUrl\r\n}), { login })(Login)\r\n","import { profileAPI } from '../api/api'\r\nimport { FormAction, stopSubmit } from 'redux-form'\r\nimport { IPhotos, IPost, IProfile } from '../types/types'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { RootReducerType } from './store'\r\nimport { setMyPhoto, SetMyPhotoType } from './auth-reducer'\r\n\r\n/* Action types */\r\nconst ADD_POST = 'samurai-network/profile/ADD_POST'\r\nconst SET_USER_PROFILE = 'samurai-network/profile/SET_USER_PROFILE'\r\nconst SET_STATUS = 'samurai-network/profile/SET_STATUS'\r\nconst SET_PROFILE_PHOTO = 'samurai-network/profile/SET_PROFILE_PHOTO'\r\nconst SET_AVATAR_FETCHING = 'samurai-network/profile/SET_AVATAR_FETCHING'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, text: 'Вам нравится React?', likes: 4 },\r\n    { id: 2, text: 'hey', likes: 2 },\r\n  ] as Array<IPost>,\r\n  profile: null as IProfile | null,\r\n  status: '',\r\n  avatarIsFetching: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionTypes =\r\n  AddPostActionType |\r\n  SetUserProfileActionType |\r\n  SetStatusActionType |\r\n  setProfilePhotoActionType |\r\n  setAvatarIsFetchingActionType |\r\n  SetMyPhotoType\r\n\r\nfunction profileReducer (state = initialState, action: ActionTypes): InitialStateType {\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      const newPost = {\r\n        id: state.posts[state.posts.length - 1].id + 1,\r\n        text: action.text,\r\n        likes: 0,\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      }\r\n\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      }\r\n\r\n    case SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      }\r\n\r\n    case SET_PROFILE_PHOTO:\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as IProfile,\r\n      }\r\n\r\n    case SET_AVATAR_FETCHING:\r\n      return {\r\n        ...state,\r\n        avatarIsFetching: action.isFetching\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* Action creators */\r\ntype AddPostActionType = { type: typeof ADD_POST, text: string }\r\nexport const addPost = (formData: { newPost: string }): AddPostActionType => ({\r\n  type: ADD_POST,\r\n  text: formData.newPost\r\n})\r\n\r\ntype SetUserProfileActionType = { type: typeof SET_USER_PROFILE, profile: IProfile | null }\r\nexport const setUserProfile = (profile: IProfile | null): SetUserProfileActionType => ({\r\n  type: SET_USER_PROFILE,\r\n  profile: profile\r\n})\r\n\r\ntype SetStatusActionType = { type: typeof SET_STATUS, status: string }\r\nexport const setStatus = (status: string): SetStatusActionType => ({\r\n  type: SET_STATUS,\r\n  status: status\r\n})\r\n\r\ntype setProfilePhotoActionType = { type: typeof SET_PROFILE_PHOTO, photos: IPhotos }\r\nexport const setProfilePhoto = (photos: IPhotos): setProfilePhotoActionType => ({\r\n  type: SET_PROFILE_PHOTO,\r\n  photos: photos\r\n})\r\n\r\ntype setAvatarIsFetchingActionType = { type: typeof SET_AVATAR_FETCHING, isFetching: boolean }\r\nexport const setAvatarIsFetching = (isFetching: boolean): setAvatarIsFetchingActionType => ({\r\n  type: SET_AVATAR_FETCHING,\r\n  isFetching\r\n})\r\n\r\n/* Thunk creators */\r\ntype ThunkType = ThunkAction<Promise<void>, RootReducerType, unknown, ActionTypes | FormAction>\r\n\r\nexport const getUsersProfile = (userID: number | null): ThunkType => {\r\n  return async (dispatch) => {\r\n    if (userID) {\r\n      dispatch(setUserProfile(null))\r\n      const response = await profileAPI.getProfile(userID)\r\n      dispatch(setUserProfile(response))\r\n    }\r\n  }\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response))\r\n  }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.resultCode === 0) {\r\n      dispatch(setStatus(status))\r\n    }\r\n  }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => {\r\n  return async (dispatch) => {\r\n    const response = await profileAPI.updatePhoto(file)\r\n    if (response.resultCode === 0) {\r\n      dispatch(setProfilePhoto(response.data.photos))\r\n      dispatch(setMyPhoto(response.data.photos))\r\n      dispatch(setAvatarIsFetching(false))\r\n    }\r\n  }\r\n}\r\n\r\nexport const saveProfile = (profile: IProfile): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    const response = await profileAPI.updateProfile(profile)\r\n    if (response.resultCode === 0) {\r\n      await dispatch(getUsersProfile(getState().auth.userId))\r\n    }\r\n    else {\r\n      dispatch(stopSubmit('edit-profile', { _error: response.messages[0] }))\r\n      return Promise.reject()\r\n    }\r\n  }\r\n}\r\n\r\nexport default profileReducer\r\n","import React from 'react'\nimport styles from './Post.module.css'\n\ntype PropTypes = {\n  text: string\n  likes: number\n}\n\nconst Post: React.FC<PropTypes> = (props) => {\n  return (\n    <div className={styles.post}>\n      <div>\n        <img className={styles.avatar} src='https://miro.medium.com/max/480/1*5LGjgBL2kWpog3AodB569A.jpeg' alt=''/>\n      </div>\n      <div className={styles.message}>\n        <div>\n          {props.text}\n        </div>\n        <div>\n          {props.likes}♥\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport styles from './Textarea.module.css'\nimport { WrappedFieldInputProps, WrappedFieldMetaProps } from 'redux-form'\n\ntype PropTypes = {\n  placeholder?: string\n  rows?: number\n  cols?: number\n  id?: string\n  style?: React.CSSProperties\n  spanStyle?: React.CSSProperties\n  value?: string\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void\n  input?: WrappedFieldInputProps\n  meta?: WrappedFieldMetaProps\n}\n\nconst Textarea: React.FC<PropTypes> = ({\n  style, placeholder, rows = 1, cols, meta, input, id, value, onChange, onKeyDown, spanStyle\n}) => {\n  const isError = meta ? meta.error && meta.touched : false\n\n  return (\n    <span style={spanStyle} className={styles.span}>\n      <textarea\n        rows={rows}\n        cols={cols}\n        style={style}\n        className={styles.textarea}\n        placeholder={placeholder}\n        id={id}\n        value={value}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        {...input}\n      />\n      {isError && meta && <span className={styles.error}>{meta.error}</span>}\n    </span>\n  )\n}\n\nexport default Textarea\n","import React from 'react'\nimport styles from './Posts.module.css'\nimport Post from './Post/Post'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\nimport { required, maxLength } from '../../../../utils/validators'\nimport Button from '../../../common/Button/Button'\nimport Textarea from '../../../common/Textarea/Textarea'\nimport { IPost } from '../../../../types/types'\n\ntype PropTypes = {\n  posts: Array<IPost>\n  addPost: (formData: formNames) => void\n}\n\nconst Posts: React.FC<PropTypes> = ({ posts, addPost }) => {\n  const postsElements = posts.map(\n    post => <Post key={post.id} text={post.text} likes={post.likes}/>\n  ).reverse()\n\n  return (\n    <div className={styles.posts}>\n      <h2 className={styles.title}>Посты</h2>\n      <AddNewPostFormRedux onSubmit={(formData) => { addPost(formData) }}/>\n      <div className={styles.postsList}>\n        {postsElements}\n      </div>\n    </div>\n  )\n}\n\ntype formNames = {\n  newPost: string\n}\n\nconst maxLengthValidator = maxLength(10)\n\nconst AddNewPostForm: React.FC<InjectedFormProps<formNames>> = ({ handleSubmit }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Field\n          className={styles.textarea}\n          name='newPost'\n          component={Textarea}\n          placeholder='Что у вас нового?'\n          validate={[required, maxLengthValidator]}\n          rows={2}\n          style={{ marginTop: '10px', width: '100%' }}\n        />\n      </div>\n      <div>\n        <Button style={{ marginTop: '10px' }}>Отправить</Button>\n      </div>\n    </form>\n  )\n}\n\nconst AddNewPostFormRedux = reduxForm<formNames>({ form: 'profileAddNewPost' })(AddNewPostForm)\n\nexport default React.memo(Posts)\n","import React, { useRef, ChangeEvent } from 'react'\nimport styles from './Avatar.module.css'\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\nimport Preloader from '../../../../common/Preloader/Preloader'\nimport { NavLink } from 'react-router-dom'\nimport Button from '../../../../common/Button/Button'\nimport { IProfile } from '../../../../../types/types'\n\ntype PropTypes = {\n  isOwner: boolean\n  profile: IProfile | null\n  avatarIsFetching: boolean\n  isFollowingUser: boolean\n  followingInProgress: Array<number>\n  userURL: number | null\n\n  savePhoto: (photo: File) => void\n  setAvatarIsFetching: (isFetching: boolean) => void\n  follow: (userID: number) => void\n  unfollow: (userID: number) => void\n}\n\nconst Avatar: React.FC<PropTypes> = ({\n  isOwner,\n  savePhoto,\n  profile,\n  setAvatarIsFetching,\n  avatarIsFetching,\n  follow,\n  unfollow,\n  followingInProgress,\n  isFollowingUser,\n  userURL,\n}) => {\n  const uploadLabel = useRef<HTMLLabelElement>(null)\n\n  function onUploadPhoto (e: ChangeEvent<HTMLInputElement>) {\n    const target = e.target as HTMLInputElement\n    const photo: File = (target.files as FileList)[0]\n\n    if (uploadLabel.current) {\n      uploadLabel.current.textContent = photo.name\n    }\n    setAvatarIsFetching(true)\n    savePhoto(photo)\n\n  }\n\n  const followingFetching = followingInProgress.some((id) => (id === userURL))\n\n  const followUnfollow = () => {\n    if (userURL) {\n      if (isFollowingUser) {\n        unfollow(userURL)\n      }\n      else {\n        follow(userURL)\n      }\n    }\n  }\n\n  return (\n    <div className={styles.avatar}>\n      <div className={styles.avatarWrapper}>\n        {\n          avatarIsFetching || !profile ? <Preloader stretch/> : (\n            <img\n              className={styles.avatarIMG}\n              src={profile.photos.large || defaultAvatar} alt='avatar'\n            />\n          )\n        }\n      </div>\n      {\n        isOwner &&\n        <div className={styles.upload}>\n          <input className={styles.uploadInput} onChange={onUploadPhoto} type='file' id='UserPhotoUpload'/>\n          <label\n            ref={uploadLabel}\n            className={styles.uploadLabel}\n            htmlFor='UserPhotoUpload'\n          >\n            Обновить фотографию\n          </label>\n        </div>\n      }\n      {\n        !isOwner && <NavLink className={styles.sendMessage} to={`/messages/${userURL}`}>\n          <Button style={{ width: '100%' }}>Написать сообщение</Button>\n        </NavLink>\n      }\n      {\n        !isOwner &&\n        <Button style={{ width: '100%', marginTop: '10px' }} disabled={followingFetching} onClick={followUnfollow}>\n          {isFollowingUser ? 'Отписаться ❌' : 'Подписаться ✅'}\n        </Button>\n      }\n    </div>\n  )\n}\n\nexport default React.memo(Avatar)\n","import React, { useEffect, useState } from 'react'\nimport styles from './Status.module.css'\n\ntype PropTypes = {\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n}\n\nconst Status: React.FC<PropTypes> = ({ status, updateStatus, isOwner }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [localStatus, setLocalStatus] = useState(status)\n\n  useEffect(() => {\n    setLocalStatus(status)\n  }, [status])\n\n  const activateEditMode = () => {setEditMode(true)}\n  const deactivateEditMode = () => {setEditMode(false)}\n\n  const onUpdateStatus = () => {\n    deactivateEditMode()\n    updateStatus(localStatus)\n  }\n\n  const onStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLocalStatus(event.currentTarget.value)\n  }\n\n  const selectInputText = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.currentTarget.select()\n  }\n\n  const statusClass = ((status) ? styles.statusExist : styles.statusNotExist) + ' ' + styles.status\n\n  return (\n    <div className={styles.statusBox}>\n      {\n        !editMode ? (\n          (isOwner && <button className={statusClass} onClick={activateEditMode}>{status || 'изменить статус'}</button>)\n          || <div className={styles.statusNotMe}>{status}</div>\n        ) : (\n          <input\n            autoFocus\n            onChange={onStatusChange}\n            onBlur={onUpdateStatus}\n            onFocus={selectInputText}\n            type=\"text\"\n            value={localStatus}\n            className={styles.statusInput}\n          />\n        )\n      }\n    </div>\n  )\n}\n\nexport default React.memo(Status)\n","import React from 'react'\r\nimport { required } from '../../../../../../utils/validators'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport Button from '../../../../../common/Button/Button'\r\nimport Input from '../../../../../common/Input/Input'\r\nimport Textarea from '../../../../../common/Textarea/Textarea'\r\nimport styles from './ProfileDataForm.module.css'\r\nimport { IProfile } from '../../../../../../types/types'\r\n\r\ntype PropTypes = {\r\n  profile: IProfile\r\n  setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<PropTypes> & PropTypes> = ({ handleSubmit, error, profile, setEditMode }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      {error && <div className={styles.error}>{error}</div>}\r\n\r\n      <h3>Основная информация</h3>\r\n\r\n      <div className={styles.aboutMe}>\r\n        <div>\r\n          <div className={styles.labelWrapper}>\r\n            <label htmlFor='dataFormName'>ФИО:</label>\r\n          </div>\r\n          <Field\r\n            type='text'\r\n            placeholder='Имя'\r\n            name='fullName'\r\n            component={Input}\r\n            validate={[required]}\r\n            id='dataFormName'\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <div className={styles.labelWrapper}>\r\n            <label htmlFor='dataFormWork'>Ищите работу:</label>\r\n          </div>\r\n          <Field type='checkbox' name='lookingForAJob' component={Input} id='dataFormWork'/>\r\n        </div>\r\n\r\n        <div>\r\n          <div className={styles.labelWrapper}>\r\n            <label htmlFor='dataFormSkills'>Ваши навыки:</label>\r\n          </div>\r\n          <Field\r\n            rows={2}\r\n            name='lookingForAJobDescription'\r\n            component={Textarea}\r\n            validate={[required]}\r\n            id='dataFormSkills'\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <div className={styles.labelWrapper}>\r\n            <label htmlFor='dataFormAbout'>О Вас:</label>\r\n          </div>\r\n          <Field\r\n            rows={2}\r\n            style={{ width: '280px' }}\r\n            name='aboutMe'\r\n            component={Textarea}\r\n            validate={[required]}\r\n            id='dataFormAbout'\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <h3>Ваши контакты</h3>\r\n\r\n      <div className={styles.myContacts}>\r\n        {\r\n          Object.keys(profile.contacts).map(key => (\r\n            <div key={key}>\r\n              <div className={styles.labelWrapper}>\r\n                <label htmlFor={'dataForm' + key}>{key[0].toUpperCase() + key.slice(1)}:</label>\r\n              </div>\r\n              <Field\r\n                type='text'\r\n                name={'contacts.' + key}\r\n                component={Input}\r\n                id={'dataForm' + key}\r\n              />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n\r\n      <div className={styles.buttons}>\r\n        <Button type='submit'>Сохранить</Button>\r\n        <Button style={{ marginLeft: '10px' }} type='button' onClick={() => {setEditMode(false)}}>Отмена</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<any, PropTypes>({ form: 'edit-profile' })((React.memo(ProfileDataForm)))\r\n","import React from 'react'\nimport styles from './ProfileData.module.css'\nimport { IProfile, IContacts } from '../../../../../../types/types'\n\ntype PropTypes = {\n  profile: IProfile\n}\n\nconst ProfileData: React.FC<PropTypes> = ({ profile }) => {\n  const isContactsExists = Object.values(profile.contacts).some((contact) => (contact !== null))\n\n  return (\n    <dl className={styles.about}>\n      <div>\n        <dt>Ищу работу:</dt>\n        <dd> {profile.lookingForAJob ? 'да' : 'нет'}</dd>\n      </div>\n\n      <div>\n        <dt>Мои навыки:</dt>\n        <dd> {profile.lookingForAJobDescription || 'нету'}</dd>\n      </div>\n\n      <div>\n        <dt>Обо мне:</dt>\n        <dd> {profile.aboutMe || 'не заполнено'}</dd>\n      </div>\n\n      {isContactsExists && <hr/>}\n\n      {\n        isContactsExists && (\n          <div className={styles.contacts}>\n            <dt>Мои контакты:</dt>\n            <dd>\n              <dl className={styles.contactsList}>\n                {\n                  Object.entries(profile.contacts).map((contact) => {\n                    const key = contact[0] as keyof IContacts\n                    const value = contact[1]\n\n                    return (value) ? (\n                      <div key={key}>\n                        <dt>{key}:</dt>\n                        <dd>\n                          <a rel='noopener noreferrer' target='_blank' href={profile.contacts[key]}>\n                            {profile.contacts[key]}\n                          </a>\n                        </dd>\n                      </div>\n                    ) : null\n                  })\n                }\n              </dl>\n            </dd>\n          </div>\n        )\n      }\n    </dl>\n  )\n}\n\nexport default React.memo(ProfileData)\n","import React, { useState } from 'react'\nimport styles from './UserInfo.module.css'\nimport Status from './Status/Status'\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm'\nimport ProfileData from './ProfileData/ProfileData'\nimport Button from '../../../../common/Button/Button'\nimport { IProfile } from '../../../../../types/types'\n\ntype PropTypes = {\n  profile: IProfile\n  status: string\n  isOwner: boolean\n\n  updateStatus: (newStatus: string) => void\n  saveProfile: (profile: IProfile) => void\n}\n\nconst UserInfo: React.FC<PropTypes> = ({ profile, status, isOwner, saveProfile, updateStatus }) => {\n  const [editMode, setEditMode] = useState(false)\n\n  async function onSubmit (formData: IProfile) {\n    await saveProfile(formData)\n    setEditMode(false)\n  }\n\n  return (\n    <div className={styles.info}>\n      <div>\n        <h1 className={styles.userName}>{profile.fullName}</h1>\n        <Status status={status} updateStatus={updateStatus} isOwner={isOwner}/>\n\n        {(status || isOwner) && <hr/>}\n\n        {\n          editMode ?\n            <ProfileDataForm setEditMode={setEditMode} profile={profile} initialValues={profile} onSubmit={onSubmit}/> :\n            <ProfileData profile={profile}/>\n        }\n      </div>\n\n      {isOwner && !editMode && <div><Button onClick={() => { setEditMode(true) }}>Редактировать</Button></div>}\n    </div>\n  )\n}\n\nexport default React.memo(UserInfo)\n","import React from 'react'\nimport Preloader from '../../../common/Preloader/Preloader'\nimport Avatar from './Avatar/Avatar'\nimport UserInfo from './UserInfo/UserInfo'\nimport { IProfile } from '../../../../types/types'\n\ntype PropTypes = {\n  profile: IProfile | null\n  status: string\n  isOwner: boolean\n  avatarIsFetching: boolean\n  followingInProgress: Array<number>\n  isFollowingUser: boolean\n  userURL: number | null\n\n  follow: (userID: number) => void\n  unfollow: (userID: number) => void\n  setAvatarIsFetching: (isFetching: boolean) => void\n  savePhoto: (photo: File) => void\n  updateStatus: (newStatus: string) => void\n  saveProfile: (profile: IProfile) => void\n}\n\nconst User: React.FC<PropTypes> = ({\n  profile,\n  savePhoto,\n  status,\n  updateStatus,\n  isOwner,\n  saveProfile,\n  avatarIsFetching,\n  setAvatarIsFetching,\n  follow,\n  unfollow,\n  followingInProgress,\n  isFollowingUser,\n  userURL,\n}) => {\n\n  if (!profile) {\n    return <Preloader/>\n  }\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <Avatar\n        savePhoto={savePhoto}\n        profile={profile}\n        isOwner={isOwner}\n        avatarIsFetching={avatarIsFetching}\n        setAvatarIsFetching={setAvatarIsFetching}\n        follow={follow}\n        unfollow={unfollow}\n        followingInProgress={followingInProgress}\n        isFollowingUser={isFollowingUser}\n        userURL={userURL}\n      />\n\n      <UserInfo\n        status={status}\n        updateStatus={updateStatus}\n        saveProfile={saveProfile}\n        profile={profile}\n        isOwner={isOwner}\n      />\n    </div>\n  )\n}\n\nexport default React.memo(User)\n","import React, { useEffect } from 'react'\r\nimport {\r\n  getStatus,\r\n  getUsersProfile,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus,\r\n  setAvatarIsFetching\r\n} from '../../../redux/profile-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\nimport { saveMyProfile } from '../../../redux/auth-reducer'\r\nimport { IPost, IProfile } from '../../../types/types'\r\nimport Posts from './Posts/Posts'\r\nimport { RootReducerType } from '../../../redux/store'\r\nimport User from './User/User'\r\nimport { addPost } from '../../../redux/profile-reducer'\r\nimport { follow, isFollowing, unfollow } from '../../../redux/users-reducer'\r\n\r\ntype MapStatePropTypes = {\r\n  userID: number | null\r\n  profile: IProfile | null\r\n  status: string\r\n  avatarIsFetching: boolean\r\n  myProfile: IProfile | null\r\n  isAuth: boolean\r\n  followingInProgress: Array<number>\r\n  isFollowingUser: boolean\r\n  posts: Array<IPost>\r\n}\r\n\r\ntype MapDispatchPropTypes = {\r\n  getUsersProfile: (userID: number) => void\r\n  getStatus: (userID: number) => void\r\n  savePhoto: (photo: File) => void\r\n  updateStatus: (newStatus: string) => void\r\n  setAvatarIsFetching: (isFetching: boolean) => void\r\n  saveProfile: (profile: IProfile) => void\r\n  saveMyProfile: (profile: IProfile) => void\r\n  follow: (userID: number) => void\r\n  unfollow: (userID: number) => void\r\n  isFollowing: (userID: number) => void\r\n  addPost: (formData: { newPost: string }) => void\r\n}\r\n\r\nconst Profile: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({\r\n  savePhoto,\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  saveProfile,\r\n  userID,\r\n  getUsersProfile,\r\n  getStatus,\r\n  avatarIsFetching,\r\n  setAvatarIsFetching,\r\n  myProfile,\r\n  saveMyProfile,\r\n  isAuth,\r\n  follow,\r\n  unfollow,\r\n  followingInProgress,\r\n  isFollowing,\r\n  isFollowingUser,\r\n  posts,\r\n  addPost,\r\n}) => {\r\n\r\n  const { userID: id } = useParams()\r\n\r\n  const userURL = (id) ? +id : userID\r\n  const isOwner = userID === userURL\r\n\r\n  useEffect(() => {\r\n    if (userURL) {\r\n      isFollowing(+userURL)\r\n    }\r\n  }, [userURL, isFollowing])\r\n\r\n  useEffect(() => {\r\n    const updateProfile = () => {\r\n      if (userURL) {\r\n        getUsersProfile(userURL)\r\n        getStatus(userURL)\r\n      }\r\n    }\r\n\r\n    updateProfile()\r\n  }, [userURL, getUsersProfile, getStatus])\r\n\r\n  if (!isAuth) {\r\n    return <Redirect to='/login'/>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <User\r\n        savePhoto={savePhoto}\r\n        profile={isOwner ? myProfile : profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        isOwner={isOwner}\r\n        saveProfile={isOwner ? saveMyProfile : saveProfile}\r\n        avatarIsFetching={avatarIsFetching}\r\n        setAvatarIsFetching={setAvatarIsFetching}\r\n        follow={follow}\r\n        unfollow={unfollow}\r\n        followingInProgress={followingInProgress}\r\n        isFollowingUser={isFollowingUser}\r\n        userURL={userURL ? +userURL : null}\r\n      />\r\n      <Posts\r\n        posts={posts}\r\n        addPost={addPost}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps (state: RootReducerType): MapStatePropTypes {\r\n  return {\r\n    profile: state.profile.profile,\r\n    status: state.profile.status,\r\n    userID: state.auth.userId,\r\n    avatarIsFetching: state.profile.avatarIsFetching,\r\n    myProfile: state.auth.myProfile,\r\n    isAuth: state.auth.isAuth,\r\n    followingInProgress: state.users.followingInProgress,\r\n    isFollowingUser: state.users.isFollowingUser,\r\n    posts: state.profile.posts,\r\n  }\r\n}\r\n\r\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, RootReducerType>(mapStateToProps, {\r\n  getUsersProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n  setAvatarIsFetching,\r\n  saveMyProfile,\r\n  follow,\r\n  unfollow,\r\n  isFollowing,\r\n  addPost,\r\n})(Profile)\r\n","import React, { useEffect, useState } from 'react'\nimport styles from './InterlocutorsListItem.module.css'\nimport { IPhotos } from '../../../../../../types/types'\nimport { NavLink } from 'react-router-dom'\nimport defaultAvatar from '../../../../../../assets/images/defaultAvatar.png'\n\ntype PropTypes = {\n  id: number\n  userName: string\n  hasNewMessages: boolean\n  lastDialogActivityDate: string\n  lastUserActivityDate: string\n  newMessagesCount: number\n  photos: IPhotos\n}\n\nconst InterlocutorsListItem: React.FC<PropTypes> = ({\n  id, userName, hasNewMessages, lastDialogActivityDate, lastUserActivityDate, newMessagesCount, photos\n}) => {\n  const [isToday, setIsToday] = useState(false)\n\n  useEffect(() => {\n    const now = new Date()\n    const tomorrow = now.setDate(now.getDate() + 1)\n    const yesterday = now.setDate(now.getDate() - 1)\n    const lastMessageDate = new Date(lastDialogActivityDate).getTime()\n\n    setIsToday(yesterday < lastMessageDate && lastMessageDate < tomorrow)\n  }, [lastDialogActivityDate])\n\n  return (\n    <li className={styles.li}>\n      <NavLink className={styles.a} to={`/messages/${id}`} activeClassName={styles.active}>\n        <img className={styles.avatar} src={photos.small || defaultAvatar} alt=\"avatar\"/>\n        <div className={styles.info}>\n          <div className={styles.infoMessage}>\n            <span className={styles.userName}>{userName}</span>\n            {hasNewMessages && <span>{newMessagesCount}<span role='img' aria-label='сообщение'>💬</span></span>}\n          </div>\n          <div className={styles.lastMessage}>\n            {\n              isToday ? new Date(lastDialogActivityDate).toLocaleTimeString().slice(0, 5) :\n                new Date(lastDialogActivityDate).toLocaleDateString()\n            }\n          </div>\n        </div>\n      </NavLink>\n    </li>\n  )\n}\n\nexport default InterlocutorsListItem\n","import React from 'react'\nimport styles from './InterlocutorsList.module.css'\nimport { IInterlocutor } from '../../../../../types/types'\nimport InterlocutorsListItem from './InterlocutorsListItem/InterlocutorsListItem'\n\ntype PropTypes = {\n  interlocutors: Array<IInterlocutor>\n}\n\nconst InterlocutorsList: React.FC<PropTypes> = ({ interlocutors }) => {\n  return (\n    <ul className={styles.ul}>\n      {\n        interlocutors.map((message) => (\n          <InterlocutorsListItem\n            key={message.id}\n            id={message.id}\n            userName={message.userName}\n            hasNewMessages={message.hasNewMessages}\n            lastDialogActivityDate={message.lastDialogActivityDate}\n            lastUserActivityDate={message.lastUserActivityDate}\n            newMessagesCount={message.newMessagesCount}\n            photos={message.photos}\n          />\n        ))\n      }\n    </ul>\n  )\n}\n\nexport default InterlocutorsList\n","import React from 'react'\nimport styles from './Interlocutors.module.css'\nimport { IInterlocutor } from '../../../../types/types'\nimport InterlocutorsList from './InterlocutorsList/InterlocutorsList'\nimport Preloader from '../../../common/Preloader/Preloader'\n\ntype PropTypes = {\n  interlocutors: Array<IInterlocutor> | null\n}\n\nconst Interlocutors: React.FC<PropTypes> = ({ interlocutors }) => {\n  return (\n    <div className={styles.wrapper}>\n      {\n        interlocutors ? <InterlocutorsList interlocutors={interlocutors}/> : <Preloader stretch/>\n      }\n    </div>\n  )\n}\n\nexport default React.memo(Interlocutors)\n","import React from 'react'\nimport styles from './SelectInterlocutor.module.css'\n\nconst SelectInterlocutor: React.FC = () => {\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.elem}>\n        <div className={styles.messagesIMG}/>\n        <div>Пожалуйста, выберите собеседника</div>\n      </div>\n    </div>\n  )\n}\n\nexport default SelectInterlocutor\n","import React from 'react'\nimport styles from './InterlocutorInfo.module.css'\nimport defaultAvatar from '../../../../../assets/images/defaultAvatar.png'\nimport { NavLink } from 'react-router-dom'\nimport { IPhotos } from '../../../../../types/types'\n\ntype PropTypes = {\n  interlocutor: {\n    id: number | null,\n    userName: string | null,\n    lastUserActivityDate: string | null\n    photos: IPhotos | null\n  }\n}\n\nconst InterlocutorInfo: React.FC<PropTypes> = ({ interlocutor }) => {\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.info}>\n        <NavLink to={`/profile/${interlocutor.id}`} className={styles.userName}>{interlocutor.userName}</NavLink>\n        {\n          interlocutor.lastUserActivityDate && (\n            <div className={styles.online}>\n              Был в сети - {new Date(interlocutor.lastUserActivityDate).toLocaleString()}\n            </div>\n          )\n        }\n      </div>\n      <NavLink to={`/profile/${interlocutor.id}`}>\n        <img className={styles.avatar}\n             src={interlocutor.photos?.small ? interlocutor.photos.small : defaultAvatar || defaultAvatar}\n             alt='avatar'/>\n      </NavLink>\n    </div>\n  )\n}\n\nexport default React.memo(InterlocutorInfo)\n","import React from 'react'\nimport styles from './DialogMessagesItem.module.css'\nimport { NavLink } from 'react-router-dom'\nimport defaultAvatar from '../../../../../../assets/images/defaultAvatar.png'\n\ntype PropTypes = {\n  messageID: string\n  message: string\n  translatedMessage: null\n  addedAt: string\n  senderID: number\n  senderName: string\n  recipientID: number\n  viewed: boolean\n  lastSenderID: number\n  interlocutorPhoto: string | null\n  myPhoto: string | null\n  myID: number | null\n  firstMessage: boolean\n}\n\nconst DialogMessagesItem: React.FC<PropTypes> = ({\n  messageID,\n  message,\n  translatedMessage,\n  addedAt,\n  senderID,\n  senderName,\n  recipientID,\n  viewed,\n  lastSenderID,\n  interlocutorPhoto,\n  myPhoto,\n  myID,\n  firstMessage,\n}) => {\n  const isNewSender = lastSenderID !== senderID\n  const iSender = senderID === myID\n  const senderPhoto = iSender ? myPhoto : interlocutorPhoto\n\n  return (\n    <div className={styles.wrapper} style={{ marginTop: isNewSender ? (firstMessage) ? '0' : '30px' : '15px' }}>\n      {\n        isNewSender && <>\n          <NavLink to={`/profile/${senderID}`}>\n            <img className={styles.avatar} src={senderPhoto || defaultAvatar} alt='avatar'/>\n          </NavLink>\n          <NavLink className={styles.aName} to={`/profile/${senderID}`}>\n            <span className={styles.name}>{senderName}</span>\n          </NavLink>\n          <span className={styles.time}>{new Date(addedAt).toLocaleTimeString().slice(0, 5)}</span>\n        </>\n      }\n\n      <div className={styles.message}>{message}</div>\n    </div>\n  )\n}\n\nexport default DialogMessagesItem\n","import React from 'react'\nimport styles from './DialogMessages.module.css'\nimport { IDialog } from '../../../../../types/types'\nimport DialogMessagesItem from './DialogMessagesItem/DialogMessagesItem'\nimport Preloader from '../../../../common/Preloader/Preloader'\n\ntype PropTypes = {\n  dialog: Array<IDialog> | null\n  interlocutorPhoto: string | null\n  myPhoto: string | null\n  myID: number | null\n  isFetching: boolean\n}\n\nconst DialogMessages: React.FC<PropTypes> = ({ dialog, myPhoto, interlocutorPhoto, myID, isFetching }) => {\n  const dialogMessagesItem = []\n  if (dialog) {\n    let lastSenderID = 0\n    for (let i = 0; i < dialog.length; i++) {\n      dialogMessagesItem.push(\n        <DialogMessagesItem\n          key={dialog[i].id}\n          messageID={dialog[i].id}\n          message={dialog[i].body}\n          translatedMessage={dialog[i].translatedBody}\n          addedAt={dialog[i].addedAt}\n          senderID={dialog[i].senderId}\n          senderName={dialog[i].senderName}\n          recipientID={dialog[i].recipientId}\n          viewed={dialog[i].viewed}\n          lastSenderID={lastSenderID}\n          interlocutorPhoto={interlocutorPhoto}\n          myPhoto={myPhoto}\n          myID={myID}\n          firstMessage={i === 0}\n        />\n      )\n      lastSenderID = dialog[i].senderId\n    }\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {\n        (isFetching && dialogMessagesItem) ? <Preloader stretch/> : dialogMessagesItem\n      }\n    </div>\n  )\n}\n\nexport default React.memo(DialogMessages)\n","import React, { useState } from 'react'\nimport styles from './DialogForm.module.css'\nimport Textarea from '../../../../common/Textarea/Textarea'\nimport Button from '../../../../common/Button/Button'\n\ntype PropTypes = {\n  sendMessage: (userID: number, message: string) => void\n  startChatting: (userID: number) => void\n  userID: number\n  sendMessageFetching: boolean\n}\n\nconst DialogForm: React.FC<PropTypes> = ({ sendMessage, startChatting, userID, sendMessageFetching }) => {\n  const [message, setMessage] = useState('')\n\n  const onSendMessage = () => {\n    sendMessage(userID, message)\n    setMessage('')\n  }\n\n  const onEnterMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (message.trim() && e.keyCode === 13) {\n      sendMessage(userID, message.trim())\n      setMessage('')\n      e.preventDefault()\n    }\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(e.currentTarget.value)\n    e.currentTarget.style.height = 'auto'\n    e.currentTarget.style.height = e.currentTarget.scrollHeight + 'px'\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <Textarea\n        onChange={onChange}\n        value={message}\n        style={{ maxHeight: '200px', resize: 'none', minHeight: '40px', width: '100%' }}\n        spanStyle={{ flexGrow: 1 }}\n        placeholder='Напишите сообщение…'\n        onKeyDown={onEnterMessage}\n      />\n      <Button\n        style={{ height: '40px', marginLeft: '20px' }}\n        disabled={sendMessageFetching || !message.trim()}\n        onClick={onSendMessage}\n      >\n        Отправить\n      </Button>\n    </div>\n  )\n}\n\nexport default React.memo(DialogForm)\n","import React, { useEffect, useState } from 'react'\nimport styles from './Dialog.module.css'\nimport { IInterlocutor, IPhotos, IProfile, IDialog } from '../../../../types/types'\nimport SelectInterlocutor from './SelectIntercutor/SelectInterlocutor'\nimport InterlocutorInfo from './InterlocutorInfo/InterlocutorInfo'\nimport DialogMessages from './DialogMessages/DialogMessages'\nimport DialogForm from './DialogForm/DialogForm'\n\ntype PropTypes = {\n  currentDialog: Array<IDialog> | null\n  interlocutor: IInterlocutor | null\n  userID: number | null\n  myPhoto: string | null\n  myID: number | null\n  dialogFetching: boolean\n  newInterlocutor: IProfile | null\n  sendMessage: (userID: number, message: string) => void\n  startChatting: (userID: number) => void\n  sendMessageFetching: boolean\n}\n\nconst Dialog: React.FC<PropTypes> = ({\n  currentDialog,\n  interlocutor,\n  userID,\n  myPhoto,\n  myID,\n  dialogFetching,\n  newInterlocutor,\n  sendMessage,\n  startChatting,\n  sendMessageFetching,\n}) => {\n  const [user, setUser] = useState({\n    id: null as number | null,\n    userName: null as string | null,\n    lastUserActivityDate: null as string | null,\n    photos: null as IPhotos | null\n  })\n\n  useEffect(() => {\n    if (!interlocutor && newInterlocutor) {\n      setUser({\n        id: newInterlocutor.userId,\n        userName: newInterlocutor.fullName,\n        lastUserActivityDate: null,\n        photos: newInterlocutor.photos\n      })\n    }\n    if ((interlocutor && !newInterlocutor) || (interlocutor && newInterlocutor)) {\n      setUser({\n        id: interlocutor.id,\n        userName: interlocutor.userName,\n        lastUserActivityDate: interlocutor.lastUserActivityDate,\n        photos: interlocutor.photos\n      })\n    }\n  }, [interlocutor, newInterlocutor])\n\n  if (!userID) {\n    return <SelectInterlocutor/>\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <InterlocutorInfo interlocutor={user}/>\n      <DialogMessages\n        myID={myID}\n        dialog={currentDialog}\n        interlocutorPhoto={user.photos ? user.photos.small : null}\n        myPhoto={myPhoto}\n        isFetching={dialogFetching}\n      />\n      <DialogForm\n        sendMessage={sendMessage}\n        startChatting={startChatting}\n        userID={userID}\n        sendMessageFetching={sendMessageFetching}\n      />\n    </div>\n  )\n}\n\nexport default React.memo(Dialog)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { RootReducerType } from '../../../redux/store'\nimport { IInterlocutor, IDialog, IMessagesAfterDate, IProfile } from '../../../types/types'\nimport {\n  getInterlocutors,\n  getDialog,\n  getMessagesAfterDate,\n  startChatting,\n  sendMessage,\n  getNewInterlocutor\n} from '../../../redux/messages-reducer'\nimport { Redirect, useParams } from 'react-router-dom'\nimport Interlocutors from './Interlocutors/Interlocutors'\nimport Dialog from './Dialog/Dialog'\nimport styles from './Messages.module.css'\n\ntype MapStatePropTypes = {\n  interlocutors: Array<IInterlocutor> | null\n  newInterlocutor: IProfile | null\n  currentDialog: Array<IDialog> | null\n  messagesAfterDate: Array<IMessagesAfterDate> | null\n\n  fetching: {\n    interlocutors: boolean\n    newInterlocutor: boolean\n    currentDialog: boolean\n    messagesAfterDate: boolean\n    sendMessage: boolean\n  }\n\n  isAuth: boolean\n  myProfile: IProfile | null\n}\n\ntype MapDispatchPropTypes = {\n  startChatting: (userID: number) => void\n  getInterlocutors: () => void\n  getNewInterlocutor: (userID: number) => void\n  getDialog: (userID: number) => void\n  sendMessage: (userID: number, message: string) => void\n  getMessagesAfterDate: (userID: number, date: string) => void\n}\n\nconst Messages: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({\n  interlocutors,\n  newInterlocutor,\n  getNewInterlocutor,\n  currentDialog,\n  messagesAfterDate,\n  fetching,\n  startChatting,\n  getInterlocutors,\n  getDialog,\n  sendMessage,\n  getMessagesAfterDate,\n  isAuth,\n  myProfile,\n}) => {\n  const { userID } = useParams()\n  const [interlocutor, setInterlocutor] = useState<IInterlocutor | null>(null)\n\n  useEffect(() => {\n    getInterlocutors()\n  }, [getInterlocutors])\n\n  useEffect(() => {\n    if (userID) {\n      getNewInterlocutor(+userID)\n    }\n  }, [getNewInterlocutor, userID])\n\n  useEffect(() => {\n    if (userID) {\n      getDialog(+userID)\n    }\n  }, [getDialog, userID])\n\n  useEffect(() => {\n    if (userID && interlocutors) {\n      setInterlocutor(interlocutors.find((item) => item.id === +userID) || null)\n    }\n  }, [userID, interlocutors])\n\n  if (!isAuth) {\n    return <Redirect to='/login'/>\n  }\n\n  return (\n    <div className={styles.messages}>\n      <Interlocutors interlocutors={interlocutors}/>\n      <Dialog\n        userID={userID ? +userID : null}\n        interlocutor={interlocutor}\n        currentDialog={currentDialog}\n        myPhoto={myProfile ? myProfile.photos.small : null}\n        myID={myProfile ? myProfile.userId : null}\n        dialogFetching={fetching.currentDialog}\n        newInterlocutor={newInterlocutor}\n        sendMessage={sendMessage}\n        startChatting={startChatting}\n        sendMessageFetching={fetching.sendMessage}\n      />\n    </div>\n  )\n}\n\nfunction mapStateToProps (state: RootReducerType): MapStatePropTypes {\n  return {\n    interlocutors: state.messages.interlocutors,\n    newInterlocutor: state.messages.newInterlocutor,\n    currentDialog: state.messages.currentDialog,\n    messagesAfterDate: state.messages.messagesAfterDate,\n    fetching: state.messages.fetching,\n    isAuth: state.auth.isAuth,\n    myProfile: state.auth.myProfile,\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, RootReducerType>(mapStateToProps, {\n  startChatting,\n  getInterlocutors,\n  getNewInterlocutor,\n  getDialog,\n  getMessagesAfterDate,\n  sendMessage\n})(Messages)\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport styles from './Main.module.css'\r\nimport Users from './Users/Users'\r\nimport News from './News/News'\r\nimport Music from './Music/Music'\r\nimport Settings from './Settings/Settings'\r\nimport Login from './Login/Login'\r\nimport Profile from './Profile/Profile'\r\nimport Messages from './Messages/Messages'\r\n\r\nfunction Main () {\r\n  return (\r\n    <div className={styles.content}>\r\n      <Switch>\r\n        <Route exact path='/' render={() => <Redirect to='/profile'/>}/>\r\n        <Route path='/profile/:userID?' render={() => <Profile/>}/>\r\n        <Route path='/messages/:userID?' render={() => <Messages/>}/>\r\n        <Route path='/users' render={() => <Users/>}/>\r\n        <Route path='/news' component={News}/>\r\n        <Route path='/music' component={Music}/>\r\n        <Route path='/settings' component={Settings}/>\r\n        <Route path='/login' render={() => <Login/>}/>\r\n        <Route path='*' render={() => '404'}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport { logout } from '../../redux/auth-reducer'\nimport { connect } from 'react-redux'\nimport { RootReducerType } from '../../redux/store'\nimport styles from './Header.module.css'\nimport Button from '../common/Button/Button'\nimport { NavLink } from 'react-router-dom'\nimport { IProfile } from '../../types/types'\n\ntype MapStatePropTypes = {\n  isAuth: boolean\n  myProfile: IProfile | null\n}\n\ntype MapDispatchPropTypes = {\n  logout: () => void\n}\n\nconst Header: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({ isAuth, logout, myProfile }) => {\n  return (\n    <header className={styles.header}>\n      <div className={styles.container}>\n        <div className={styles.title}>Samurai Network</div>\n        {\n          isAuth && myProfile && myProfile.photos.small ? (\n              <div className={styles.infoMe}>\n                <NavLink to='/profile' className={styles.userName}>\n                  <span>\n                    {myProfile.fullName.split(' ')[0]}\n                  </span>\n                </NavLink>\n                <NavLink to='/profile' className={styles.avatar}>\n                  <img src={myProfile.photos.small} alt='avatar'/>\n                </NavLink>\n                <Button onClick={logout}>Выйти</Button>\n              </div>\n            )\n            : (\n              <NavLink to='/login' className={styles.login}>\n                <Button>Авторизоваться</Button>\n              </NavLink>\n            )\n        }\n      </div>\n    </header>\n  )\n}\n\nconst mapStateToProps = (state: RootReducerType): MapStatePropTypes => ({\n  isAuth: state.auth.isAuth,\n  myProfile: state.auth.myProfile\n})\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, Object, RootReducerType>(mapStateToProps, {\n  logout,\n})(Header)\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport styles from './App.module.css'\nimport Footer from './Footer/Footer'\nimport Sidebar from './Sidebar/Sidebar'\nimport Main from './Main/Main'\nimport Header from './Header/Header'\nimport { initializeApp } from '../redux/init-reducer'\nimport { RootReducerType } from '../redux/store'\nimport { HashRouter } from 'react-router-dom'\nimport Preloader from './common/Preloader/Preloader'\n\ntype MapStatePropTypes = {\n  initialized: boolean\n}\n\ntype MapDispatchPropTypes = {\n  initializeApp: () => void\n}\n\nconst App: React.FC<MapStatePropTypes & MapDispatchPropTypes> = ({ initializeApp, initialized }) => {\n  useEffect(() => {\n    initializeApp()\n  }, [initializeApp])\n\n  if (!initialized) {\n    return (\n      <div className={styles.page}>\n        <Preloader stretch/>\n      </div>\n    )\n  }\n\n  return (\n    <HashRouter>\n      <div className={styles.page}>\n        <Header/>\n        <main className={styles.main}>\n          <Sidebar/>\n          <Main/>\n        </main>\n        <Footer/>\n      </div>\n    </HashRouter>\n  )\n}\n\nfunction mapStateToProps (state: RootReducerType): MapStatePropTypes {\n  return {\n    initialized: state.init.initialized\n  }\n}\n\nexport default connect<MapStatePropTypes, MapDispatchPropTypes, unknown, RootReducerType>(\n  mapStateToProps, { initializeApp }\n)(App)\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport messagesReducer from './messages-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport initReducer from './init-reducer'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst rootReducer = combineReducers({\r\n  profile: profileReducer,\r\n  messages: messagesReducer,\r\n  users: usersReducer,\r\n  auth: authReducer,\r\n  init: initReducer,\r\n  form: formReducer,\r\n})\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store\r\n","import * as serviceWorker from './serviceWorker'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__212y-\",\"avatarWrapper\":\"Avatar_avatarWrapper__2hCnO\",\"avatarIMG\":\"Avatar_avatarIMG__1-LTa\",\"upload\":\"Avatar_upload__3w34x\",\"uploadInput\":\"Avatar_uploadInput__3u7cW\",\"uploadLabel\":\"Avatar_uploadLabel__2Exb6\",\"sendMessage\":\"Avatar_sendMessage__261Dv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2CR8J\",\"container\":\"Header_container__HDvgl\",\"userName\":\"Header_userName__3dpGW\",\"avatar\":\"Header_avatar__34Ghc\",\"infoMe\":\"Header_infoMe__UMQTd\",\"title\":\"Header_title__1NDT_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusBox\":\"Status_statusBox__3qS3R\",\"status\":\"Status_status__1ZDrO\",\"statusNotExist\":\"Status_statusNotExist__2Ayt_\",\"statusExist\":\"Status_statusExist__2EA9K\",\"statusInput\":\"Status_statusInput__2o4UG\",\"statusNotMe\":\"Status_statusNotMe__22woT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DialogMessagesItem_wrapper__D7RSz\",\"avatar\":\"DialogMessagesItem_avatar__kICSw\",\"name\":\"DialogMessagesItem_name__5Xel9\",\"time\":\"DialogMessagesItem_time__1OJ-S\",\"aName\":\"DialogMessagesItem_aName__q09QC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"InterlocutorInfo_wrapper__1YcGt\",\"info\":\"InterlocutorInfo_info__11Ihl\",\"avatar\":\"InterlocutorInfo_avatar__1YtOI\",\"userName\":\"InterlocutorInfo_userName__2BFJg\",\"online\":\"InterlocutorInfo_online__2G9Er\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__epRJ6\",\"title\":\"Posts_title__3oTfI\",\"textarea\":\"Posts_textarea__1CXXA\",\"postsList\":\"Posts_postsList__3exEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__4Klr-\",\"main\":\"App_main__1nCkj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Search_div__2HjV8\",\"input\":\"Search_input__1SF7g\",\"button\":\"Search_button__tmFR-\",\"reset\":\"Search_reset__2G7ng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItems\":\"Paginator_paginationItems__2iECZ\",\"button\":\"Paginator_button__1_Jp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__lASZN\",\"avatar\":\"Post_avatar__3eC36\",\"message\":\"Post_message__3tS2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__32chH\",\"error\":\"Textarea_error__1Ernb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ProfileData_contactsList__ZEb2E\",\"about\":\"ProfileData_about__2NVys\",\"contacts\":\"ProfileData_contacts__KLq0S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"SelectInterlocutor_wrapper__1dg4h\",\"elem\":\"SelectInterlocutor_elem__QCwpf\",\"messagesIMG\":\"SelectInterlocutor_messagesIMG__eC6TV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginationItem\":\"PaginationItem_paginationItem__1EdWb\",\"paginationItemActive\":\"PaginationItem_paginationItemActive__1EfE6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderIMG\":\"Preloader_preloaderIMG__BZHNf\",\"preloaderStretch\":\"Preloader_preloaderStretch__3XuiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3Rg3-\",\"error\":\"Input_error__36SvP\"};"],"sourceRoot":""}